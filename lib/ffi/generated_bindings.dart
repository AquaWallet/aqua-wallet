// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings created by ffigen
class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int __darwin_check_fd_set_overflow(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return ___darwin_check_fd_set_overflow(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___darwin_check_fd_set_overflowPtr =
      _lookup<ffi.NativeFunction<Native__darwin_check_fd_set_overflow>>(
          '__darwin_check_fd_set_overflow');
  late final ___darwin_check_fd_set_overflow =
      ___darwin_check_fd_set_overflowPtr
          .asFunction<Dart__darwin_check_fd_set_overflow>();

  /// Perform one-time initialization of the library. This call must be made once
  /// only before calling any other GDK functions, including any functions called
  /// from other threads.
  ///
  /// :param config: The :ref:`init-config-arg`.
  int GA_init(
    ffi.Pointer<GA_json> config,
  ) {
    return _GA_init(
      config,
    );
  }

  late final _GA_initPtr =
      _lookup<ffi.NativeFunction<NativeGA_init>>('GA_init');
  late final _GA_init = _GA_initPtr.asFunction<DartGA_init>();

  /// Get any error details associated with the last error on the current thread.
  ///
  /// :param output: Destination for the output :ref:`error-details` JSON.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  int GA_get_thread_error_details(
    ffi.Pointer<ffi.Pointer<GA_json>> output,
  ) {
    return _GA_get_thread_error_details(
      output,
    );
  }

  late final _GA_get_thread_error_detailsPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_thread_error_details>>(
          'GA_get_thread_error_details');
  late final _GA_get_thread_error_details = _GA_get_thread_error_detailsPtr
      .asFunction<DartGA_get_thread_error_details>();

  /// Create a new session.
  ///
  /// :param session: Destination for the resulting session.
  /// |     The returned session should be freed using `GA_destroy_session`.
  ///
  /// Once created, the caller should set a handler for notifications using
  /// `GA_set_notification_handler`, before calling `GA_connect` to connect the
  /// session to the network for use.
  int GA_create_session(
    ffi.Pointer<ffi.Pointer<GA_session>> session,
  ) {
    return _GA_create_session(
      session,
    );
  }

  late final _GA_create_sessionPtr =
      _lookup<ffi.NativeFunction<NativeGA_create_session>>('GA_create_session');
  late final _GA_create_session =
      _GA_create_sessionPtr.asFunction<DartGA_create_session>();

  /// Set a handler to be called when notifications arrive for a session.
  ///
  /// :param session: The session to receive notifications for.
  /// :param handler: The handler to receive notifications.
  /// :param context: A context pointer to be passed to the handler.
  ///
  /// This call must be initially made on a session before `GA_connect`.
  /// :ref:`ntf-notifications` may arrive on different threads, so the caller
  /// must ensure that shared data is correctly locked within the handler.
  /// The ``GA_json`` object passed to the caller must be destroyed by the
  /// caller using `GA_destroy_json`. Failing to do so will result in
  /// memory leaks.
  ///
  /// Once a session has been connected, this call can be made only with null
  /// values for ``handler`` and ``context``. Once this returns, no further
  /// notifications will be delivered for the lifetime of the session.
  ///
  /// The caller should not call session functions from within the callback
  /// handler as this may block the application.
  int GA_set_notification_handler(
    ffi.Pointer<GA_session> session,
    GA_notification_handler handler,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _GA_set_notification_handler(
      session,
      handler,
      context,
    );
  }

  late final _GA_set_notification_handlerPtr =
      _lookup<ffi.NativeFunction<NativeGA_set_notification_handler>>(
          'GA_set_notification_handler');
  late final _GA_set_notification_handler = _GA_set_notification_handlerPtr
      .asFunction<DartGA_set_notification_handler>();

  /// Free a session allocated by `GA_create_session`.
  ///
  /// :param session: The session to free.
  ///
  /// If the session was connected using `GA_connect` then this call will
  /// disconnect it it before destroying it.
  int GA_destroy_session(
    ffi.Pointer<GA_session> session,
  ) {
    return _GA_destroy_session(
      session,
    );
  }

  late final _GA_destroy_sessionPtr =
      _lookup<ffi.NativeFunction<NativeGA_destroy_session>>(
          'GA_destroy_session');
  late final _GA_destroy_session =
      _GA_destroy_sessionPtr.asFunction<DartGA_destroy_session>();

  /// Connect the session to the specified network.
  ///
  /// :param session: The session to connect.
  /// :param net_params: The :ref:`net-params` of the network to connect to.
  ///
  /// This call connects to the remote network services that the session
  /// requires, for example the Green servers or Electrum servers.
  /// `GA_connect` must be called only once per session lifetime, after
  /// `GA_create_session` and before `GA_destroy_session` respectively.
  /// Once connected, the underlying network connection of the
  /// session can be controlled using `GA_reconnect_hint`.
  ///
  /// Once the session is connected, use `GA_register_user` to create a new
  /// wallet for the session, or `GA_login_user` to open an existing wallet.
  int GA_connect(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> net_params,
  ) {
    return _GA_connect(
      session,
      net_params,
    );
  }

  late final _GA_connectPtr =
      _lookup<ffi.NativeFunction<NativeGA_connect>>('GA_connect');
  late final _GA_connect = _GA_connectPtr.asFunction<DartGA_connect>();

  /// Connect or disconnect a sessions underlying network connection.
  ///
  /// :param session: The session to use.
  /// :param hint: the :ref:`reconnect` describing the desired reconnection behaviour.
  int GA_reconnect_hint(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> hint,
  ) {
    return _GA_reconnect_hint(
      session,
      hint,
    );
  }

  late final _GA_reconnect_hintPtr =
      _lookup<ffi.NativeFunction<NativeGA_reconnect_hint>>('GA_reconnect_hint');
  late final _GA_reconnect_hint =
      _GA_reconnect_hintPtr.asFunction<DartGA_reconnect_hint>();

  /// Get the current proxy settings for the given session.
  ///
  /// :param session: The session to use.
  /// :param output: Destination for the output :ref:`proxy-info`.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  int GA_get_proxy_settings(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_json>> output,
  ) {
    return _GA_get_proxy_settings(
      session,
      output,
    );
  }

  late final _GA_get_proxy_settingsPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_proxy_settings>>(
          'GA_get_proxy_settings');
  late final _GA_get_proxy_settings =
      _GA_get_proxy_settingsPtr.asFunction<DartGA_get_proxy_settings>();

  /// Compute a hashed wallet identifier from a BIP32 xpub or mnemonic.
  ///
  /// The identifier returned is computed from the network combined with the
  /// master chain code and public key of the xpub/mnemonic. It can be used
  /// as a unique wallet identifier to mitigate privacy risks associated with
  /// storing the wallet's xpub.
  ///
  /// :param net_params: The :ref:`net-params` of the network to compute an identifier for.
  /// :param params: The :ref:`wallet-id-request` to compute an identifier for.
  /// :param output: Destination for the output JSON.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  int GA_get_wallet_identifier(
    ffi.Pointer<GA_json> net_params,
    ffi.Pointer<GA_json> params,
    ffi.Pointer<ffi.Pointer<GA_json>> output,
  ) {
    return _GA_get_wallet_identifier(
      net_params,
      params,
      output,
    );
  }

  late final _GA_get_wallet_identifierPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_wallet_identifier>>(
          'GA_get_wallet_identifier');
  late final _GA_get_wallet_identifier =
      _GA_get_wallet_identifierPtr.asFunction<DartGA_get_wallet_identifier>();

  /// Make a request to an http server.
  ///
  /// :param session: The session to use.
  /// :param params: the :ref:`http-params` of the server to connect to.
  /// :param output: Destination for the output JSON.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  int GA_http_request(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> params,
    ffi.Pointer<ffi.Pointer<GA_json>> output,
  ) {
    return _GA_http_request(
      session,
      params,
      output,
    );
  }

  late final _GA_http_requestPtr =
      _lookup<ffi.NativeFunction<NativeGA_http_request>>('GA_http_request');
  late final _GA_http_request =
      _GA_http_requestPtr.asFunction<DartGA_http_request>();

  /// Refresh the sessions internal cache of Liquid asset information.
  ///
  /// Each release of GDK comes with a partial list of Liquid assets built-in.
  /// This call is used to update it to include all the registered Liquid assets
  /// or any new assets that have been registered since the last update.
  ///
  /// :param session: The session to use.
  /// :param params: the :ref:`assets-params-data` of the server to connect to.
  int GA_refresh_assets(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> params,
  ) {
    return _GA_refresh_assets(
      session,
      params,
    );
  }

  late final _GA_refresh_assetsPtr =
      _lookup<ffi.NativeFunction<NativeGA_refresh_assets>>('GA_refresh_assets');
  late final _GA_refresh_assets =
      _GA_refresh_assetsPtr.asFunction<DartGA_refresh_assets>();

  /// Query the Liquid asset registry.
  ///
  /// This call is used to retrieve informations about a set of Liquid assets
  /// specified by their asset id.
  ///
  /// :param session: The session to use.
  /// :param params: the :ref:`get-assets-params` specifying the assets to query.
  /// :param output: Destination for the output :ref:`asset-details`.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  int GA_get_assets(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> params,
    ffi.Pointer<ffi.Pointer<GA_json>> output,
  ) {
    return _GA_get_assets(
      session,
      params,
      output,
    );
  }

  late final _GA_get_assetsPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_assets>>('GA_get_assets');
  late final _GA_get_assets = _GA_get_assetsPtr.asFunction<DartGA_get_assets>();

  /// Validate asset domain name.
  /// (This is a interface stub)
  int GA_validate_asset_domain_name(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> params,
    ffi.Pointer<ffi.Pointer<GA_json>> output,
  ) {
    return _GA_validate_asset_domain_name(
      session,
      params,
      output,
    );
  }

  late final _GA_validate_asset_domain_namePtr =
      _lookup<ffi.NativeFunction<NativeGA_validate_asset_domain_name>>(
          'GA_validate_asset_domain_name');
  late final _GA_validate_asset_domain_name = _GA_validate_asset_domain_namePtr
      .asFunction<DartGA_validate_asset_domain_name>();

  /// Validate a gdk format JSON document.
  ///
  /// :param session: The session to use.
  /// :param details: The :ref:`validate-details` to validate.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     The call handlers result is :ref:`validate-result`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call
  /// completes.
  int GA_validate(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_validate(
      session,
      details,
      call,
    );
  }

  late final _GA_validatePtr =
      _lookup<ffi.NativeFunction<NativeGA_validate>>('GA_validate');
  late final _GA_validate = _GA_validatePtr.asFunction<DartGA_validate>();

  /// Create a new user wallet.
  ///
  /// :param session: The session to use.
  /// :param hw_device: :ref:`hw-device` or empty JSON for software wallet registration.
  /// :param details: The :ref:`login-credentials` for software wallet registration.
  /// :param call: Destination for the resulting GA_auth_handler to perform the registration.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameters ``hw_device`` and ``details`` will be emptied when the call
  /// completes.
  int GA_register_user(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> hw_device,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_register_user(
      session,
      hw_device,
      details,
      call,
    );
  }

  late final _GA_register_userPtr =
      _lookup<ffi.NativeFunction<NativeGA_register_user>>('GA_register_user');
  late final _GA_register_user =
      _GA_register_userPtr.asFunction<DartGA_register_user>();

  /// Authenticate to a user's wallet.
  ///
  /// :param session: The session to use.
  /// :param hw_device: :ref:`hw-device` or empty JSON for software wallet login.
  /// :param details: The :ref:`login-credentials` for authenticating the user.
  /// :param call: Destination for the resulting GA_auth_handler to perform the login.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// If a sessions underlying network connection has disconnected and
  /// reconnected, the user will need to login again using this function. In
  /// this case, the caller can pass empty JSON for both ``hw_device`` and
  /// ``details`` to login using the previously passed credentials and device.
  ///
  /// .. note:: When calling from C/C++, the parameters ``hw_device`` and ``details`` will be emptied when the call
  /// completes.
  int GA_login_user(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> hw_device,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_login_user(
      session,
      hw_device,
      details,
      call,
    );
  }

  late final _GA_login_userPtr =
      _lookup<ffi.NativeFunction<NativeGA_login_user>>('GA_login_user');
  late final _GA_login_user = _GA_login_userPtr.asFunction<DartGA_login_user>();

  /// Set or disable a watch-only login for a logged-in user wallet.
  ///
  /// :param session: The session to use.
  /// :param username: The watch-only username to login with, or a blank string to disable.
  /// :param password: The watch-only password to login with, or a blank string to disable.
  int GA_set_watch_only(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> username,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _GA_set_watch_only(
      session,
      username,
      password,
    );
  }

  late final _GA_set_watch_onlyPtr =
      _lookup<ffi.NativeFunction<NativeGA_set_watch_only>>('GA_set_watch_only');
  late final _GA_set_watch_only =
      _GA_set_watch_onlyPtr.asFunction<DartGA_set_watch_only>();

  /// Get the current watch-only login for a logged-in user wallet, if any.
  ///
  /// :param session: The session to use.
  /// :param username: Destination for the watch-only username. Empty string if not set.
  /// |     Returned string should be freed using `GA_destroy_string`.
  int GA_get_watch_only_username(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<ffi.Char>> username,
  ) {
    return _GA_get_watch_only_username(
      session,
      username,
    );
  }

  late final _GA_get_watch_only_usernamePtr =
      _lookup<ffi.NativeFunction<NativeGA_get_watch_only_username>>(
          'GA_get_watch_only_username');
  late final _GA_get_watch_only_username = _GA_get_watch_only_usernamePtr
      .asFunction<DartGA_get_watch_only_username>();

  /// Remove and delete the server history of a wallet.
  ///
  /// :param session: The session to use.
  /// :param call: Destination for the resulting GA_auth_handler to perform the removal.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// For multisig Green sessions, removing a wallet removes all history and
  /// data associated with the wallet on the server. This operation cannot be
  /// undone, and re-registering the wallet will not bring back the wallet's
  /// history. For this reason, only empty wallets can be deleted.
  ///
  /// For singlesig sessions, removing a wallet removes the locally persisted cache.
  /// The actual removal will happen after `GA_destroy_session` is called.
  int GA_remove_account(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_remove_account(
      session,
      call,
    );
  }

  late final _GA_remove_accountPtr =
      _lookup<ffi.NativeFunction<NativeGA_remove_account>>('GA_remove_account');
  late final _GA_remove_account =
      _GA_remove_accountPtr.asFunction<DartGA_remove_account>();

  /// Create a subaccount.
  ///
  /// :param session: The session to use.
  /// :param details: The subaccount ``"name"`` (which must not be already used in
  /// |     the wallet) and ``"type"`` (either ``"2of2"``, ``"2of2_no_recovery"`` or ``"2of3"``) must be
  /// |     populated. Type ``"2of2_no_recovery"`` is available only for Liquid networks and
  /// |     always requires both keys for spending. For type ``"2of3"`` the caller may provide
  /// |     either ``"recovery_mnemonic"`` or ``"recovery_xpub"`` if they do not wish to have a
  /// |     mnemonic passphrase generated automatically.
  /// |     All other fields are ignored.
  /// :param call: Destination for the resulting GA_auth_handler to perform the creation.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  /// |     Details of the created subaccount are returned in the ``"result"`` element of
  /// |     the GA_auth_handler. For 2of3 subaccounts the field ``"recovery_xpub"`` will
  /// |     be populated, and ``"recovery_mnemonic"`` will contain the recovery mnemonic
  /// |     passphrase if one was generated. These values must be stored safely by the
  /// |     caller as they will not be returned again by any call such as `GA_get_subaccounts`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  int GA_create_subaccount(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_create_subaccount(
      session,
      details,
      call,
    );
  }

  late final _GA_create_subaccountPtr =
      _lookup<ffi.NativeFunction<NativeGA_create_subaccount>>(
          'GA_create_subaccount');
  late final _GA_create_subaccount =
      _GA_create_subaccountPtr.asFunction<DartGA_create_subaccount>();

  /// Get the user's subaccount details.
  ///
  /// :param session: The session to use.
  /// :param details: the :ref:`get-subaccounts-params-data` controlling the request.
  /// :param call: Destination for the resulting GA_auth_handler to perform the creation.
  /// |     The call handlers result is :ref:`subaccount-list`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  int GA_get_subaccounts(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_get_subaccounts(
      session,
      details,
      call,
    );
  }

  late final _GA_get_subaccountsPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_subaccounts>>(
          'GA_get_subaccounts');
  late final _GA_get_subaccounts =
      _GA_get_subaccountsPtr.asFunction<DartGA_get_subaccounts>();

  /// Get subaccount details.
  ///
  /// :param session: The session to use.
  /// :param subaccount: The value of ``"pointer"`` from :ref:`subaccount-list` for the subaccount.
  /// :param call: Destination for the resulting GA_auth_handler to perform the creation.
  /// |     The call handlers result is :ref:`subaccount-detail`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  int GA_get_subaccount(
    ffi.Pointer<GA_session> session,
    int subaccount,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_get_subaccount(
      session,
      subaccount,
      call,
    );
  }

  late final _GA_get_subaccountPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_subaccount>>('GA_get_subaccount');
  late final _GA_get_subaccount =
      _GA_get_subaccountPtr.asFunction<DartGA_get_subaccount>();

  /// Update subaccount information.
  ///
  /// :param session: The session to use.
  /// :param details: :ref:`subaccount-update` giving the details to update.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes
  int GA_update_subaccount(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_update_subaccount(
      session,
      details,
      call,
    );
  }

  late final _GA_update_subaccountPtr =
      _lookup<ffi.NativeFunction<NativeGA_update_subaccount>>(
          'GA_update_subaccount');
  late final _GA_update_subaccount =
      _GA_update_subaccountPtr.asFunction<DartGA_update_subaccount>();

  /// Get a page of the user's transaction history.
  ///
  /// :param session: The session to use.
  /// :param details: :ref:`transactions-details` giving the details to get the transactions for.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  ///
  /// .. note:: Transactions are returned as :ref:`tx-list` from newest to oldest with up to 30 transactions per page.
  int GA_get_transactions(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_get_transactions(
      session,
      details,
      call,
    );
  }

  late final _GA_get_transactionsPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_transactions>>(
          'GA_get_transactions');
  late final _GA_get_transactions =
      _GA_get_transactionsPtr.asFunction<DartGA_get_transactions>();

  /// Get a new address to receive coins to.
  ///
  /// :param session: The session to use.
  /// :param details: :ref:`receive-address-request`.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     The call handlers result is :ref:`receive-address-details`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  int GA_get_receive_address(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_get_receive_address(
      session,
      details,
      call,
    );
  }

  late final _GA_get_receive_addressPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_receive_address>>(
          'GA_get_receive_address');
  late final _GA_get_receive_address =
      _GA_get_receive_addressPtr.asFunction<DartGA_get_receive_address>();

  /// Get a page of addresses previously generated for a subaccount.
  ///
  /// :param session: The session to use.
  /// :param details: :ref:`previous-addresses-request` detailing the previous addresses to fetch.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     The call handlers result is :ref:`previous-addresses`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  ///
  /// .. note:: Iteration of all addresses is complete when 'last_pointer' is not
  /// |     present in the results.
  int GA_get_previous_addresses(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_get_previous_addresses(
      session,
      details,
      call,
    );
  }

  late final _GA_get_previous_addressesPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_previous_addresses>>(
          'GA_get_previous_addresses');
  late final _GA_get_previous_addresses =
      _GA_get_previous_addressesPtr.asFunction<DartGA_get_previous_addresses>();

  /// Get the user's unspent transaction outputs.
  ///
  /// :param session: The session to use.
  /// :param details: :ref:`unspent-outputs-request` detailing the unspent transaction outputs to fetch.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     The call handlers result is :ref:`unspent-outputs`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  int GA_get_unspent_outputs(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_get_unspent_outputs(
      session,
      details,
      call,
    );
  }

  late final _GA_get_unspent_outputsPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_unspent_outputs>>(
          'GA_get_unspent_outputs');
  late final _GA_get_unspent_outputs =
      _GA_get_unspent_outputsPtr.asFunction<DartGA_get_unspent_outputs>();

  /// Get the unspent transaction outputs associated with a non-wallet private key.
  ///
  /// :param session: The session to use.
  /// :param details: :ref:`unspent-outputs-private-request` detailing the private key to check.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     The call handlers result is :ref:`unspent-outputs`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: Neither the private key or its derived public key are sent to any third party for this call.
  int GA_get_unspent_outputs_for_private_key(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_get_unspent_outputs_for_private_key(
      session,
      details,
      call,
    );
  }

  late final _GA_get_unspent_outputs_for_private_keyPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_unspent_outputs_for_private_key>>(
          'GA_get_unspent_outputs_for_private_key');
  late final _GA_get_unspent_outputs_for_private_key =
      _GA_get_unspent_outputs_for_private_keyPtr.asFunction<
          DartGA_get_unspent_outputs_for_private_key>();

  /// Change the status of a user's unspent transaction outputs.
  ///
  /// :param session: The session to use.
  /// :param details: :ref:`unspent-outputs-status` detailing the unspent transaction outputs status to set.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  int GA_set_unspent_outputs_status(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_set_unspent_outputs_status(
      session,
      details,
      call,
    );
  }

  late final _GA_set_unspent_outputs_statusPtr =
      _lookup<ffi.NativeFunction<NativeGA_set_unspent_outputs_status>>(
          'GA_set_unspent_outputs_status');
  late final _GA_set_unspent_outputs_status = _GA_set_unspent_outputs_statusPtr
      .asFunction<DartGA_set_unspent_outputs_status>();

  /// Get a transaction's details.
  ///
  /// :param session: The session to use.
  /// :param txhash_hex: The transaction hash of the transaction to fetch.
  /// :param transaction: Destination for the :ref:`external-tx-detail`.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  int GA_get_transaction_details(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> txhash_hex,
    ffi.Pointer<ffi.Pointer<GA_json>> transaction,
  ) {
    return _GA_get_transaction_details(
      session,
      txhash_hex,
      transaction,
    );
  }

  late final _GA_get_transaction_detailsPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_transaction_details>>(
          'GA_get_transaction_details');
  late final _GA_get_transaction_details = _GA_get_transaction_detailsPtr
      .asFunction<DartGA_get_transaction_details>();

  /// Get the sum of unspent outputs paying to a subaccount.
  ///
  /// :param session: The session to use.
  /// :param details: :ref:`unspent-outputs-request` detailing the unspent transaction outputs to
  /// |    compute the balance from.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  int GA_get_balance(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_get_balance(
      session,
      details,
      call,
    );
  }

  late final _GA_get_balancePtr =
      _lookup<ffi.NativeFunction<NativeGA_get_balance>>('GA_get_balance');
  late final _GA_get_balance =
      _GA_get_balancePtr.asFunction<DartGA_get_balance>();

  /// Get the list of allowed currencies for all available pricing sources.
  ///
  /// :param session: The session to use.
  /// :param currencies: The returned list of :ref:`currencies`.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  int GA_get_available_currencies(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_json>> currencies,
  ) {
    return _GA_get_available_currencies(
      session,
      currencies,
    );
  }

  late final _GA_get_available_currenciesPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_available_currencies>>(
          'GA_get_available_currencies');
  late final _GA_get_available_currencies = _GA_get_available_currenciesPtr
      .asFunction<DartGA_get_available_currencies>();

  /// Convert Fiat to BTC and vice-versa.
  ///
  /// :param session: The session to use.
  /// :param value_details: :ref:`convert-amount` giving the value to convert.
  /// :param output: Destination for the converted values :ref:`amount-data`.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  int GA_convert_amount(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> value_details,
    ffi.Pointer<ffi.Pointer<GA_json>> output,
  ) {
    return _GA_convert_amount(
      session,
      value_details,
      output,
    );
  }

  late final _GA_convert_amountPtr =
      _lookup<ffi.NativeFunction<NativeGA_convert_amount>>('GA_convert_amount');
  late final _GA_convert_amount =
      _GA_convert_amountPtr.asFunction<DartGA_convert_amount>();

  /// Encrypt JSON with a server provided key protected by a PIN.
  ///
  /// :param session: The session to use.
  /// :param details: The :ref:`encrypt-with-pin-details` to encrypt.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     The call handlers result is :ref:`encrypt-with-pin-result` which the caller should persist.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  int GA_encrypt_with_pin(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_encrypt_with_pin(
      session,
      details,
      call,
    );
  }

  late final _GA_encrypt_with_pinPtr =
      _lookup<ffi.NativeFunction<NativeGA_encrypt_with_pin>>(
          'GA_encrypt_with_pin');
  late final _GA_encrypt_with_pin =
      _GA_encrypt_with_pinPtr.asFunction<DartGA_encrypt_with_pin>();

  /// Decrypt JSON with a server provided key protected by a PIN.
  ///
  /// :param session: The session to use.
  /// :param details: The :ref:`decrypt-with-pin-details` to decrypt.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     The call handlers result is the decrypted JSON.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  int GA_decrypt_with_pin(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_decrypt_with_pin(
      session,
      details,
      call,
    );
  }

  late final _GA_decrypt_with_pinPtr =
      _lookup<ffi.NativeFunction<NativeGA_decrypt_with_pin>>(
          'GA_decrypt_with_pin');
  late final _GA_decrypt_with_pin =
      _GA_decrypt_with_pinPtr.asFunction<DartGA_decrypt_with_pin>();

  /// Disable all PIN logins previously set.
  ///
  /// After calling this method, the user will not be able to login with PIN
  /// | from any device that was previously enabled using `GA_encrypt_with_pin`.
  ///
  /// :param session: The session to use.
  int GA_disable_all_pin_logins(
    ffi.Pointer<GA_session> session,
  ) {
    return _GA_disable_all_pin_logins(
      session,
    );
  }

  late final _GA_disable_all_pin_loginsPtr =
      _lookup<ffi.NativeFunction<NativeGA_disable_all_pin_logins>>(
          'GA_disable_all_pin_logins');
  late final _GA_disable_all_pin_logins =
      _GA_disable_all_pin_loginsPtr.asFunction<DartGA_disable_all_pin_logins>();

  /// Construct a transaction.
  ///
  /// :param session: The session to use.
  /// :param transaction_details: The :ref:`create-tx-details` for constructing.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``transaction_details`` will be emptied when the call completes.
  int GA_create_transaction(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_create_transaction(
      session,
      transaction_details,
      call,
    );
  }

  late final _GA_create_transactionPtr =
      _lookup<ffi.NativeFunction<NativeGA_create_transaction>>(
          'GA_create_transaction');
  late final _GA_create_transaction =
      _GA_create_transactionPtr.asFunction<DartGA_create_transaction>();

  /// Blind a transaction.
  ///
  /// :param session: The session to use.
  /// :param transaction_details: The :ref:`create-tx-details` for blinding.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``transaction_details`` will be emptied when the call completes.
  int GA_blind_transaction(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_blind_transaction(
      session,
      transaction_details,
      call,
    );
  }

  late final _GA_blind_transactionPtr =
      _lookup<ffi.NativeFunction<NativeGA_blind_transaction>>(
          'GA_blind_transaction');
  late final _GA_blind_transaction =
      _GA_blind_transactionPtr.asFunction<DartGA_blind_transaction>();

  /// Sign the user's inputs to a transaction.
  ///
  /// :param session: The session to use.
  /// :param transaction_details: The :ref:`sign-tx-details` for signing, as previously
  /// |     returned from `GA_create_transaction` or (for Liquid) `GA_blind_transaction`.
  /// :param call: Destination for the resulting GA_auth_handler to perform the signing.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``transaction_details`` will be emptied when the call completes.
  int GA_sign_transaction(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_sign_transaction(
      session,
      transaction_details,
      call,
    );
  }

  late final _GA_sign_transactionPtr =
      _lookup<ffi.NativeFunction<NativeGA_sign_transaction>>(
          'GA_sign_transaction');
  late final _GA_sign_transaction =
      _GA_sign_transactionPtr.asFunction<DartGA_sign_transaction>();

  /// Construct the initiators side of a swap transaction.
  ///
  /// :param session: The session to use.
  /// :param swap_details: The :ref:`create-swap-tx-details` for constructing.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     The call handlers result is :ref:`create-swap-tx-result`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  int GA_create_swap_transaction(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> swap_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_create_swap_transaction(
      session,
      swap_details,
      call,
    );
  }

  late final _GA_create_swap_transactionPtr =
      _lookup<ffi.NativeFunction<NativeGA_create_swap_transaction>>(
          'GA_create_swap_transaction');
  late final _GA_create_swap_transaction = _GA_create_swap_transactionPtr
      .asFunction<DartGA_create_swap_transaction>();

  /// Complete construction of the callers side of a swap transaction.
  ///
  /// :param session: The session to use.
  /// :param swap_details: The :ref:`complete-swap-tx-details` for completing.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     The call handlers result is :ref:`complete-swap-tx-result`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  int GA_complete_swap_transaction(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> swap_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_complete_swap_transaction(
      session,
      swap_details,
      call,
    );
  }

  late final _GA_complete_swap_transactionPtr =
      _lookup<ffi.NativeFunction<NativeGA_complete_swap_transaction>>(
          'GA_complete_swap_transaction');
  late final _GA_complete_swap_transaction = _GA_complete_swap_transactionPtr
      .asFunction<DartGA_complete_swap_transaction>();

  /// Sign one or more of a user's inputs in a PSBT or PSET.
  ///
  /// :param session: The session to use.
  /// :param details: The :ref:`sign-psbt-details` for signing.
  /// :param call: Destination for the resulting GA_auth_handler to perform the signing.
  /// |     The call handlers result is :ref:`sign-psbt-result`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  ///
  /// .. note:: EXPERIMENTAL warning: this call may be changed in future releases.
  int GA_psbt_sign(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_psbt_sign(
      session,
      details,
      call,
    );
  }

  late final _GA_psbt_signPtr =
      _lookup<ffi.NativeFunction<NativeGA_psbt_sign>>('GA_psbt_sign');
  late final _GA_psbt_sign = _GA_psbt_signPtr.asFunction<DartGA_psbt_sign>();

  /// Get wallet details of a PSBT or PSET.
  ///
  /// :param session: The session to use.
  /// :param details: The :ref:`psbt-wallet-details` for getting the wallet details.
  /// :param call: Destination for the resulting GA_auth_handler to get the wallet details.
  /// |     The call handlers result is :ref:`psbt-get-details-result`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  ///
  /// .. note:: EXPERIMENTAL warning: this call may be changed in future releases.
  int GA_psbt_get_details(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_psbt_get_details(
      session,
      details,
      call,
    );
  }

  late final _GA_psbt_get_detailsPtr =
      _lookup<ffi.NativeFunction<NativeGA_psbt_get_details>>(
          'GA_psbt_get_details');
  late final _GA_psbt_get_details =
      _GA_psbt_get_detailsPtr.asFunction<DartGA_psbt_get_details>();

  /// Broadcast a fully signed transaction to the P2P network.
  ///
  /// :param session: The session to use.
  /// :param transaction_hex: The signed transaction in hex to broadcast.
  /// :param tx_hash: Destination for the resulting transactions hash.
  /// |     Returned string should be freed using `GA_destroy_string`.
  int GA_broadcast_transaction(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> transaction_hex,
    ffi.Pointer<ffi.Pointer<ffi.Char>> tx_hash,
  ) {
    return _GA_broadcast_transaction(
      session,
      transaction_hex,
      tx_hash,
    );
  }

  late final _GA_broadcast_transactionPtr =
      _lookup<ffi.NativeFunction<NativeGA_broadcast_transaction>>(
          'GA_broadcast_transaction');
  late final _GA_broadcast_transaction =
      _GA_broadcast_transactionPtr.asFunction<DartGA_broadcast_transaction>();

  /// Send a transaction created by GA_create_transaction and signed by GA_sign_transaction.
  ///
  /// :param session: The session to use.
  /// :param transaction_details: The :ref:`send-tx-details` for sending.
  /// :param call: Destination for the resulting GA_auth_handler to perform the send.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``transaction_details`` will be emptied when the call completes.
  int GA_send_transaction(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_send_transaction(
      session,
      transaction_details,
      call,
    );
  }

  late final _GA_send_transactionPtr =
      _lookup<ffi.NativeFunction<NativeGA_send_transaction>>(
          'GA_send_transaction');
  late final _GA_send_transaction =
      _GA_send_transactionPtr.asFunction<DartGA_send_transaction>();

  /// Sign a message with the private key of an address.
  ///
  /// :param session: The session to use.
  /// :param details: The :ref:`sign-message-request` detailing the message to sign and how to sign it.
  /// :param call: Destination for the resulting GA_auth_handler to perform the signing.
  /// |     The call handlers result is :ref:`sign-message-result`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  int GA_sign_message(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_sign_message(
      session,
      details,
      call,
    );
  }

  late final _GA_sign_messagePtr =
      _lookup<ffi.NativeFunction<NativeGA_sign_message>>('GA_sign_message');
  late final _GA_sign_message =
      _GA_sign_messagePtr.asFunction<DartGA_sign_message>();

  /// Request an email containing the user's nLockTime transactions.
  ///
  /// :param session: The session to use.
  int GA_send_nlocktimes(
    ffi.Pointer<GA_session> session,
  ) {
    return _GA_send_nlocktimes(
      session,
    );
  }

  late final _GA_send_nlocktimesPtr =
      _lookup<ffi.NativeFunction<NativeGA_send_nlocktimes>>(
          'GA_send_nlocktimes');
  late final _GA_send_nlocktimes =
      _GA_send_nlocktimesPtr.asFunction<DartGA_send_nlocktimes>();

  /// Set the number of blocks after which CSV transactions become spendable without two factor authentication.
  ///
  /// :param session: The session to use.
  /// :param locktime_details: The :ref:`set-locktime-details` for setting the block value.
  /// :param call: Destination for the resulting GA_auth_handler to change the locktime.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``locktime_details`` will be emptied when the call completes.
  int GA_set_csvtime(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> locktime_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_set_csvtime(
      session,
      locktime_details,
      call,
    );
  }

  late final _GA_set_csvtimePtr =
      _lookup<ffi.NativeFunction<NativeGA_set_csvtime>>('GA_set_csvtime');
  late final _GA_set_csvtime =
      _GA_set_csvtimePtr.asFunction<DartGA_set_csvtime>();

  /// Set the number of blocks after which nLockTime transactions become
  /// |    spendable without two factor authentication. When this call
  /// |    succeeds, if the user has an email address associated with the
  /// |    wallet, an updated nlocktimes.zip file will be sent via email.
  ///
  /// :param session: The session to use.
  /// :param locktime_details: The :ref:`set-locktime-details` for setting the block value.
  /// :param call: Destination for the resulting GA_auth_handler to change the locktime.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  int GA_set_nlocktime(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> locktime_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_set_nlocktime(
      session,
      locktime_details,
      call,
    );
  }

  late final _GA_set_nlocktimePtr =
      _lookup<ffi.NativeFunction<NativeGA_set_nlocktime>>('GA_set_nlocktime');
  late final _GA_set_nlocktime =
      _GA_set_nlocktimePtr.asFunction<DartGA_set_nlocktime>();

  /// Add a transaction memo to a user's GreenAddress transaction.
  ///
  /// :param session: The session to use.
  /// :param txhash_hex: The transaction hash to associate the memo with.
  /// :param memo: The memo to set.
  /// :param memo_type: Unused, pass 0.
  int GA_set_transaction_memo(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> txhash_hex,
    ffi.Pointer<ffi.Char> memo,
    int memo_type,
  ) {
    return _GA_set_transaction_memo(
      session,
      txhash_hex,
      memo,
      memo_type,
    );
  }

  late final _GA_set_transaction_memoPtr =
      _lookup<ffi.NativeFunction<NativeGA_set_transaction_memo>>(
          'GA_set_transaction_memo');
  late final _GA_set_transaction_memo =
      _GA_set_transaction_memoPtr.asFunction<DartGA_set_transaction_memo>();

  /// Get the current network's fee estimates.
  ///
  /// :param session: The session to use.
  /// :param estimates: Destination for the returned :ref:`estimates`.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  ///
  /// The estimates are returned as an array of 25 elements. Each element is
  /// an integer representing the fee estimate expressed as satoshi per 1000
  /// bytes. The first element is the minimum relay fee as returned by the
  /// network, while the remaining elements are the current estimates to use
  /// for a transaction to confirm from 1 to 24 blocks.
  int GA_get_fee_estimates(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_json>> estimates,
  ) {
    return _GA_get_fee_estimates(
      session,
      estimates,
    );
  }

  late final _GA_get_fee_estimatesPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_fee_estimates>>(
          'GA_get_fee_estimates');
  late final _GA_get_fee_estimates =
      _GA_get_fee_estimatesPtr.asFunction<DartGA_get_fee_estimates>();

  /// Get the user's credentials.
  ///
  /// :param session: The session to use.
  /// :param details: The :ref:`get-credentials-details` to get the credentials.
  /// :param call: Destination for the resulting GA_auth_handler to get the user's credentials.
  /// |     The call handlers result is :ref:`login-credentials`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  int GA_get_credentials(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_get_credentials(
      session,
      details,
      call,
    );
  }

  late final _GA_get_credentialsPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_credentials>>(
          'GA_get_credentials');
  late final _GA_get_credentials =
      _GA_get_credentialsPtr.asFunction<DartGA_get_credentials>();

  /// Get the latest un-acknowledged system message.
  ///
  /// :param session: The session to use.
  /// :param message_text: The returned UTF-8 encoded message text.
  /// |     Returned string should be freed using `GA_destroy_string`.
  ///
  /// .. note:: If all current messages are acknowledged, an empty string is returned.
  int GA_get_system_message(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<ffi.Char>> message_text,
  ) {
    return _GA_get_system_message(
      session,
      message_text,
    );
  }

  late final _GA_get_system_messagePtr =
      _lookup<ffi.NativeFunction<NativeGA_get_system_message>>(
          'GA_get_system_message');
  late final _GA_get_system_message =
      _GA_get_system_messagePtr.asFunction<DartGA_get_system_message>();

  /// Sign and acknowledge a system message.
  ///
  /// The message text will be signed with a key derived from the wallet master key and the signature
  /// sent to the server.
  ///
  /// :param session: The session to use.
  /// :param message_text: UTF-8 encoded message text being acknowledged.
  /// :param call: Destination for the resulting GA_auth_handler to acknowledge the message.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  int GA_ack_system_message(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> message_text,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_ack_system_message(
      session,
      message_text,
      call,
    );
  }

  late final _GA_ack_system_messagePtr =
      _lookup<ffi.NativeFunction<NativeGA_ack_system_message>>(
          'GA_ack_system_message');
  late final _GA_ack_system_message =
      _GA_ack_system_messagePtr.asFunction<DartGA_ack_system_message>();

  /// Get the two factor configuration for the current user.
  ///
  /// :param session: The session to use.
  /// :param config: Destination for the returned :ref:`twofactor_configuration`.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  int GA_get_twofactor_config(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_json>> config,
  ) {
    return _GA_get_twofactor_config(
      session,
      config,
    );
  }

  late final _GA_get_twofactor_configPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_twofactor_config>>(
          'GA_get_twofactor_config');
  late final _GA_get_twofactor_config =
      _GA_get_twofactor_configPtr.asFunction<DartGA_get_twofactor_config>();

  /// Change wallet settings.
  ///
  /// :param session: The session to use.
  /// :param settings: The new :ref:`settings` values.
  /// :param call: Destination for the resulting GA_auth_handler.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``settings`` will be emptied when the call completes.
  int GA_change_settings(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> settings,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_change_settings(
      session,
      settings,
      call,
    );
  }

  late final _GA_change_settingsPtr =
      _lookup<ffi.NativeFunction<NativeGA_change_settings>>(
          'GA_change_settings');
  late final _GA_change_settings =
      _GA_change_settingsPtr.asFunction<DartGA_change_settings>();

  /// Get current wallet settings.
  ///
  /// :param session: The session to use.
  /// :param settings: Destination for the current :ref:`settings`.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  int GA_get_settings(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_json>> settings,
  ) {
    return _GA_get_settings(
      session,
      settings,
    );
  }

  late final _GA_get_settingsPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_settings>>('GA_get_settings');
  late final _GA_get_settings =
      _GA_get_settingsPtr.asFunction<DartGA_get_settings>();

  int GA_convert_json_to_string(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Pointer<ffi.Char>> output,
  ) {
    return _GA_convert_json_to_string(
      json,
      output,
    );
  }

  late final _GA_convert_json_to_stringPtr =
      _lookup<ffi.NativeFunction<NativeGA_convert_json_to_string>>(
          'GA_convert_json_to_string');
  late final _GA_convert_json_to_string =
      _GA_convert_json_to_stringPtr.asFunction<DartGA_convert_json_to_string>();

  int GA_convert_string_to_json(
    ffi.Pointer<ffi.Char> input,
    ffi.Pointer<ffi.Pointer<GA_json>> output,
  ) {
    return _GA_convert_string_to_json(
      input,
      output,
    );
  }

  late final _GA_convert_string_to_jsonPtr =
      _lookup<ffi.NativeFunction<NativeGA_convert_string_to_json>>(
          'GA_convert_string_to_json');
  late final _GA_convert_string_to_json =
      _GA_convert_string_to_jsonPtr.asFunction<DartGA_convert_string_to_json>();

  int GA_convert_json_value_to_string(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> output,
  ) {
    return _GA_convert_json_value_to_string(
      json,
      path,
      output,
    );
  }

  late final _GA_convert_json_value_to_stringPtr =
      _lookup<ffi.NativeFunction<NativeGA_convert_json_value_to_string>>(
          'GA_convert_json_value_to_string');
  late final _GA_convert_json_value_to_string =
      _GA_convert_json_value_to_stringPtr.asFunction<
          DartGA_convert_json_value_to_string>();

  int GA_convert_json_value_to_uint32(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Uint32> output,
  ) {
    return _GA_convert_json_value_to_uint32(
      json,
      path,
      output,
    );
  }

  late final _GA_convert_json_value_to_uint32Ptr =
      _lookup<ffi.NativeFunction<NativeGA_convert_json_value_to_uint32>>(
          'GA_convert_json_value_to_uint32');
  late final _GA_convert_json_value_to_uint32 =
      _GA_convert_json_value_to_uint32Ptr.asFunction<
          DartGA_convert_json_value_to_uint32>();

  int GA_convert_json_value_to_uint64(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Uint64> output,
  ) {
    return _GA_convert_json_value_to_uint64(
      json,
      path,
      output,
    );
  }

  late final _GA_convert_json_value_to_uint64Ptr =
      _lookup<ffi.NativeFunction<NativeGA_convert_json_value_to_uint64>>(
          'GA_convert_json_value_to_uint64');
  late final _GA_convert_json_value_to_uint64 =
      _GA_convert_json_value_to_uint64Ptr.asFunction<
          DartGA_convert_json_value_to_uint64>();

  int GA_convert_json_value_to_bool(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Uint32> output,
  ) {
    return _GA_convert_json_value_to_bool(
      json,
      path,
      output,
    );
  }

  late final _GA_convert_json_value_to_boolPtr =
      _lookup<ffi.NativeFunction<NativeGA_convert_json_value_to_bool>>(
          'GA_convert_json_value_to_bool');
  late final _GA_convert_json_value_to_bool = _GA_convert_json_value_to_boolPtr
      .asFunction<DartGA_convert_json_value_to_bool>();

  int GA_convert_json_value_to_json(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Pointer<GA_json>> output,
  ) {
    return _GA_convert_json_value_to_json(
      json,
      path,
      output,
    );
  }

  late final _GA_convert_json_value_to_jsonPtr =
      _lookup<ffi.NativeFunction<NativeGA_convert_json_value_to_json>>(
          'GA_convert_json_value_to_json');
  late final _GA_convert_json_value_to_json = _GA_convert_json_value_to_jsonPtr
      .asFunction<DartGA_convert_json_value_to_json>();

  /// Free a GA_json object.
  ///
  /// :param json: GA_json object to free.
  int GA_destroy_json(
    ffi.Pointer<GA_json> json,
  ) {
    return _GA_destroy_json(
      json,
    );
  }

  late final _GA_destroy_jsonPtr =
      _lookup<ffi.NativeFunction<NativeGA_destroy_json>>('GA_destroy_json');
  late final _GA_destroy_json =
      _GA_destroy_jsonPtr.asFunction<DartGA_destroy_json>();

  /// Get the status/result of an action requiring authorization.
  ///
  /// :param call: The auth_handler whose status is to be queried.
  /// :param output: Destination for the resulting :ref:`auth-handler-status`.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  ///
  /// Methods in the api that may require two factor or hardware authentication
  /// to complete return a GA_auth_handler object. This object encapsulates the
  /// process of determining whether authentication is required and handling
  /// conditions such as re-prompting and re-trying after an incorrect two
  /// factor code is entered.
  ///
  /// The object acts as a state machine which is stepped through by the caller
  /// until the desired action is completed. At each step, the current state can
  /// be determined and used to perform the next action required.
  ///
  /// Some actions require a sequence of codes and decisions; these are hidden
  /// behind the state machine interface so that callers do not need to handle
  /// special cases or program their own logic to handle any lower level API
  /// differences.
  ///
  /// The state machine has the following states, which are returned in the
  /// ``"status"`` element from `GA_auth_handler_get_status`:
  ///
  /// * ``"done"``: The action has been completed successfully. Any data returned
  /// |  from the action is present in the ``"result"`` element of the status JSON.
  /// | The auth_handler object should be destroyed using `GA_destroy_auth_handler`
  /// | after receiving this status.
  ///
  /// * ``"error"``: A non-recoverable error occurred performing the action. The
  /// | associated error message is given in the status element ``"error"``. The
  /// | auth_handler object should be destroyed using `GA_destroy_auth_handler` and
  /// | the action restarted from scratch if this state is returned.
  ///
  /// * ``"request_code"``: Two factor authorization is required. The caller should
  /// | prompt the user to choose a two factor method from the ``"methods"`` element
  /// | and call `GA_auth_handler_request_code` with the selected method.
  ///
  /// * ``"resolve_code"``: A twofactor code from the ``"request_code"`` step, or
  /// | data from a hardware device is required. If the status JSON contains
  /// | :ref:`hw-required-data`, then see :ref:`hw-resolve-overview` for details.
  /// | Otherwise, to resolve a twofactor code, the caller should prompt the user
  /// | to enter the code from the twofactor method chosen in the ``"request_code"``
  /// | step, and pass this code to `GA_auth_handler_resolve_code`.
  ///
  /// * ``"call"``: Twofactor or hardware authorization is complete and the caller
  /// | should call `GA_auth_handler_call` to perform the action.
  int GA_auth_handler_get_status(
    ffi.Pointer<GA_auth_handler> call,
    ffi.Pointer<ffi.Pointer<GA_json>> output,
  ) {
    return _GA_auth_handler_get_status(
      call,
      output,
    );
  }

  late final _GA_auth_handler_get_statusPtr =
      _lookup<ffi.NativeFunction<NativeGA_auth_handler_get_status>>(
          'GA_auth_handler_get_status');
  late final _GA_auth_handler_get_status = _GA_auth_handler_get_statusPtr
      .asFunction<DartGA_auth_handler_get_status>();

  /// Request a two factor authentication code to authorize an action.
  ///
  /// :param call: The auth_handler representing the action to perform.
  /// :param method: The selected two factor method to use
  int GA_auth_handler_request_code(
    ffi.Pointer<GA_auth_handler> call,
    ffi.Pointer<ffi.Char> method,
  ) {
    return _GA_auth_handler_request_code(
      call,
      method,
    );
  }

  late final _GA_auth_handler_request_codePtr =
      _lookup<ffi.NativeFunction<NativeGA_auth_handler_request_code>>(
          'GA_auth_handler_request_code');
  late final _GA_auth_handler_request_code = _GA_auth_handler_request_codePtr
      .asFunction<DartGA_auth_handler_request_code>();

  /// Authorize an action by providing its previously requested two factor authentication code.
  ///
  /// :param call: The auth_handler representing the action to perform.
  /// :param code: The two factor authentication code received by the user, or
  /// |    the serialised JSON response for hardware interaction (see :ref:`hw-resolve-overview`).
  int GA_auth_handler_resolve_code(
    ffi.Pointer<GA_auth_handler> call,
    ffi.Pointer<ffi.Char> code,
  ) {
    return _GA_auth_handler_resolve_code(
      call,
      code,
    );
  }

  late final _GA_auth_handler_resolve_codePtr =
      _lookup<ffi.NativeFunction<NativeGA_auth_handler_resolve_code>>(
          'GA_auth_handler_resolve_code');
  late final _GA_auth_handler_resolve_code = _GA_auth_handler_resolve_codePtr
      .asFunction<DartGA_auth_handler_resolve_code>();

  /// Perform an action following the completion of authorization.
  ///
  /// :param call: The auth_handler representing the action to perform.
  int GA_auth_handler_call(
    ffi.Pointer<GA_auth_handler> call,
  ) {
    return _GA_auth_handler_call(
      call,
    );
  }

  late final _GA_auth_handler_callPtr =
      _lookup<ffi.NativeFunction<NativeGA_auth_handler_call>>(
          'GA_auth_handler_call');
  late final _GA_auth_handler_call =
      _GA_auth_handler_callPtr.asFunction<DartGA_auth_handler_call>();

  /// Free an auth_handler after use.
  ///
  /// :param call: The auth_handler to free.
  int GA_destroy_auth_handler(
    ffi.Pointer<GA_auth_handler> call,
  ) {
    return _GA_destroy_auth_handler(
      call,
    );
  }

  late final _GA_destroy_auth_handlerPtr =
      _lookup<ffi.NativeFunction<NativeGA_destroy_auth_handler>>(
          'GA_destroy_auth_handler');
  late final _GA_destroy_auth_handler =
      _GA_destroy_auth_handlerPtr.asFunction<DartGA_destroy_auth_handler>();

  /// Enable or disable a two factor authentication method.
  ///
  /// :param session: The session to use
  /// :param method: The two factor method to enable/disable, i.e. ``"email"``, ``"sms"``, ``"phone"``, ``"gauth"``
  /// :param twofactor_details: The two factor method and associated data such as an email address. :ref:`twofactor-detail`
  /// :param call: Destination for the resulting GA_auth_handler to perform the action
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``twofactor_details`` will be emptied when the call completes.
  int GA_change_settings_twofactor(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> method,
    ffi.Pointer<GA_json> twofactor_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_change_settings_twofactor(
      session,
      method,
      twofactor_details,
      call,
    );
  }

  late final _GA_change_settings_twofactorPtr =
      _lookup<ffi.NativeFunction<NativeGA_change_settings_twofactor>>(
          'GA_change_settings_twofactor');
  late final _GA_change_settings_twofactor = _GA_change_settings_twofactorPtr
      .asFunction<DartGA_change_settings_twofactor>();

  /// Request to begin the two factor authentication reset process.
  ///
  /// Returns the ``"twofactor_reset"`` portion of :ref:`twofactor_configuration` in
  /// the GA_auth_handler result.
  ///
  /// :param session: The session to use.
  /// :param email: The new email address to enable once the reset waiting period expires.
  /// :param is_dispute: GA_TRUE if the reset request is disputed, GA_FALSE otherwise.
  /// :param call: Destination for the resulting GA_auth_handler to request the reset.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  int GA_twofactor_reset(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> email,
    int is_dispute,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_twofactor_reset(
      session,
      email,
      is_dispute,
      call,
    );
  }

  late final _GA_twofactor_resetPtr =
      _lookup<ffi.NativeFunction<NativeGA_twofactor_reset>>(
          'GA_twofactor_reset');
  late final _GA_twofactor_reset =
      _GA_twofactor_resetPtr.asFunction<DartGA_twofactor_reset>();

  /// Undo a request to begin the two factor authentication reset process.
  ///
  /// Returns the ``"twofactor_reset"`` portion of :ref:`twofactor_configuration` in
  /// the GA_auth_handler result.
  ///
  /// :param session: The session to use.
  /// :param email: The email address to cancel the reset request for. Must be
  /// |     the email previously passed to `GA_twofactor_reset`.
  /// :param call: Destination for the resulting GA_auth_handler to request the reset.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: Unlike `GA_twofactor_cancel_reset`, this call only removes the reset
  /// |     request associated with the given email. If other emails have requested
  /// |     a reset, the wallet will still remain locked following this call.
  int GA_twofactor_undo_reset(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> email,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_twofactor_undo_reset(
      session,
      email,
      call,
    );
  }

  late final _GA_twofactor_undo_resetPtr =
      _lookup<ffi.NativeFunction<NativeGA_twofactor_undo_reset>>(
          'GA_twofactor_undo_reset');
  late final _GA_twofactor_undo_reset =
      _GA_twofactor_undo_resetPtr.asFunction<DartGA_twofactor_undo_reset>();

  /// Cancel all two factor reset requests and unlock the wallet for normal operation.
  ///
  /// This call requires authentication using an existing wallet twofactor method.
  ///
  /// Returns the ``"twofactor_reset"`` portion of :ref:`twofactor_configuration` in
  /// the GA_auth_handler result.
  ///
  /// :param session: The session to use.
  /// :param call: Destination for the resulting GA_auth_handler to cancel the reset.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  int GA_twofactor_cancel_reset(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_twofactor_cancel_reset(
      session,
      call,
    );
  }

  late final _GA_twofactor_cancel_resetPtr =
      _lookup<ffi.NativeFunction<NativeGA_twofactor_cancel_reset>>(
          'GA_twofactor_cancel_reset');
  late final _GA_twofactor_cancel_reset =
      _GA_twofactor_cancel_resetPtr.asFunction<DartGA_twofactor_cancel_reset>();

  /// Change twofactor limits settings.
  ///
  /// :param session: The session to use.
  /// :param limit_details: Details of the new :ref:`transaction-limits`
  /// :param call: Destination for the resulting GA_auth_handler to perform the change.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``limit_details`` will be emptied when the call completes.
  int GA_twofactor_change_limits(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> limit_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_twofactor_change_limits(
      session,
      limit_details,
      call,
    );
  }

  late final _GA_twofactor_change_limitsPtr =
      _lookup<ffi.NativeFunction<NativeGA_twofactor_change_limits>>(
          'GA_twofactor_change_limits');
  late final _GA_twofactor_change_limits = _GA_twofactor_change_limitsPtr
      .asFunction<DartGA_twofactor_change_limits>();

  /// Encode CBOR into (potentially multi-part) UR-encoding.
  ///
  /// :param session: The session to use.
  /// :param details: :ref:`bcur-encode` containing the CBOR data to encode.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     The call handlers result is :ref:`bcur-encoded`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  int GA_bcur_encode(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_bcur_encode(
      session,
      details,
      call,
    );
  }

  late final _GA_bcur_encodePtr =
      _lookup<ffi.NativeFunction<NativeGA_bcur_encode>>('GA_bcur_encode');
  late final _GA_bcur_encode =
      _GA_bcur_encodePtr.asFunction<DartGA_bcur_encode>();

  /// Decode (potentially multi-part) UR-encoded data to CBOR.
  ///
  /// :param session: The session to use.
  /// :param details: :ref:`bcur-decode` containing the the first URI to decode.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     The call handlers result is :ref:`bcur-decoded`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// For multi-part data, the call hander will request further parts using
  /// ``"request_code"`` with a method of ``"data"``. see: `auth-handler-status`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  int GA_bcur_decode(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_bcur_decode(
      session,
      details,
      call,
    );
  }

  late final _GA_bcur_decodePtr =
      _lookup<ffi.NativeFunction<NativeGA_bcur_decode>>('GA_bcur_decode');
  late final _GA_bcur_decode =
      _GA_bcur_decodePtr.asFunction<DartGA_bcur_decode>();

  /// Free a string returned by the api.
  ///
  /// :param str: The string to free.
  void GA_destroy_string(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _GA_destroy_string(
      str,
    );
  }

  late final _GA_destroy_stringPtr =
      _lookup<ffi.NativeFunction<NativeGA_destroy_string>>('GA_destroy_string');
  late final _GA_destroy_string =
      _GA_destroy_stringPtr.asFunction<DartGA_destroy_string>();

  /// Get up to 32 random bytes.
  ///
  /// Generate up to 32 random bytes using the same strategy as Bitcoin Core code.
  ///
  /// :param output_bytes: bytes output buffer
  /// :param siz: Number of bytes to return (max. 32)
  int GA_get_random_bytes(
    int num_bytes,
    ffi.Pointer<ffi.UnsignedChar> output_bytes,
    int len,
  ) {
    return _GA_get_random_bytes(
      num_bytes,
      output_bytes,
      len,
    );
  }

  late final _GA_get_random_bytesPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_random_bytes>>(
          'GA_get_random_bytes');
  late final _GA_get_random_bytes =
      _GA_get_random_bytesPtr.asFunction<DartGA_get_random_bytes>();

  /// Generate a new random BIP 39 mnemonic.
  ///
  /// :param output: The generated mnemonic phrase.
  /// |     Returned string should be freed using `GA_destroy_string`.
  int GA_generate_mnemonic(
    ffi.Pointer<ffi.Pointer<ffi.Char>> output,
  ) {
    return _GA_generate_mnemonic(
      output,
    );
  }

  late final _GA_generate_mnemonicPtr =
      _lookup<ffi.NativeFunction<NativeGA_generate_mnemonic>>(
          'GA_generate_mnemonic');
  late final _GA_generate_mnemonic =
      _GA_generate_mnemonicPtr.asFunction<DartGA_generate_mnemonic>();

  /// Generate a new random 12 word BIP 39 mnemonic.
  ///
  /// :param output: The generated mnemonic phrase.
  /// |     Returned string should be freed using `GA_destroy_string`.
  int GA_generate_mnemonic_12(
    ffi.Pointer<ffi.Pointer<ffi.Char>> output,
  ) {
    return _GA_generate_mnemonic_12(
      output,
    );
  }

  late final _GA_generate_mnemonic_12Ptr =
      _lookup<ffi.NativeFunction<NativeGA_generate_mnemonic_12>>(
          'GA_generate_mnemonic_12');
  late final _GA_generate_mnemonic_12 =
      _GA_generate_mnemonic_12Ptr.asFunction<DartGA_generate_mnemonic_12>();

  /// Validate a BIP 39 mnemonic.
  ///
  /// :param mnemonic: The mnemonic phrase
  /// :param valid: Destination for the result: GA_TRUE if the mnemonic is valid else GA_FALSE
  int GA_validate_mnemonic(
    ffi.Pointer<ffi.Char> mnemonic,
    ffi.Pointer<ffi.Uint32> valid,
  ) {
    return _GA_validate_mnemonic(
      mnemonic,
      valid,
    );
  }

  late final _GA_validate_mnemonicPtr =
      _lookup<ffi.NativeFunction<NativeGA_validate_mnemonic>>(
          'GA_validate_mnemonic');
  late final _GA_validate_mnemonic =
      _GA_validate_mnemonicPtr.asFunction<DartGA_validate_mnemonic>();

  /// Register a network configuration
  ///
  /// :param name: The name of the network to register
  /// :param network_details: The :ref:`network` configuration to register
  ///
  /// Any existing configuration with the same name is overwritten.
  /// If the provided JSON is empty, any existing configuration for
  /// the network is removed.
  int GA_register_network(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<GA_json> network_details,
  ) {
    return _GA_register_network(
      name,
      network_details,
    );
  }

  late final _GA_register_networkPtr =
      _lookup<ffi.NativeFunction<NativeGA_register_network>>(
          'GA_register_network');
  late final _GA_register_network =
      _GA_register_networkPtr.asFunction<DartGA_register_network>();

  /// Get the available network configurations
  ///
  /// :param output: Destination for the :ref:`networks-list`
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  int GA_get_networks(
    ffi.Pointer<ffi.Pointer<GA_json>> output,
  ) {
    return _GA_get_networks(
      output,
    );
  }

  late final _GA_get_networksPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_networks>>('GA_get_networks');
  late final _GA_get_networks =
      _GA_get_networksPtr.asFunction<DartGA_get_networks>();

  /// Get a uint32_t in the range 0 to (upper_bound - 1) without bias
  ///
  /// :param output: Destination for the generated uint32_t.
  int GA_get_uniform_uint32_t(
    int upper_bound,
    ffi.Pointer<ffi.Uint32> output,
  ) {
    return _GA_get_uniform_uint32_t(
      upper_bound,
      output,
    );
  }

  late final _GA_get_uniform_uint32_tPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_uniform_uint32_t>>(
          'GA_get_uniform_uint32_t');
  late final _GA_get_uniform_uint32_t =
      _GA_get_uniform_uint32_tPtr.asFunction<DartGA_get_uniform_uint32_t>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1,
  ) {
    return _signal(
      arg0,
      arg1,
    );
  }

  late final _signalPtr = _lookup<ffi.NativeFunction<NativeSignal>>('signal');
  late final _signal = _signalPtr.asFunction<DartSignal>();

  int getpriority(
    int arg0,
    int arg1,
  ) {
    return _getpriority(
      arg0,
      arg1,
    );
  }

  late final _getpriorityPtr =
      _lookup<ffi.NativeFunction<NativeGetpriority>>('getpriority');
  late final _getpriority = _getpriorityPtr.asFunction<DartGetpriority>();

  int getiopolicy_np(
    int arg0,
    int arg1,
  ) {
    return _getiopolicy_np(
      arg0,
      arg1,
    );
  }

  late final _getiopolicy_npPtr =
      _lookup<ffi.NativeFunction<NativeGetiopolicy_np>>('getiopolicy_np');
  late final _getiopolicy_np =
      _getiopolicy_npPtr.asFunction<DartGetiopolicy_np>();

  int getrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _getrlimit(
      arg0,
      arg1,
    );
  }

  late final _getrlimitPtr =
      _lookup<ffi.NativeFunction<NativeGetrlimit>>('getrlimit');
  late final _getrlimit = _getrlimitPtr.asFunction<DartGetrlimit>();

  int getrusage(
    int arg0,
    ffi.Pointer<rusage> arg1,
  ) {
    return _getrusage(
      arg0,
      arg1,
    );
  }

  late final _getrusagePtr =
      _lookup<ffi.NativeFunction<NativeGetrusage>>('getrusage');
  late final _getrusage = _getrusagePtr.asFunction<DartGetrusage>();

  int setpriority(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setpriority(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setpriorityPtr =
      _lookup<ffi.NativeFunction<NativeSetpriority>>('setpriority');
  late final _setpriority = _setpriorityPtr.asFunction<DartSetpriority>();

  int setiopolicy_np(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setiopolicy_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setiopolicy_npPtr =
      _lookup<ffi.NativeFunction<NativeSetiopolicy_np>>('setiopolicy_np');
  late final _setiopolicy_np =
      _setiopolicy_npPtr.asFunction<DartSetiopolicy_np>();

  int setrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _setrlimit(
      arg0,
      arg1,
    );
  }

  late final _setrlimitPtr =
      _lookup<ffi.NativeFunction<NativeSetrlimit>>('setrlimit');
  late final _setrlimit = _setrlimitPtr.asFunction<DartSetrlimit>();

  int wait1(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _wait1(
      arg0,
    );
  }

  late final _wait1Ptr = _lookup<ffi.NativeFunction<NativeWait>>('wait');
  late final _wait1 = _wait1Ptr.asFunction<DartWait>();

  int waitpid(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
    int arg2,
  ) {
    return _waitpid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _waitpidPtr =
      _lookup<ffi.NativeFunction<NativeWaitpid>>('waitpid');
  late final _waitpid = _waitpidPtr.asFunction<DartWaitpid>();

  int waitid(
    int arg0,
    int arg1,
    ffi.Pointer<siginfo_t> arg2,
    int arg3,
  ) {
    return _waitid(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _waitidPtr = _lookup<ffi.NativeFunction<NativeWaitid>>('waitid');
  late final _waitid = _waitidPtr.asFunction<DartWaitid>();

  int wait3(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
    ffi.Pointer<rusage> arg2,
  ) {
    return _wait3(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wait3Ptr = _lookup<ffi.NativeFunction<NativeWait3>>('wait3');
  late final _wait3 = _wait3Ptr.asFunction<DartWait3>();

  int wait4(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
    int arg2,
    ffi.Pointer<rusage> arg3,
  ) {
    return _wait4(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wait4Ptr = _lookup<ffi.NativeFunction<NativeWait4>>('wait4');
  late final _wait4 = _wait4Ptr.asFunction<DartWait4>();

  ffi.Pointer<ffi.Void> alloca(
    int arg0,
  ) {
    return _alloca(
      arg0,
    );
  }

  late final _allocaPtr = _lookup<ffi.NativeFunction<NativeAlloca>>('alloca');
  late final _alloca = _allocaPtr.asFunction<DartAlloca>();

  late final ffi.Pointer<ffi.Int> ___mb_cur_max =
      _lookup<ffi.Int>('__mb_cur_max');

  int get __mb_cur_max => ___mb_cur_max.value;

  set __mb_cur_max(int value) => ___mb_cur_max.value = value;

  ffi.Pointer<ffi.Void> malloc_type_malloc(
    int size,
    int type_id,
  ) {
    return _malloc_type_malloc(
      size,
      type_id,
    );
  }

  late final _malloc_type_mallocPtr =
      _lookup<ffi.NativeFunction<NativeMalloc_type_malloc>>(
          'malloc_type_malloc');
  late final _malloc_type_malloc =
      _malloc_type_mallocPtr.asFunction<DartMalloc_type_malloc>();

  ffi.Pointer<ffi.Void> malloc_type_calloc(
    int count,
    int size,
    int type_id,
  ) {
    return _malloc_type_calloc(
      count,
      size,
      type_id,
    );
  }

  late final _malloc_type_callocPtr =
      _lookup<ffi.NativeFunction<NativeMalloc_type_calloc>>(
          'malloc_type_calloc');
  late final _malloc_type_calloc =
      _malloc_type_callocPtr.asFunction<DartMalloc_type_calloc>();

  void malloc_type_free(
    ffi.Pointer<ffi.Void> ptr,
    int type_id,
  ) {
    return _malloc_type_free(
      ptr,
      type_id,
    );
  }

  late final _malloc_type_freePtr =
      _lookup<ffi.NativeFunction<NativeMalloc_type_free>>('malloc_type_free');
  late final _malloc_type_free =
      _malloc_type_freePtr.asFunction<DartMalloc_type_free>();

  ffi.Pointer<ffi.Void> malloc_type_realloc(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int type_id,
  ) {
    return _malloc_type_realloc(
      ptr,
      size,
      type_id,
    );
  }

  late final _malloc_type_reallocPtr =
      _lookup<ffi.NativeFunction<NativeMalloc_type_realloc>>(
          'malloc_type_realloc');
  late final _malloc_type_realloc =
      _malloc_type_reallocPtr.asFunction<DartMalloc_type_realloc>();

  ffi.Pointer<ffi.Void> malloc_type_valloc(
    int size,
    int type_id,
  ) {
    return _malloc_type_valloc(
      size,
      type_id,
    );
  }

  late final _malloc_type_vallocPtr =
      _lookup<ffi.NativeFunction<NativeMalloc_type_valloc>>(
          'malloc_type_valloc');
  late final _malloc_type_valloc =
      _malloc_type_vallocPtr.asFunction<DartMalloc_type_valloc>();

  ffi.Pointer<ffi.Void> malloc_type_aligned_alloc(
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_aligned_alloc(
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_aligned_allocPtr =
      _lookup<ffi.NativeFunction<NativeMalloc_type_aligned_alloc>>(
          'malloc_type_aligned_alloc');
  late final _malloc_type_aligned_alloc =
      _malloc_type_aligned_allocPtr.asFunction<DartMalloc_type_aligned_alloc>();

  int malloc_type_posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> memptr,
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_posix_memalign(
      memptr,
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_posix_memalignPtr =
      _lookup<ffi.NativeFunction<NativeMalloc_type_posix_memalign>>(
          'malloc_type_posix_memalign');
  late final _malloc_type_posix_memalign = _malloc_type_posix_memalignPtr
      .asFunction<DartMalloc_type_posix_memalign>();

  ffi.Pointer<ffi.Void> malloc_type_zone_malloc(
    ffi.Pointer<malloc_zone_t> zone,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_malloc(
      zone,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_mallocPtr =
      _lookup<ffi.NativeFunction<NativeMalloc_type_zone_malloc>>(
          'malloc_type_zone_malloc');
  late final _malloc_type_zone_malloc =
      _malloc_type_zone_mallocPtr.asFunction<DartMalloc_type_zone_malloc>();

  ffi.Pointer<ffi.Void> malloc_type_zone_calloc(
    ffi.Pointer<malloc_zone_t> zone,
    int count,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_calloc(
      zone,
      count,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_callocPtr =
      _lookup<ffi.NativeFunction<NativeMalloc_type_zone_calloc>>(
          'malloc_type_zone_calloc');
  late final _malloc_type_zone_calloc =
      _malloc_type_zone_callocPtr.asFunction<DartMalloc_type_zone_calloc>();

  void malloc_type_zone_free(
    ffi.Pointer<malloc_zone_t> zone,
    ffi.Pointer<ffi.Void> ptr,
    int type_id,
  ) {
    return _malloc_type_zone_free(
      zone,
      ptr,
      type_id,
    );
  }

  late final _malloc_type_zone_freePtr =
      _lookup<ffi.NativeFunction<NativeMalloc_type_zone_free>>(
          'malloc_type_zone_free');
  late final _malloc_type_zone_free =
      _malloc_type_zone_freePtr.asFunction<DartMalloc_type_zone_free>();

  ffi.Pointer<ffi.Void> malloc_type_zone_realloc(
    ffi.Pointer<malloc_zone_t> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_realloc(
      zone,
      ptr,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_reallocPtr =
      _lookup<ffi.NativeFunction<NativeMalloc_type_zone_realloc>>(
          'malloc_type_zone_realloc');
  late final _malloc_type_zone_realloc =
      _malloc_type_zone_reallocPtr.asFunction<DartMalloc_type_zone_realloc>();

  ffi.Pointer<ffi.Void> malloc_type_zone_valloc(
    ffi.Pointer<malloc_zone_t> zone,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_valloc(
      zone,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_vallocPtr =
      _lookup<ffi.NativeFunction<NativeMalloc_type_zone_valloc>>(
          'malloc_type_zone_valloc');
  late final _malloc_type_zone_valloc =
      _malloc_type_zone_vallocPtr.asFunction<DartMalloc_type_zone_valloc>();

  ffi.Pointer<ffi.Void> malloc_type_zone_memalign(
    ffi.Pointer<malloc_zone_t> zone,
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_memalign(
      zone,
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_memalignPtr =
      _lookup<ffi.NativeFunction<NativeMalloc_type_zone_memalign>>(
          'malloc_type_zone_memalign');
  late final _malloc_type_zone_memalign =
      _malloc_type_zone_memalignPtr.asFunction<DartMalloc_type_zone_memalign>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr = _lookup<ffi.NativeFunction<NativeMalloc>>('malloc');
  late final _malloc = _mallocPtr.asFunction<DartMalloc>();

  ffi.Pointer<ffi.Void> calloc(
    int __count,
    int __size,
  ) {
    return _calloc(
      __count,
      __size,
    );
  }

  late final _callocPtr = _lookup<ffi.NativeFunction<NativeCalloc>>('calloc');
  late final _calloc = _callocPtr.asFunction<DartCalloc>();

  void free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _free(
      arg0,
    );
  }

  late final _freePtr = _lookup<ffi.NativeFunction<NativeFree>>('free');
  late final _free = _freePtr.asFunction<DartFree>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr =
      _lookup<ffi.NativeFunction<NativeRealloc>>('realloc');
  late final _realloc = _reallocPtr.asFunction<DartRealloc>();

  ffi.Pointer<ffi.Void> reallocf(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _reallocf(
      __ptr,
      __size,
    );
  }

  late final _reallocfPtr =
      _lookup<ffi.NativeFunction<NativeReallocf>>('reallocf');
  late final _reallocf = _reallocfPtr.asFunction<DartReallocf>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _vallocPtr = _lookup<ffi.NativeFunction<NativeValloc>>('valloc');
  late final _valloc = _vallocPtr.asFunction<DartValloc>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr =
      _lookup<ffi.NativeFunction<NativeAligned_alloc>>('aligned_alloc');
  late final _aligned_alloc = _aligned_allocPtr.asFunction<DartAligned_alloc>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr =
      _lookup<ffi.NativeFunction<NativePosix_memalign>>('posix_memalign');
  late final _posix_memalign =
      _posix_memalignPtr.asFunction<DartPosix_memalign>();

  void abort() {
    return _abort();
  }

  late final _abortPtr = _lookup<ffi.NativeFunction<NativeAbort>>('abort');
  late final _abort = _abortPtr.asFunction<DartAbort>();

  int abs(
    int arg0,
  ) {
    return _abs(
      arg0,
    );
  }

  late final _absPtr = _lookup<ffi.NativeFunction<NativeAbs>>('abs');
  late final _abs = _absPtr.asFunction<DartAbs>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _atexit(
      arg0,
    );
  }

  late final _atexitPtr = _lookup<ffi.NativeFunction<NativeAtexit>>('atexit');
  late final _atexit = _atexitPtr.asFunction<DartAtexit>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _at_quick_exit(
      arg0,
    );
  }

  late final _at_quick_exitPtr =
      _lookup<ffi.NativeFunction<NativeAt_quick_exit>>('at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<DartAt_quick_exit>();

  double atof(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atof(
      arg0,
    );
  }

  late final _atofPtr = _lookup<ffi.NativeFunction<NativeAtof>>('atof');
  late final _atof = _atofPtr.asFunction<DartAtof>();

  int atoi(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoi(
      arg0,
    );
  }

  late final _atoiPtr = _lookup<ffi.NativeFunction<NativeAtoi>>('atoi');
  late final _atoi = _atoiPtr.asFunction<DartAtoi>();

  int atol(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atol(
      arg0,
    );
  }

  late final _atolPtr = _lookup<ffi.NativeFunction<NativeAtol>>('atol');
  late final _atol = _atolPtr.asFunction<DartAtol>();

  int atoll(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoll(
      arg0,
    );
  }

  late final _atollPtr = _lookup<ffi.NativeFunction<NativeAtoll>>('atoll');
  late final _atoll = _atollPtr.asFunction<DartAtoll>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _bsearchPtr =
      _lookup<ffi.NativeFunction<NativeBsearch>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<DartBsearch>();

  div_t div(
    int arg0,
    int arg1,
  ) {
    return _div(
      arg0,
      arg1,
    );
  }

  late final _divPtr = _lookup<ffi.NativeFunction<NativeDiv>>('div');
  late final _div = _divPtr.asFunction<DartDiv>();

  void exit(
    int arg0,
  ) {
    return _exit(
      arg0,
    );
  }

  late final _exitPtr = _lookup<ffi.NativeFunction<NativeExit>>('exit');
  late final _exit = _exitPtr.asFunction<DartExit>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getenv(
      arg0,
    );
  }

  late final _getenvPtr = _lookup<ffi.NativeFunction<NativeGetenv>>('getenv');
  late final _getenv = _getenvPtr.asFunction<DartGetenv>();

  int labs(
    int arg0,
  ) {
    return _labs(
      arg0,
    );
  }

  late final _labsPtr = _lookup<ffi.NativeFunction<NativeLabs>>('labs');
  late final _labs = _labsPtr.asFunction<DartLabs>();

  ldiv_t ldiv(
    int arg0,
    int arg1,
  ) {
    return _ldiv(
      arg0,
      arg1,
    );
  }

  late final _ldivPtr = _lookup<ffi.NativeFunction<NativeLdiv>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<DartLdiv>();

  int llabs(
    int arg0,
  ) {
    return _llabs(
      arg0,
    );
  }

  late final _llabsPtr = _lookup<ffi.NativeFunction<NativeLlabs>>('llabs');
  late final _llabs = _llabsPtr.asFunction<DartLlabs>();

  lldiv_t lldiv(
    int arg0,
    int arg1,
  ) {
    return _lldiv(
      arg0,
      arg1,
    );
  }

  late final _lldivPtr = _lookup<ffi.NativeFunction<NativeLldiv>>('lldiv');
  late final _lldiv = _lldivPtr.asFunction<DartLldiv>();

  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<ffi.NativeFunction<NativeMblen>>('mblen');
  late final _mblen = _mblenPtr.asFunction<DartMblen>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbstowcs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbstowcsPtr =
      _lookup<ffi.NativeFunction<NativeMbstowcs>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<DartMbstowcs>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbtowc(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbtowcPtr = _lookup<ffi.NativeFunction<NativeMbtowc>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<DartMbtowc>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<ffi.NativeFunction<NativeQsort>>('qsort');
  late final _qsort = _qsortPtr.asFunction<DartQsort>();

  void quick_exit(
    int arg0,
  ) {
    return _quick_exit(
      arg0,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<NativeQuick_exit>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<DartQuick_exit>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<NativeRand>>('rand');
  late final _rand = _randPtr.asFunction<DartRand>();

  void srand(
    int arg0,
  ) {
    return _srand(
      arg0,
    );
  }

  late final _srandPtr = _lookup<ffi.NativeFunction<NativeSrand>>('srand');
  late final _srand = _srandPtr.asFunction<DartSrand>();

  double strtod(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtod(
      arg0,
      arg1,
    );
  }

  late final _strtodPtr = _lookup<ffi.NativeFunction<NativeStrtod>>('strtod');
  late final _strtod = _strtodPtr.asFunction<DartStrtod>();

  double strtof(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtof(
      arg0,
      arg1,
    );
  }

  late final _strtofPtr = _lookup<ffi.NativeFunction<NativeStrtof>>('strtof');
  late final _strtof = _strtofPtr.asFunction<DartStrtof>();

  int strtol(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<ffi.NativeFunction<NativeStrtol>>('strtol');
  late final _strtol = _strtolPtr.asFunction<DartStrtol>();

  int strtoll(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr =
      _lookup<ffi.NativeFunction<NativeStrtoll>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<DartStrtoll>();

  int strtoul(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr =
      _lookup<ffi.NativeFunction<NativeStrtoul>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<DartStrtoul>();

  int strtoull(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr =
      _lookup<ffi.NativeFunction<NativeStrtoull>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<DartStrtoull>();

  int system(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _system(
      arg0,
    );
  }

  late final _systemPtr = _lookup<ffi.NativeFunction<NativeSystem>>('system');
  late final _system = _systemPtr.asFunction<DartSystem>();

  int wcstombs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _wcstombs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcstombsPtr =
      _lookup<ffi.NativeFunction<NativeWcstombs>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<DartWcstombs>();

  int wctomb(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _wctomb(
      arg0,
      arg1,
    );
  }

  late final _wctombPtr = _lookup<ffi.NativeFunction<NativeWctomb>>('wctomb');
  late final _wctomb = _wctombPtr.asFunction<DartWctomb>();

  void _Exit(
    int arg0,
  ) {
    return __Exit(
      arg0,
    );
  }

  late final __ExitPtr = _lookup<ffi.NativeFunction<Native_Exit>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<Dart_Exit>();

  int a64l(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _a64l(
      arg0,
    );
  }

  late final _a64lPtr = _lookup<ffi.NativeFunction<NativeA64l>>('a64l');
  late final _a64l = _a64lPtr.asFunction<DartA64l>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<NativeDrand48>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<DartDrand48>();

  ffi.Pointer<ffi.Char> ecvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _ecvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ecvtPtr = _lookup<ffi.NativeFunction<NativeEcvt>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<DartEcvt>();

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _erand48(
      arg0,
    );
  }

  late final _erand48Ptr =
      _lookup<ffi.NativeFunction<NativeErand48>>('erand48');
  late final _erand48 = _erand48Ptr.asFunction<DartErand48>();

  ffi.Pointer<ffi.Char> fcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _fcvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fcvtPtr = _lookup<ffi.NativeFunction<NativeFcvt>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<DartFcvt>();

  ffi.Pointer<ffi.Char> gcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _gcvt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _gcvtPtr = _lookup<ffi.NativeFunction<NativeGcvt>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<DartGcvt>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _getsubopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getsuboptPtr =
      _lookup<ffi.NativeFunction<NativeGetsubopt>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<DartGetsubopt>();

  int grantpt(
    int arg0,
  ) {
    return _grantpt(
      arg0,
    );
  }

  late final _grantptPtr =
      _lookup<ffi.NativeFunction<NativeGrantpt>>('grantpt');
  late final _grantpt = _grantptPtr.asFunction<DartGrantpt>();

  ffi.Pointer<ffi.Char> initstate(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _initstate(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _initstatePtr =
      _lookup<ffi.NativeFunction<NativeInitstate>>('initstate');
  late final _initstate = _initstatePtr.asFunction<DartInitstate>();

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _jrand48(
      arg0,
    );
  }

  late final _jrand48Ptr =
      _lookup<ffi.NativeFunction<NativeJrand48>>('jrand48');
  late final _jrand48 = _jrand48Ptr.asFunction<DartJrand48>();

  ffi.Pointer<ffi.Char> l64a(
    int arg0,
  ) {
    return _l64a(
      arg0,
    );
  }

  late final _l64aPtr = _lookup<ffi.NativeFunction<NativeL64a>>('l64a');
  late final _l64a = _l64aPtr.asFunction<DartL64a>();

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _lcong48(
      arg0,
    );
  }

  late final _lcong48Ptr =
      _lookup<ffi.NativeFunction<NativeLcong48>>('lcong48');
  late final _lcong48 = _lcong48Ptr.asFunction<DartLcong48>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<NativeLrand48>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<DartLrand48>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mktemp(
      arg0,
    );
  }

  late final _mktempPtr = _lookup<ffi.NativeFunction<NativeMktemp>>('mktemp');
  late final _mktemp = _mktempPtr.asFunction<DartMktemp>();

  int mkstemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mkstemp(
      arg0,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<NativeMkstemp>>('mkstemp');
  late final _mkstemp = _mkstempPtr.asFunction<DartMkstemp>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<NativeMrand48>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<DartMrand48>();

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _nrand48(
      arg0,
    );
  }

  late final _nrand48Ptr =
      _lookup<ffi.NativeFunction<NativeNrand48>>('nrand48');
  late final _nrand48 = _nrand48Ptr.asFunction<DartNrand48>();

  int posix_openpt(
    int arg0,
  ) {
    return _posix_openpt(
      arg0,
    );
  }

  late final _posix_openptPtr =
      _lookup<ffi.NativeFunction<NativePosix_openpt>>('posix_openpt');
  late final _posix_openpt = _posix_openptPtr.asFunction<DartPosix_openpt>();

  ffi.Pointer<ffi.Char> ptsname(
    int arg0,
  ) {
    return _ptsname(
      arg0,
    );
  }

  late final _ptsnamePtr =
      _lookup<ffi.NativeFunction<NativePtsname>>('ptsname');
  late final _ptsname = _ptsnamePtr.asFunction<DartPtsname>();

  int ptsname_r(
    int fildes,
    ffi.Pointer<ffi.Char> buffer,
    int buflen,
  ) {
    return _ptsname_r(
      fildes,
      buffer,
      buflen,
    );
  }

  late final _ptsname_rPtr =
      _lookup<ffi.NativeFunction<NativePtsname_r>>('ptsname_r');
  late final _ptsname_r = _ptsname_rPtr.asFunction<DartPtsname_r>();

  int putenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _putenv(
      arg0,
    );
  }

  late final _putenvPtr = _lookup<ffi.NativeFunction<NativePutenv>>('putenv');
  late final _putenv = _putenvPtr.asFunction<DartPutenv>();

  int random() {
    return _random();
  }

  late final _randomPtr = _lookup<ffi.NativeFunction<NativeRandom>>('random');
  late final _random = _randomPtr.asFunction<DartRandom>();

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> arg0,
  ) {
    return _rand_r(
      arg0,
    );
  }

  late final _rand_rPtr = _lookup<ffi.NativeFunction<NativeRand_r>>('rand_r');
  late final _rand_r = _rand_rPtr.asFunction<DartRand_r>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _realpath(
      arg0,
      arg1,
    );
  }

  late final _realpathPtr =
      _lookup<ffi.NativeFunction<NativeRealpath>>('realpath');
  late final _realpath = _realpathPtr.asFunction<DartRealpath>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _seed48(
      arg0,
    );
  }

  late final _seed48Ptr = _lookup<ffi.NativeFunction<NativeSeed48>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<DartSeed48>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __overwrite,
  ) {
    return _setenv(
      __name,
      __value,
      __overwrite,
    );
  }

  late final _setenvPtr = _lookup<ffi.NativeFunction<NativeSetenv>>('setenv');
  late final _setenv = _setenvPtr.asFunction<DartSetenv>();

  void setkey(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setkey(
      arg0,
    );
  }

  late final _setkeyPtr = _lookup<ffi.NativeFunction<NativeSetkey>>('setkey');
  late final _setkey = _setkeyPtr.asFunction<DartSetkey>();

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setstate(
      arg0,
    );
  }

  late final _setstatePtr =
      _lookup<ffi.NativeFunction<NativeSetstate>>('setstate');
  late final _setstate = _setstatePtr.asFunction<DartSetstate>();

  void srand48(
    int arg0,
  ) {
    return _srand48(
      arg0,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<NativeSrand48>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<DartSrand48>();

  void srandom(
    int arg0,
  ) {
    return _srandom(
      arg0,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<NativeSrandom>>('srandom');
  late final _srandom = _srandomPtr.asFunction<DartSrandom>();

  int unlockpt(
    int arg0,
  ) {
    return _unlockpt(
      arg0,
    );
  }

  late final _unlockptPtr =
      _lookup<ffi.NativeFunction<NativeUnlockpt>>('unlockpt');
  late final _unlockpt = _unlockptPtr.asFunction<DartUnlockpt>();

  int unsetenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _unsetenv(
      arg0,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<NativeUnsetenv>>('unsetenv');
  late final _unsetenv = _unsetenvPtr.asFunction<DartUnsetenv>();

  int arc4random() {
    return _arc4random();
  }

  late final _arc4randomPtr =
      _lookup<ffi.NativeFunction<NativeArc4random>>('arc4random');
  late final _arc4random = _arc4randomPtr.asFunction<DartArc4random>();

  void arc4random_addrandom(
    ffi.Pointer<ffi.UnsignedChar> arg0,
    int arg1,
  ) {
    return _arc4random_addrandom(
      arg0,
      arg1,
    );
  }

  late final _arc4random_addrandomPtr =
      _lookup<ffi.NativeFunction<NativeArc4random_addrandom>>(
          'arc4random_addrandom');
  late final _arc4random_addrandom =
      _arc4random_addrandomPtr.asFunction<DartArc4random_addrandom>();

  void arc4random_buf(
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _arc4random_buf(
      __buf,
      __nbytes,
    );
  }

  late final _arc4random_bufPtr =
      _lookup<ffi.NativeFunction<NativeArc4random_buf>>('arc4random_buf');
  late final _arc4random_buf =
      _arc4random_bufPtr.asFunction<DartArc4random_buf>();

  void arc4random_stir() {
    return _arc4random_stir();
  }

  late final _arc4random_stirPtr =
      _lookup<ffi.NativeFunction<NativeArc4random_stir>>('arc4random_stir');
  late final _arc4random_stir =
      _arc4random_stirPtr.asFunction<DartArc4random_stir>();

  int arc4random_uniform(
    int __upper_bound,
  ) {
    return _arc4random_uniform(
      __upper_bound,
    );
  }

  late final _arc4random_uniformPtr =
      _lookup<ffi.NativeFunction<NativeArc4random_uniform>>(
          'arc4random_uniform');
  late final _arc4random_uniform =
      _arc4random_uniformPtr.asFunction<DartArc4random_uniform>();

  ffi.Pointer<ffi.Char> cgetcap(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _cgetcap(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetcapPtr =
      _lookup<ffi.NativeFunction<NativeCgetcap>>('cgetcap');
  late final _cgetcap = _cgetcapPtr.asFunction<DartCgetcap>();

  int cgetclose() {
    return _cgetclose();
  }

  late final _cgetclosePtr =
      _lookup<ffi.NativeFunction<NativeCgetclose>>('cgetclose');
  late final _cgetclose = _cgetclosePtr.asFunction<DartCgetclose>();

  int cgetent(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _cgetent(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetentPtr =
      _lookup<ffi.NativeFunction<NativeCgetent>>('cgetent');
  late final _cgetent = _cgetentPtr.asFunction<DartCgetent>();

  int cgetfirst(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _cgetfirst(
      arg0,
      arg1,
    );
  }

  late final _cgetfirstPtr =
      _lookup<ffi.NativeFunction<NativeCgetfirst>>('cgetfirst');
  late final _cgetfirst = _cgetfirstPtr.asFunction<DartCgetfirst>();

  int cgetmatch(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _cgetmatch(
      arg0,
      arg1,
    );
  }

  late final _cgetmatchPtr =
      _lookup<ffi.NativeFunction<NativeCgetmatch>>('cgetmatch');
  late final _cgetmatch = _cgetmatchPtr.asFunction<DartCgetmatch>();

  int cgetnext(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _cgetnext(
      arg0,
      arg1,
    );
  }

  late final _cgetnextPtr =
      _lookup<ffi.NativeFunction<NativeCgetnext>>('cgetnext');
  late final _cgetnext = _cgetnextPtr.asFunction<DartCgetnext>();

  int cgetnum(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Long> arg2,
  ) {
    return _cgetnum(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetnumPtr =
      _lookup<ffi.NativeFunction<NativeCgetnum>>('cgetnum');
  late final _cgetnum = _cgetnumPtr.asFunction<DartCgetnum>();

  int cgetset(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _cgetset(
      arg0,
    );
  }

  late final _cgetsetPtr =
      _lookup<ffi.NativeFunction<NativeCgetset>>('cgetset');
  late final _cgetset = _cgetsetPtr.asFunction<DartCgetset>();

  int cgetstr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _cgetstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetstrPtr =
      _lookup<ffi.NativeFunction<NativeCgetstr>>('cgetstr');
  late final _cgetstr = _cgetstrPtr.asFunction<DartCgetstr>();

  int cgetustr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _cgetustr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetustrPtr =
      _lookup<ffi.NativeFunction<NativeCgetustr>>('cgetustr');
  late final _cgetustr = _cgetustrPtr.asFunction<DartCgetustr>();

  int daemon(
    int arg0,
    int arg1,
  ) {
    return _daemon(
      arg0,
      arg1,
    );
  }

  late final _daemonPtr = _lookup<ffi.NativeFunction<NativeDaemon>>('daemon');
  late final _daemon = _daemonPtr.asFunction<DartDaemon>();

  ffi.Pointer<ffi.Char> devname(
    int arg0,
    int arg1,
  ) {
    return _devname(
      arg0,
      arg1,
    );
  }

  late final _devnamePtr =
      _lookup<ffi.NativeFunction<NativeDevname>>('devname');
  late final _devname = _devnamePtr.asFunction<DartDevname>();

  ffi.Pointer<ffi.Char> devname_r(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> buf,
    int len,
  ) {
    return _devname_r(
      arg0,
      arg1,
      buf,
      len,
    );
  }

  late final _devname_rPtr =
      _lookup<ffi.NativeFunction<NativeDevname_r>>('devname_r');
  late final _devname_r = _devname_rPtr.asFunction<DartDevname_r>();

  ffi.Pointer<ffi.Char> getbsize(
    ffi.Pointer<ffi.Int> arg0,
    ffi.Pointer<ffi.Long> arg1,
  ) {
    return _getbsize(
      arg0,
      arg1,
    );
  }

  late final _getbsizePtr =
      _lookup<ffi.NativeFunction<NativeGetbsize>>('getbsize');
  late final _getbsize = _getbsizePtr.asFunction<DartGetbsize>();

  int getloadavg(
    ffi.Pointer<ffi.Double> arg0,
    int arg1,
  ) {
    return _getloadavg(
      arg0,
      arg1,
    );
  }

  late final _getloadavgPtr =
      _lookup<ffi.NativeFunction<NativeGetloadavg>>('getloadavg');
  late final _getloadavg = _getloadavgPtr.asFunction<DartGetloadavg>();

  ffi.Pointer<ffi.Char> getprogname() {
    return _getprogname();
  }

  late final _getprognamePtr =
      _lookup<ffi.NativeFunction<NativeGetprogname>>('getprogname');
  late final _getprogname = _getprognamePtr.asFunction<DartGetprogname>();

  void setprogname(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setprogname(
      arg0,
    );
  }

  late final _setprognamePtr =
      _lookup<ffi.NativeFunction<NativeSetprogname>>('setprogname');
  late final _setprogname = _setprognamePtr.asFunction<DartSetprogname>();

  int heapsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _heapsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _heapsortPtr =
      _lookup<ffi.NativeFunction<NativeHeapsort>>('heapsort');
  late final _heapsort = _heapsortPtr.asFunction<DartHeapsort>();

  int mergesort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _mergesort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _mergesortPtr =
      _lookup<ffi.NativeFunction<NativeMergesort>>('mergesort');
  late final _mergesort = _mergesortPtr.asFunction<DartMergesort>();

  void psort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _psortPtr = _lookup<ffi.NativeFunction<NativePsort>>('psort');
  late final _psort = _psortPtr.asFunction<DartPsort>();

  void psort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _psort_rPtr =
      _lookup<ffi.NativeFunction<NativePsort_r>>('psort_r');
  late final _psort_r = _psort_rPtr.asFunction<DartPsort_r>();

  void qsort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _qsort_rPtr =
      _lookup<ffi.NativeFunction<NativeQsort_r>>('qsort_r');
  late final _qsort_r = _qsort_rPtr.asFunction<DartQsort_r>();

  int radixsort(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _radixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _radixsortPtr =
      _lookup<ffi.NativeFunction<NativeRadixsort>>('radixsort');
  late final _radixsort = _radixsortPtr.asFunction<DartRadixsort>();

  int rpmatch(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _rpmatch(
      arg0,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<NativeRpmatch>>('rpmatch');
  late final _rpmatch = _rpmatchPtr.asFunction<DartRpmatch>();

  int sradixsort(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _sradixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _sradixsortPtr =
      _lookup<ffi.NativeFunction<NativeSradixsort>>('sradixsort');
  late final _sradixsort = _sradixsortPtr.asFunction<DartSradixsort>();

  void sranddev() {
    return _sranddev();
  }

  late final _sranddevPtr =
      _lookup<ffi.NativeFunction<NativeSranddev>>('sranddev');
  late final _sranddev = _sranddevPtr.asFunction<DartSranddev>();

  void srandomdev() {
    return _srandomdev();
  }

  late final _srandomdevPtr =
      _lookup<ffi.NativeFunction<NativeSrandomdev>>('srandomdev');
  late final _srandomdev = _srandomdevPtr.asFunction<DartSrandomdev>();

  int strtonum(
    ffi.Pointer<ffi.Char> __numstr,
    int __minval,
    int __maxval,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __errstrp,
  ) {
    return _strtonum(
      __numstr,
      __minval,
      __maxval,
      __errstrp,
    );
  }

  late final _strtonumPtr =
      _lookup<ffi.NativeFunction<NativeStrtonum>>('strtonum');
  late final _strtonum = _strtonumPtr.asFunction<DartStrtonum>();

  int strtoq(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<ffi.NativeFunction<NativeStrtoq>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<DartStrtoq>();

  int strtouq(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr =
      _lookup<ffi.NativeFunction<NativeStrtouq>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<DartStrtouq>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _suboptarg =
      _lookup<ffi.Pointer<ffi.Char>>('suboptarg');

  ffi.Pointer<ffi.Char> get suboptarg => _suboptarg.value;

  set suboptarg(ffi.Pointer<ffi.Char> value) => _suboptarg.value = value;

  int validate_submarine(
    ffi.Pointer<ffi.Char> preimage_hash,
    ffi.Pointer<ffi.Char> claim_public_key,
    ffi.Pointer<ffi.Char> refund_public_key,
    int timeout_block_height,
    ffi.Pointer<ffi.Char> lockup_address,
    ffi.Pointer<ffi.Char> redeem_script,
    ffi.Pointer<ffi.Char> blinding_key,
  ) {
    return _validate_submarine(
      preimage_hash,
      claim_public_key,
      refund_public_key,
      timeout_block_height,
      lockup_address,
      redeem_script,
      blinding_key,
    );
  }

  late final _validate_submarinePtr =
      _lookup<ffi.NativeFunction<NativeValidate_submarine>>(
          'validate_submarine');
  late final _validate_submarine =
      _validate_submarinePtr.asFunction<DartValidate_submarine>();

  ffi.Pointer<ffi.Char> extract_claim_public_key(
    ffi.Pointer<ffi.Char> comparison_script,
  ) {
    return _extract_claim_public_key(
      comparison_script,
    );
  }

  late final _extract_claim_public_keyPtr =
      _lookup<ffi.NativeFunction<NativeExtract_claim_public_key>>(
          'extract_claim_public_key');
  late final _extract_claim_public_key =
      _extract_claim_public_keyPtr.asFunction<DartExtract_claim_public_key>();

  ffi.Pointer<ffi.Char> create_and_sign_claim_transaction(
    ffi.Pointer<ffi.Char> redeem_script,
    ffi.Pointer<ffi.Char> blinding_key,
    ffi.Pointer<ffi.Char> onchain_address,
    ffi.Pointer<ffi.Char> private_key,
    ffi.Pointer<ffi.Char> preimage,
    ffi.Pointer<ffi.Char> tx,
    int fees,
  ) {
    return _create_and_sign_claim_transaction(
      redeem_script,
      blinding_key,
      onchain_address,
      private_key,
      preimage,
      tx,
      fees,
    );
  }

  late final _create_and_sign_claim_transactionPtr =
      _lookup<ffi.NativeFunction<NativeCreate_and_sign_claim_transaction>>(
          'create_and_sign_claim_transaction');
  late final _create_and_sign_claim_transaction =
      _create_and_sign_claim_transactionPtr
          .asFunction<DartCreate_and_sign_claim_transaction>();

  ffi.Pointer<ffi.Char> create_and_sign_refund_transaction(
    ffi.Pointer<ffi.Char> redeem_script,
    ffi.Pointer<ffi.Char> blinding_key,
    ffi.Pointer<ffi.Char> onchain_address,
    ffi.Pointer<ffi.Char> private_key,
    ffi.Pointer<ffi.Char> tx,
    int fees,
  ) {
    return _create_and_sign_refund_transaction(
      redeem_script,
      blinding_key,
      onchain_address,
      private_key,
      tx,
      fees,
    );
  }

  late final _create_and_sign_refund_transactionPtr =
      _lookup<ffi.NativeFunction<NativeCreate_and_sign_refund_transaction>>(
          'create_and_sign_refund_transaction');
  late final _create_and_sign_refund_transaction =
      _create_and_sign_refund_transactionPtr
          .asFunction<DartCreate_and_sign_refund_transaction>();

  ffi.Pointer<ffi.Char> get_key_pair() {
    return _get_key_pair();
  }

  late final _get_key_pairPtr =
      _lookup<ffi.NativeFunction<NativeGet_key_pair>>('get_key_pair');
  late final _get_key_pair = _get_key_pairPtr.asFunction<DartGet_key_pair>();

  ffi.Pointer<ffi.Char> sign_message_schnorr(
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Char> private_key,
  ) {
    return _sign_message_schnorr(
      message,
      private_key,
    );
  }

  late final _sign_message_schnorrPtr =
      _lookup<ffi.NativeFunction<NativeSign_message_schnorr>>(
          'sign_message_schnorr');
  late final _sign_message_schnorr =
      _sign_message_schnorrPtr.asFunction<DartSign_message_schnorr>();

  int verify_signature_schnorr(
    ffi.Pointer<ffi.Char> signature,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Char> public_key,
  ) {
    return _verify_signature_schnorr(
      signature,
      message,
      public_key,
    );
  }

  late final _verify_signature_schnorrPtr =
      _lookup<ffi.NativeFunction<NativeVerify_signature_schnorr>>(
          'verify_signature_schnorr');
  late final _verify_signature_schnorr =
      _verify_signature_schnorrPtr.asFunction<DartVerify_signature_schnorr>();

  TxResult create_taxi_transaction(
    int send_amount,
    ffi.Pointer<ffi.Char> send_address,
    ffi.Pointer<ffi.Char> change_address,
    ffi.Pointer<UtxoFFI> utxos,
    int utxos_len,
    ffi.Pointer<ffi.Char> user_agent,
    ffi.Pointer<ffi.Char> api_key,
    bool subtract_fee_from_amount,
    bool is_lowball,
    bool is_testnet,
  ) {
    return _create_taxi_transaction(
      send_amount,
      send_address,
      change_address,
      utxos,
      utxos_len,
      user_agent,
      api_key,
      subtract_fee_from_amount,
      is_lowball,
      is_testnet,
    );
  }

  late final _create_taxi_transactionPtr =
      _lookup<ffi.NativeFunction<NativeCreate_taxi_transaction>>(
          'create_taxi_transaction');
  late final _create_taxi_transaction =
      _create_taxi_transactionPtr.asFunction<DartCreate_taxi_transaction>();

  TxResult create_final_taxi_pset(
    ffi.Pointer<ffi.Char> client_signed_pset,
    ffi.Pointer<ffi.Char> server_signed_pset,
  ) {
    return _create_final_taxi_pset(
      client_signed_pset,
      server_signed_pset,
    );
  }

  late final _create_final_taxi_psetPtr =
      _lookup<ffi.NativeFunction<NativeCreate_final_taxi_pset>>(
          'create_final_taxi_pset');
  late final _create_final_taxi_pset =
      _create_final_taxi_psetPtr.asFunction<DartCreate_final_taxi_pset>();

  void rust_cstr_free(
    ffi.Pointer<ffi.Char> s,
  ) {
    return _rust_cstr_free(
      s,
    );
  }

  late final _rust_cstr_freePtr =
      _lookup<ffi.NativeFunction<NativeRust_cstr_free>>('rust_cstr_free');
  late final _rust_cstr_free =
      _rust_cstr_freePtr.asFunction<DartRust_cstr_free>();

  void register_log_callback(
    LogCallback callback,
  ) {
    return _register_log_callback(
      callback,
    );
  }

  late final _register_log_callbackPtr =
      _lookup<ffi.NativeFunction<NativeRegister_log_callback>>(
          'register_log_callback');
  late final _register_log_callback =
      _register_log_callbackPtr.asFunction<DartRegister_log_callback>();

  /// Retrieves the last error message, if any.
  ffi.Pointer<ffi.Char> get_last_error() {
    return _get_last_error();
  }

  late final _get_last_errorPtr =
      _lookup<ffi.NativeFunction<NativeGet_last_error>>('get_last_error');
  late final _get_last_error =
      _get_last_errorPtr.asFunction<DartGet_last_error>();
}

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

final class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

final class fd_set extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<__int32_t> fds_bits;
}

typedef __int32_t = ffi.Int;
typedef Dart__int32_t = int;
typedef Native__darwin_check_fd_set_overflow = ffi.Int Function(
    ffi.Int arg0, ffi.Pointer<ffi.Void> arg1, ffi.Int arg2);
typedef Dart__darwin_check_fd_set_overflow = int Function(
    int arg0, ffi.Pointer<ffi.Void> arg1, int arg2);

/// A server session
final class GA_session extends ffi.Opaque {}

final class GA_json extends ffi.Opaque {}

/// An api method call that potentially requires two factor authentication to complete
final class GA_auth_handler extends ffi.Opaque {}

typedef NativeGA_init = ffi.Int Function(ffi.Pointer<GA_json> config);
typedef DartGA_init = int Function(ffi.Pointer<GA_json> config);
typedef NativeGA_get_thread_error_details = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef DartGA_get_thread_error_details = int Function(
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef NativeGA_create_session = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<GA_session>> session);
typedef DartGA_create_session = int Function(
    ffi.Pointer<ffi.Pointer<GA_session>> session);

/// A notification handler
typedef GA_notification_handler
    = ffi.Pointer<ffi.NativeFunction<GA_notification_handlerFunction>>;
typedef GA_notification_handlerFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> context, ffi.Pointer<GA_json> details);
typedef DartGA_notification_handlerFunction = void Function(
    ffi.Pointer<ffi.Void> context, ffi.Pointer<GA_json> details);
typedef NativeGA_set_notification_handler = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    GA_notification_handler handler,
    ffi.Pointer<ffi.Void> context);
typedef DartGA_set_notification_handler = int Function(
    ffi.Pointer<GA_session> session,
    GA_notification_handler handler,
    ffi.Pointer<ffi.Void> context);
typedef NativeGA_destroy_session = ffi.Int Function(
    ffi.Pointer<GA_session> session);
typedef DartGA_destroy_session = int Function(ffi.Pointer<GA_session> session);
typedef NativeGA_connect = ffi.Int Function(
    ffi.Pointer<GA_session> session, ffi.Pointer<GA_json> net_params);
typedef DartGA_connect = int Function(
    ffi.Pointer<GA_session> session, ffi.Pointer<GA_json> net_params);
typedef NativeGA_reconnect_hint = ffi.Int Function(
    ffi.Pointer<GA_session> session, ffi.Pointer<GA_json> hint);
typedef DartGA_reconnect_hint = int Function(
    ffi.Pointer<GA_session> session, ffi.Pointer<GA_json> hint);
typedef NativeGA_get_proxy_settings = ffi.Int Function(
    ffi.Pointer<GA_session> session, ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef DartGA_get_proxy_settings = int Function(
    ffi.Pointer<GA_session> session, ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef NativeGA_get_wallet_identifier = ffi.Int Function(
    ffi.Pointer<GA_json> net_params,
    ffi.Pointer<GA_json> params,
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef DartGA_get_wallet_identifier = int Function(
    ffi.Pointer<GA_json> net_params,
    ffi.Pointer<GA_json> params,
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef NativeGA_http_request = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> params,
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef DartGA_http_request = int Function(ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> params, ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef NativeGA_refresh_assets = ffi.Int Function(
    ffi.Pointer<GA_session> session, ffi.Pointer<GA_json> params);
typedef DartGA_refresh_assets = int Function(
    ffi.Pointer<GA_session> session, ffi.Pointer<GA_json> params);
typedef NativeGA_get_assets = ffi.Int Function(ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> params, ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef DartGA_get_assets = int Function(ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> params, ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef NativeGA_validate_asset_domain_name = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> params,
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef DartGA_validate_asset_domain_name = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> params,
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef NativeGA_validate = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_validate = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_register_user = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> hw_device,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_register_user = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> hw_device,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_login_user = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> hw_device,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_login_user = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> hw_device,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_set_watch_only = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> username,
    ffi.Pointer<ffi.Char> password);
typedef DartGA_set_watch_only = int Function(ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> username, ffi.Pointer<ffi.Char> password);
typedef NativeGA_get_watch_only_username = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<ffi.Char>> username);
typedef DartGA_get_watch_only_username = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<ffi.Char>> username);
typedef NativeGA_remove_account = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_remove_account = int Function(ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_create_subaccount = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_create_subaccount = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_subaccounts = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_get_subaccounts = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_subaccount = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Uint32 subaccount,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_get_subaccount = int Function(ffi.Pointer<GA_session> session,
    int subaccount, ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_update_subaccount = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_update_subaccount = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_transactions = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_get_transactions = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_receive_address = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_get_receive_address = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_previous_addresses = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_get_previous_addresses = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_unspent_outputs = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_get_unspent_outputs = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_unspent_outputs_for_private_key = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_get_unspent_outputs_for_private_key = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_set_unspent_outputs_status = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_set_unspent_outputs_status = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_transaction_details = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> txhash_hex,
    ffi.Pointer<ffi.Pointer<GA_json>> transaction);
typedef DartGA_get_transaction_details = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> txhash_hex,
    ffi.Pointer<ffi.Pointer<GA_json>> transaction);
typedef NativeGA_get_balance = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_get_balance = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_available_currencies = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_json>> currencies);
typedef DartGA_get_available_currencies = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_json>> currencies);
typedef NativeGA_convert_amount = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> value_details,
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef DartGA_convert_amount = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> value_details,
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef NativeGA_encrypt_with_pin = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_encrypt_with_pin = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_decrypt_with_pin = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_decrypt_with_pin = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_disable_all_pin_logins = ffi.Int Function(
    ffi.Pointer<GA_session> session);
typedef DartGA_disable_all_pin_logins = int Function(
    ffi.Pointer<GA_session> session);
typedef NativeGA_create_transaction = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_create_transaction = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_blind_transaction = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_blind_transaction = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_sign_transaction = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_sign_transaction = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_create_swap_transaction = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> swap_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_create_swap_transaction = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> swap_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_complete_swap_transaction = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> swap_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_complete_swap_transaction = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> swap_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_psbt_sign = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_psbt_sign = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_psbt_get_details = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_psbt_get_details = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_broadcast_transaction = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> transaction_hex,
    ffi.Pointer<ffi.Pointer<ffi.Char>> tx_hash);
typedef DartGA_broadcast_transaction = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> transaction_hex,
    ffi.Pointer<ffi.Pointer<ffi.Char>> tx_hash);
typedef NativeGA_send_transaction = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_send_transaction = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_sign_message = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_sign_message = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_send_nlocktimes = ffi.Int Function(
    ffi.Pointer<GA_session> session);
typedef DartGA_send_nlocktimes = int Function(ffi.Pointer<GA_session> session);
typedef NativeGA_set_csvtime = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> locktime_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_set_csvtime = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> locktime_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_set_nlocktime = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> locktime_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_set_nlocktime = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> locktime_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_set_transaction_memo = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> txhash_hex,
    ffi.Pointer<ffi.Char> memo,
    ffi.Uint32 memo_type);
typedef DartGA_set_transaction_memo = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> txhash_hex,
    ffi.Pointer<ffi.Char> memo,
    int memo_type);
typedef NativeGA_get_fee_estimates = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_json>> estimates);
typedef DartGA_get_fee_estimates = int Function(ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_json>> estimates);
typedef NativeGA_get_credentials = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_get_credentials = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_system_message = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<ffi.Char>> message_text);
typedef DartGA_get_system_message = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<ffi.Char>> message_text);
typedef NativeGA_ack_system_message = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> message_text,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_ack_system_message = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> message_text,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_twofactor_config = ffi.Int Function(
    ffi.Pointer<GA_session> session, ffi.Pointer<ffi.Pointer<GA_json>> config);
typedef DartGA_get_twofactor_config = int Function(
    ffi.Pointer<GA_session> session, ffi.Pointer<ffi.Pointer<GA_json>> config);
typedef NativeGA_change_settings = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> settings,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_change_settings = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> settings,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_settings = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_json>> settings);
typedef DartGA_get_settings = int Function(ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_json>> settings);
typedef NativeGA_convert_json_to_string = ffi.Int Function(
    ffi.Pointer<GA_json> json, ffi.Pointer<ffi.Pointer<ffi.Char>> output);
typedef DartGA_convert_json_to_string = int Function(
    ffi.Pointer<GA_json> json, ffi.Pointer<ffi.Pointer<ffi.Char>> output);
typedef NativeGA_convert_string_to_json = ffi.Int Function(
    ffi.Pointer<ffi.Char> input, ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef DartGA_convert_string_to_json = int Function(
    ffi.Pointer<ffi.Char> input, ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef NativeGA_convert_json_value_to_string = ffi.Int Function(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> output);
typedef DartGA_convert_json_value_to_string = int Function(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> output);
typedef NativeGA_convert_json_value_to_uint32 = ffi.Int Function(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Uint32> output);
typedef DartGA_convert_json_value_to_uint32 = int Function(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Uint32> output);
typedef NativeGA_convert_json_value_to_uint64 = ffi.Int Function(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Uint64> output);
typedef DartGA_convert_json_value_to_uint64 = int Function(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Uint64> output);
typedef NativeGA_convert_json_value_to_bool = ffi.Int Function(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Uint32> output);
typedef DartGA_convert_json_value_to_bool = int Function(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Uint32> output);
typedef NativeGA_convert_json_value_to_json = ffi.Int Function(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef DartGA_convert_json_value_to_json = int Function(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef NativeGA_destroy_json = ffi.Int Function(ffi.Pointer<GA_json> json);
typedef DartGA_destroy_json = int Function(ffi.Pointer<GA_json> json);
typedef NativeGA_auth_handler_get_status = ffi.Int Function(
    ffi.Pointer<GA_auth_handler> call,
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef DartGA_auth_handler_get_status = int Function(
    ffi.Pointer<GA_auth_handler> call,
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef NativeGA_auth_handler_request_code = ffi.Int Function(
    ffi.Pointer<GA_auth_handler> call, ffi.Pointer<ffi.Char> method);
typedef DartGA_auth_handler_request_code = int Function(
    ffi.Pointer<GA_auth_handler> call, ffi.Pointer<ffi.Char> method);
typedef NativeGA_auth_handler_resolve_code = ffi.Int Function(
    ffi.Pointer<GA_auth_handler> call, ffi.Pointer<ffi.Char> code);
typedef DartGA_auth_handler_resolve_code = int Function(
    ffi.Pointer<GA_auth_handler> call, ffi.Pointer<ffi.Char> code);
typedef NativeGA_auth_handler_call = ffi.Int Function(
    ffi.Pointer<GA_auth_handler> call);
typedef DartGA_auth_handler_call = int Function(
    ffi.Pointer<GA_auth_handler> call);
typedef NativeGA_destroy_auth_handler = ffi.Int Function(
    ffi.Pointer<GA_auth_handler> call);
typedef DartGA_destroy_auth_handler = int Function(
    ffi.Pointer<GA_auth_handler> call);
typedef NativeGA_change_settings_twofactor = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> method,
    ffi.Pointer<GA_json> twofactor_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_change_settings_twofactor = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> method,
    ffi.Pointer<GA_json> twofactor_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_twofactor_reset = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> email,
    ffi.Uint32 is_dispute,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_twofactor_reset = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> email,
    int is_dispute,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_twofactor_undo_reset = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> email,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_twofactor_undo_reset = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> email,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_twofactor_cancel_reset = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_twofactor_cancel_reset = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_twofactor_change_limits = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> limit_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_twofactor_change_limits = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> limit_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_bcur_encode = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_bcur_encode = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_bcur_decode = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_bcur_decode = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_destroy_string = ffi.Void Function(ffi.Pointer<ffi.Char> str);
typedef DartGA_destroy_string = void Function(ffi.Pointer<ffi.Char> str);
typedef NativeGA_get_random_bytes = ffi.Int Function(ffi.Size num_bytes,
    ffi.Pointer<ffi.UnsignedChar> output_bytes, ffi.Size len);
typedef DartGA_get_random_bytes = int Function(
    int num_bytes, ffi.Pointer<ffi.UnsignedChar> output_bytes, int len);
typedef NativeGA_generate_mnemonic = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ffi.Char>> output);
typedef DartGA_generate_mnemonic = int Function(
    ffi.Pointer<ffi.Pointer<ffi.Char>> output);
typedef NativeGA_generate_mnemonic_12 = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ffi.Char>> output);
typedef DartGA_generate_mnemonic_12 = int Function(
    ffi.Pointer<ffi.Pointer<ffi.Char>> output);
typedef NativeGA_validate_mnemonic = ffi.Int Function(
    ffi.Pointer<ffi.Char> mnemonic, ffi.Pointer<ffi.Uint32> valid);
typedef DartGA_validate_mnemonic = int Function(
    ffi.Pointer<ffi.Char> mnemonic, ffi.Pointer<ffi.Uint32> valid);
typedef NativeGA_register_network = ffi.Int Function(
    ffi.Pointer<ffi.Char> name, ffi.Pointer<GA_json> network_details);
typedef DartGA_register_network = int Function(
    ffi.Pointer<ffi.Char> name, ffi.Pointer<GA_json> network_details);
typedef NativeGA_get_networks = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef DartGA_get_networks = int Function(
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef NativeGA_get_uniform_uint32_t = ffi.Int Function(
    ffi.Uint32 upper_bound, ffi.Pointer<ffi.Uint32> output);
typedef DartGA_get_uniform_uint32_t = int Function(
    int upper_bound, ffi.Pointer<ffi.Uint32> output);

abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

final class __darwin_i386_thread_state extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __eax;

  @ffi.UnsignedInt()
  external int __ebx;

  @ffi.UnsignedInt()
  external int __ecx;

  @ffi.UnsignedInt()
  external int __edx;

  @ffi.UnsignedInt()
  external int __edi;

  @ffi.UnsignedInt()
  external int __esi;

  @ffi.UnsignedInt()
  external int __ebp;

  @ffi.UnsignedInt()
  external int __esp;

  @ffi.UnsignedInt()
  external int __ss;

  @ffi.UnsignedInt()
  external int __eflags;

  @ffi.UnsignedInt()
  external int __eip;

  @ffi.UnsignedInt()
  external int __cs;

  @ffi.UnsignedInt()
  external int __ds;

  @ffi.UnsignedInt()
  external int __es;

  @ffi.UnsignedInt()
  external int __fs;

  @ffi.UnsignedInt()
  external int __gs;
}

final class __darwin_fp_control extends ffi.Opaque {}

final class __darwin_fp_status extends ffi.Opaque {}

final class __darwin_mmst_reg extends ffi.Struct {
  @ffi.Array.multi([10])
  external ffi.Array<ffi.Char> __mmst_reg;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Char> __mmst_rsrv;
}

final class __darwin_xmm_reg extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __xmm_reg;
}

final class __darwin_ymm_reg extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __ymm_reg;
}

final class __darwin_zmm_reg extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> __zmm_reg;
}

final class __darwin_opmask_reg extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opmask_reg;
}

final class __darwin_i386_float_state extends ffi.Opaque {}

final class __darwin_i386_avx_state extends ffi.Opaque {}

final class __darwin_i386_avx512_state extends ffi.Opaque {}

final class __darwin_i386_exception_state extends ffi.Struct {
  @__uint16_t()
  external int __trapno;

  @__uint16_t()
  external int __cpu;

  @__uint32_t()
  external int __err;

  @__uint32_t()
  external int __faultvaddr;
}

typedef __uint16_t = ffi.UnsignedShort;
typedef Dart__uint16_t = int;
typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;

final class __darwin_x86_debug_state32 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __dr0;

  @ffi.UnsignedInt()
  external int __dr1;

  @ffi.UnsignedInt()
  external int __dr2;

  @ffi.UnsignedInt()
  external int __dr3;

  @ffi.UnsignedInt()
  external int __dr4;

  @ffi.UnsignedInt()
  external int __dr5;

  @ffi.UnsignedInt()
  external int __dr6;

  @ffi.UnsignedInt()
  external int __dr7;
}

final class __x86_instruction_state extends ffi.Struct {
  @ffi.Int()
  external int __insn_stream_valid_bytes;

  @ffi.Int()
  external int __insn_offset;

  @ffi.Int()
  external int __out_of_synch;

  @ffi.Array.multi([2380])
  external ffi.Array<__uint8_t> __insn_bytes;

  @ffi.Array.multi([64])
  external ffi.Array<__uint8_t> __insn_cacheline;
}

typedef __uint8_t = ffi.UnsignedChar;
typedef Dart__uint8_t = int;

final class __last_branch_record extends ffi.Opaque {}

final class __last_branch_state extends ffi.Opaque {}

final class __x86_pagein_state extends ffi.Struct {
  @ffi.Int()
  external int __pagein_error;
}

final class __darwin_x86_thread_state64 extends ffi.Struct {
  @__uint64_t()
  external int __rax;

  @__uint64_t()
  external int __rbx;

  @__uint64_t()
  external int __rcx;

  @__uint64_t()
  external int __rdx;

  @__uint64_t()
  external int __rdi;

  @__uint64_t()
  external int __rsi;

  @__uint64_t()
  external int __rbp;

  @__uint64_t()
  external int __rsp;

  @__uint64_t()
  external int __r8;

  @__uint64_t()
  external int __r9;

  @__uint64_t()
  external int __r10;

  @__uint64_t()
  external int __r11;

  @__uint64_t()
  external int __r12;

  @__uint64_t()
  external int __r13;

  @__uint64_t()
  external int __r14;

  @__uint64_t()
  external int __r15;

  @__uint64_t()
  external int __rip;

  @__uint64_t()
  external int __rflags;

  @__uint64_t()
  external int __cs;

  @__uint64_t()
  external int __fs;

  @__uint64_t()
  external int __gs;
}

typedef __uint64_t = ffi.UnsignedLongLong;
typedef Dart__uint64_t = int;

final class __darwin_x86_thread_full_state64 extends ffi.Struct {
  external __darwin_x86_thread_state64 __ss64;

  @__uint64_t()
  external int __ds;

  @__uint64_t()
  external int __es;

  @__uint64_t()
  external int __ss;

  @__uint64_t()
  external int __gsbase;
}

final class __darwin_x86_float_state64 extends ffi.Opaque {}

final class __darwin_x86_avx_state64 extends ffi.Opaque {}

final class __darwin_x86_avx512_state64 extends ffi.Opaque {}

final class __darwin_x86_exception_state64 extends ffi.Struct {
  @__uint16_t()
  external int __trapno;

  @__uint16_t()
  external int __cpu;

  @__uint32_t()
  external int __err;

  @__uint64_t()
  external int __faultvaddr;
}

final class __darwin_x86_debug_state64 extends ffi.Struct {
  @__uint64_t()
  external int __dr0;

  @__uint64_t()
  external int __dr1;

  @__uint64_t()
  external int __dr2;

  @__uint64_t()
  external int __dr3;

  @__uint64_t()
  external int __dr4;

  @__uint64_t()
  external int __dr5;

  @__uint64_t()
  external int __dr6;

  @__uint64_t()
  external int __dr7;
}

final class __darwin_x86_cpmu_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __ctrs;
}

final class __darwin_mcontext32 extends ffi.Opaque {}

final class __darwin_mcontext_avx32 extends ffi.Opaque {}

final class __darwin_mcontext_avx512_32 extends ffi.Opaque {}

final class __darwin_mcontext64 extends ffi.Opaque {}

final class __darwin_mcontext64_full extends ffi.Opaque {}

final class __darwin_mcontext_avx64 extends ffi.Opaque {}

final class __darwin_mcontext_avx64_full extends ffi.Opaque {}

final class __darwin_mcontext_avx512_64 extends ffi.Opaque {}

final class __darwin_mcontext_avx512_64_full extends ffi.Opaque {}

final class __darwin_sigaltstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @__darwin_size_t()
  external int ss_size;

  @ffi.Int()
  external int ss_flags;
}

typedef __darwin_size_t = ffi.UnsignedLong;
typedef Dart__darwin_size_t = int;

final class __darwin_ucontext extends ffi.Struct {
  @ffi.Int()
  external int uc_onstack;

  @__darwin_sigset_t()
  external int uc_sigmask;

  external __darwin_sigaltstack uc_stack;

  external ffi.Pointer<__darwin_ucontext> uc_link;

  @__darwin_size_t()
  external int uc_mcsize;

  external ffi.Pointer<__darwin_mcontext64> uc_mcontext;
}

typedef __darwin_sigset_t = __uint32_t;

final class sigval extends ffi.Union {
  @ffi.Int()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

final class sigevent extends ffi.Struct {
  @ffi.Int()
  external int sigev_notify;

  @ffi.Int()
  external int sigev_signo;

  external sigval sigev_value;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(sigval)>>
      sigev_notify_function;

  external ffi.Pointer<pthread_attr_t> sigev_notify_attributes;
}

typedef pthread_attr_t = __darwin_pthread_attr_t;
typedef __darwin_pthread_attr_t = _opaque_pthread_attr_t;

final class __siginfo extends ffi.Struct {
  @ffi.Int()
  external int si_signo;

  @ffi.Int()
  external int si_errno;

  @ffi.Int()
  external int si_code;

  @pid_t()
  external int si_pid;

  @uid_t()
  external int si_uid;

  @ffi.Int()
  external int si_status;

  external ffi.Pointer<ffi.Void> si_addr;

  external sigval si_value;

  @ffi.Long()
  external int si_band;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedLong> __pad;
}

typedef pid_t = __darwin_pid_t;
typedef __darwin_pid_t = __int32_t;
typedef uid_t = __darwin_uid_t;
typedef __darwin_uid_t = __uint32_t;

final class sigvec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      sv_handler;

  @ffi.Int()
  external int sv_mask;

  @ffi.Int()
  external int sv_flags;
}

final class sigstack extends ffi.Struct {
  external ffi.Pointer<ffi.Char> ss_sp;

  @ffi.Int()
  external int ss_onstack;
}

typedef NativeSignal
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
        ffi.Int arg0,
        ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1);
typedef DartSignal
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
        int arg0,
        ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1);

final class timeval extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @__darwin_suseconds_t()
  external int tv_usec;
}

typedef __darwin_time_t = ffi.Long;
typedef Dart__darwin_time_t = int;
typedef __darwin_suseconds_t = __int32_t;

final class rusage extends ffi.Struct {
  external timeval ru_utime;

  external timeval ru_stime;

  @ffi.Long()
  external int ru_maxrss;

  @ffi.Long()
  external int ru_ixrss;

  @ffi.Long()
  external int ru_idrss;

  @ffi.Long()
  external int ru_isrss;

  @ffi.Long()
  external int ru_minflt;

  @ffi.Long()
  external int ru_majflt;

  @ffi.Long()
  external int ru_nswap;

  @ffi.Long()
  external int ru_inblock;

  @ffi.Long()
  external int ru_oublock;

  @ffi.Long()
  external int ru_msgsnd;

  @ffi.Long()
  external int ru_msgrcv;

  @ffi.Long()
  external int ru_nsignals;

  @ffi.Long()
  external int ru_nvcsw;

  @ffi.Long()
  external int ru_nivcsw;
}

final class rusage_info_v0 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;
}

final class rusage_info_v1 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;
}

final class rusage_info_v2 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;
}

final class rusage_info_v3 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;
}

final class rusage_info_v4 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;
}

final class rusage_info_v5 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;
}

final class rusage_info_v6 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;

  @ffi.Uint64()
  external int ri_user_ptime;

  @ffi.Uint64()
  external int ri_system_ptime;

  @ffi.Uint64()
  external int ri_pinstructions;

  @ffi.Uint64()
  external int ri_pcycles;

  @ffi.Uint64()
  external int ri_energy_nj;

  @ffi.Uint64()
  external int ri_penergy_nj;

  @ffi.Uint64()
  external int ri_secure_time_in_system;

  @ffi.Uint64()
  external int ri_secure_ptime_in_system;

  @ffi.Uint64()
  external int ri_neural_footprint;

  @ffi.Uint64()
  external int ri_lifetime_max_neural_footprint;

  @ffi.Uint64()
  external int ri_interval_max_neural_footprint;

  @ffi.Array.multi([9])
  external ffi.Array<ffi.Uint64> ri_reserved;
}

final class rlimit extends ffi.Struct {
  @rlim_t()
  external int rlim_cur;

  @rlim_t()
  external int rlim_max;
}

typedef rlim_t = __uint64_t;

final class proc_rlimit_control_wakeupmon extends ffi.Struct {
  @ffi.Uint32()
  external int wm_flags;

  @ffi.Int32()
  external int wm_rate;
}

typedef id_t = __darwin_id_t;
typedef __darwin_id_t = __uint32_t;
typedef NativeGetpriority = ffi.Int Function(ffi.Int arg0, id_t arg1);
typedef DartGetpriority = int Function(int arg0, int arg1);
typedef NativeGetiopolicy_np = ffi.Int Function(ffi.Int arg0, ffi.Int arg1);
typedef DartGetiopolicy_np = int Function(int arg0, int arg1);
typedef NativeGetrlimit = ffi.Int Function(
    ffi.Int arg0, ffi.Pointer<rlimit> arg1);
typedef DartGetrlimit = int Function(int arg0, ffi.Pointer<rlimit> arg1);
typedef NativeGetrusage = ffi.Int Function(
    ffi.Int arg0, ffi.Pointer<rusage> arg1);
typedef DartGetrusage = int Function(int arg0, ffi.Pointer<rusage> arg1);
typedef NativeSetpriority = ffi.Int Function(
    ffi.Int arg0, id_t arg1, ffi.Int arg2);
typedef DartSetpriority = int Function(int arg0, int arg1, int arg2);
typedef NativeSetiopolicy_np = ffi.Int Function(
    ffi.Int arg0, ffi.Int arg1, ffi.Int arg2);
typedef DartSetiopolicy_np = int Function(int arg0, int arg1, int arg2);
typedef NativeSetrlimit = ffi.Int Function(
    ffi.Int arg0, ffi.Pointer<rlimit> arg1);
typedef DartSetrlimit = int Function(int arg0, ffi.Pointer<rlimit> arg1);

final class wait extends ffi.Opaque {}

typedef NativeWait = pid_t Function(ffi.Pointer<ffi.Int> arg0);
typedef DartWait = int Function(ffi.Pointer<ffi.Int> arg0);
typedef NativeWaitpid = pid_t Function(
    pid_t arg0, ffi.Pointer<ffi.Int> arg1, ffi.Int arg2);
typedef DartWaitpid = int Function(
    int arg0, ffi.Pointer<ffi.Int> arg1, int arg2);
typedef siginfo_t = __siginfo;
typedef NativeWaitid = ffi.Int Function(
    ffi.Int32 arg0, id_t arg1, ffi.Pointer<siginfo_t> arg2, ffi.Int arg3);
typedef DartWaitid = int Function(
    int arg0, int arg1, ffi.Pointer<siginfo_t> arg2, int arg3);
typedef NativeWait3 = pid_t Function(
    ffi.Pointer<ffi.Int> arg0, ffi.Int arg1, ffi.Pointer<rusage> arg2);
typedef DartWait3 = int Function(
    ffi.Pointer<ffi.Int> arg0, int arg1, ffi.Pointer<rusage> arg2);
typedef NativeWait4 = pid_t Function(pid_t arg0, ffi.Pointer<ffi.Int> arg1,
    ffi.Int arg2, ffi.Pointer<rusage> arg3);
typedef DartWait4 = int Function(
    int arg0, ffi.Pointer<ffi.Int> arg1, int arg2, ffi.Pointer<rusage> arg3);
typedef NativeAlloca = ffi.Pointer<ffi.Void> Function(ffi.Size arg0);
typedef DartAlloca = ffi.Pointer<ffi.Void> Function(int arg0);

final class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

final class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

final class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

typedef malloc_type_id_t = ffi.UnsignedLongLong;
typedef Dartmalloc_type_id_t = int;
typedef NativeMalloc_type_malloc = ffi.Pointer<ffi.Void> Function(
    ffi.Size size, malloc_type_id_t type_id);
typedef DartMalloc_type_malloc = ffi.Pointer<ffi.Void> Function(
    int size, int type_id);
typedef NativeMalloc_type_calloc = ffi.Pointer<ffi.Void> Function(
    ffi.Size count, ffi.Size size, malloc_type_id_t type_id);
typedef DartMalloc_type_calloc = ffi.Pointer<ffi.Void> Function(
    int count, int size, int type_id);
typedef NativeMalloc_type_free = ffi.Void Function(
    ffi.Pointer<ffi.Void> ptr, malloc_type_id_t type_id);
typedef DartMalloc_type_free = void Function(
    ffi.Pointer<ffi.Void> ptr, int type_id);
typedef NativeMalloc_type_realloc = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> ptr, ffi.Size size, malloc_type_id_t type_id);
typedef DartMalloc_type_realloc = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> ptr, int size, int type_id);
typedef NativeMalloc_type_valloc = ffi.Pointer<ffi.Void> Function(
    ffi.Size size, malloc_type_id_t type_id);
typedef DartMalloc_type_valloc = ffi.Pointer<ffi.Void> Function(
    int size, int type_id);
typedef NativeMalloc_type_aligned_alloc = ffi.Pointer<ffi.Void> Function(
    ffi.Size alignment, ffi.Size size, malloc_type_id_t type_id);
typedef DartMalloc_type_aligned_alloc = ffi.Pointer<ffi.Void> Function(
    int alignment, int size, int type_id);
typedef NativeMalloc_type_posix_memalign = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ffi.Void>> memptr,
    ffi.Size alignment,
    ffi.Size size,
    malloc_type_id_t type_id);
typedef DartMalloc_type_posix_memalign = int Function(
    ffi.Pointer<ffi.Pointer<ffi.Void>> memptr,
    int alignment,
    int size,
    int type_id);

final class _malloc_zone_t extends ffi.Opaque {}

typedef malloc_zone_t = _malloc_zone_t;
typedef NativeMalloc_type_zone_malloc = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<malloc_zone_t> zone, ffi.Size size, malloc_type_id_t type_id);
typedef DartMalloc_type_zone_malloc = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<malloc_zone_t> zone, int size, int type_id);
typedef NativeMalloc_type_zone_calloc = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<malloc_zone_t> zone,
    ffi.Size count,
    ffi.Size size,
    malloc_type_id_t type_id);
typedef DartMalloc_type_zone_calloc = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<malloc_zone_t> zone, int count, int size, int type_id);
typedef NativeMalloc_type_zone_free = ffi.Void Function(
    ffi.Pointer<malloc_zone_t> zone,
    ffi.Pointer<ffi.Void> ptr,
    malloc_type_id_t type_id);
typedef DartMalloc_type_zone_free = void Function(
    ffi.Pointer<malloc_zone_t> zone, ffi.Pointer<ffi.Void> ptr, int type_id);
typedef NativeMalloc_type_zone_realloc = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<malloc_zone_t> zone,
    ffi.Pointer<ffi.Void> ptr,
    ffi.Size size,
    malloc_type_id_t type_id);
typedef DartMalloc_type_zone_realloc = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<malloc_zone_t> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int type_id);
typedef NativeMalloc_type_zone_valloc = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<malloc_zone_t> zone, ffi.Size size, malloc_type_id_t type_id);
typedef DartMalloc_type_zone_valloc = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<malloc_zone_t> zone, int size, int type_id);
typedef NativeMalloc_type_zone_memalign = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<malloc_zone_t> zone,
    ffi.Size alignment,
    ffi.Size size,
    malloc_type_id_t type_id);
typedef DartMalloc_type_zone_memalign = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<malloc_zone_t> zone, int alignment, int size, int type_id);
typedef NativeMalloc = ffi.Pointer<ffi.Void> Function(ffi.Size __size);
typedef DartMalloc = ffi.Pointer<ffi.Void> Function(int __size);
typedef NativeCalloc = ffi.Pointer<ffi.Void> Function(
    ffi.Size __count, ffi.Size __size);
typedef DartCalloc = ffi.Pointer<ffi.Void> Function(int __count, int __size);
typedef NativeFree = ffi.Void Function(ffi.Pointer<ffi.Void> arg0);
typedef DartFree = void Function(ffi.Pointer<ffi.Void> arg0);
typedef NativeRealloc = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> __ptr, ffi.Size __size);
typedef DartRealloc = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> __ptr, int __size);
typedef NativeReallocf = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> __ptr, ffi.Size __size);
typedef DartReallocf = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> __ptr, int __size);
typedef NativeValloc = ffi.Pointer<ffi.Void> Function(ffi.Size __size);
typedef DartValloc = ffi.Pointer<ffi.Void> Function(int __size);
typedef NativeAligned_alloc = ffi.Pointer<ffi.Void> Function(
    ffi.Size __alignment, ffi.Size __size);
typedef DartAligned_alloc = ffi.Pointer<ffi.Void> Function(
    int __alignment, int __size);
typedef NativePosix_memalign = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    ffi.Size __alignment,
    ffi.Size __size);
typedef DartPosix_memalign = int Function(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr, int __alignment, int __size);
typedef NativeAbort = ffi.Void Function();
typedef DartAbort = void Function();
typedef NativeAbs = ffi.Int Function(ffi.Int arg0);
typedef DartAbs = int Function(int arg0);
typedef NativeAtexit = ffi.Int Function(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0);
typedef DartAtexit = int Function(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0);
typedef NativeAt_quick_exit = ffi.Int Function(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0);
typedef DartAt_quick_exit = int Function(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0);
typedef NativeAtof = ffi.Double Function(ffi.Pointer<ffi.Char> arg0);
typedef DartAtof = double Function(ffi.Pointer<ffi.Char> arg0);
typedef NativeAtoi = ffi.Int Function(ffi.Pointer<ffi.Char> arg0);
typedef DartAtoi = int Function(ffi.Pointer<ffi.Char> arg0);
typedef NativeAtol = ffi.Long Function(ffi.Pointer<ffi.Char> arg0);
typedef DartAtol = int Function(ffi.Pointer<ffi.Char> arg0);
typedef NativeAtoll = ffi.LongLong Function(ffi.Pointer<ffi.Char> arg0);
typedef DartAtoll = int Function(ffi.Pointer<ffi.Char> arg0);
typedef NativeBsearch = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    ffi.Size __nel,
    ffi.Size __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar);
typedef DartBsearch = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar);
typedef NativeDiv = div_t Function(ffi.Int arg0, ffi.Int arg1);
typedef DartDiv = div_t Function(int arg0, int arg1);
typedef NativeExit = ffi.Void Function(ffi.Int arg0);
typedef DartExit = void Function(int arg0);
typedef NativeGetenv = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> arg0);
typedef DartGetenv = ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char> arg0);
typedef NativeLabs = ffi.Long Function(ffi.Long arg0);
typedef DartLabs = int Function(int arg0);
typedef NativeLdiv = ldiv_t Function(ffi.Long arg0, ffi.Long arg1);
typedef DartLdiv = ldiv_t Function(int arg0, int arg1);
typedef NativeLlabs = ffi.LongLong Function(ffi.LongLong arg0);
typedef DartLlabs = int Function(int arg0);
typedef NativeLldiv = lldiv_t Function(ffi.LongLong arg0, ffi.LongLong arg1);
typedef DartLldiv = lldiv_t Function(int arg0, int arg1);
typedef NativeMblen = ffi.Int Function(ffi.Pointer<ffi.Char> __s, ffi.Size __n);
typedef DartMblen = int Function(ffi.Pointer<ffi.Char> __s, int __n);
typedef NativeMbstowcs = ffi.Size Function(
    ffi.Pointer<ffi.WChar> arg0, ffi.Pointer<ffi.Char> arg1, ffi.Size arg2);
typedef DartMbstowcs = int Function(
    ffi.Pointer<ffi.WChar> arg0, ffi.Pointer<ffi.Char> arg1, int arg2);
typedef NativeMbtowc = ffi.Int Function(
    ffi.Pointer<ffi.WChar> arg0, ffi.Pointer<ffi.Char> arg1, ffi.Size arg2);
typedef DartMbtowc = int Function(
    ffi.Pointer<ffi.WChar> arg0, ffi.Pointer<ffi.Char> arg1, int arg2);
typedef NativeQsort = ffi.Void Function(
    ffi.Pointer<ffi.Void> __base,
    ffi.Size __nel,
    ffi.Size __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar);
typedef DartQsort = void Function(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar);
typedef NativeQuick_exit = ffi.Void Function(ffi.Int arg0);
typedef DartQuick_exit = void Function(int arg0);
typedef NativeRand = ffi.Int Function();
typedef DartRand = int Function();
typedef NativeSrand = ffi.Void Function(ffi.UnsignedInt arg0);
typedef DartSrand = void Function(int arg0);
typedef NativeStrtod = ffi.Double Function(
    ffi.Pointer<ffi.Char> arg0, ffi.Pointer<ffi.Pointer<ffi.Char>> arg1);
typedef DartStrtod = double Function(
    ffi.Pointer<ffi.Char> arg0, ffi.Pointer<ffi.Pointer<ffi.Char>> arg1);
typedef NativeStrtof = ffi.Float Function(
    ffi.Pointer<ffi.Char> arg0, ffi.Pointer<ffi.Pointer<ffi.Char>> arg1);
typedef DartStrtof = double Function(
    ffi.Pointer<ffi.Char> arg0, ffi.Pointer<ffi.Pointer<ffi.Char>> arg1);
typedef NativeStrtol = ffi.Long Function(ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr, ffi.Int __base);
typedef DartStrtol = int Function(ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr, int __base);
typedef NativeStrtoll = ffi.LongLong Function(ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr, ffi.Int __base);
typedef DartStrtoll = int Function(ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr, int __base);
typedef NativeStrtoul = ffi.UnsignedLong Function(ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr, ffi.Int __base);
typedef DartStrtoul = int Function(ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr, int __base);
typedef NativeStrtoull = ffi.UnsignedLongLong Function(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    ffi.Int __base);
typedef DartStrtoull = int Function(ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr, int __base);
typedef NativeSystem = ffi.Int Function(ffi.Pointer<ffi.Char> arg0);
typedef DartSystem = int Function(ffi.Pointer<ffi.Char> arg0);
typedef NativeWcstombs = ffi.Size Function(
    ffi.Pointer<ffi.Char> arg0, ffi.Pointer<ffi.WChar> arg1, ffi.Size arg2);
typedef DartWcstombs = int Function(
    ffi.Pointer<ffi.Char> arg0, ffi.Pointer<ffi.WChar> arg1, int arg2);
typedef NativeWctomb = ffi.Int Function(
    ffi.Pointer<ffi.Char> arg0, ffi.WChar arg1);
typedef DartWctomb = int Function(ffi.Pointer<ffi.Char> arg0, int arg1);
typedef Native_Exit = ffi.Void Function(ffi.Int arg0);
typedef Dart_Exit = void Function(int arg0);
typedef NativeA64l = ffi.Long Function(ffi.Pointer<ffi.Char> arg0);
typedef DartA64l = int Function(ffi.Pointer<ffi.Char> arg0);
typedef NativeDrand48 = ffi.Double Function();
typedef DartDrand48 = double Function();
typedef NativeEcvt = ffi.Pointer<ffi.Char> Function(ffi.Double arg0,
    ffi.Int arg1, ffi.Pointer<ffi.Int> arg2, ffi.Pointer<ffi.Int> arg3);
typedef DartEcvt = ffi.Pointer<ffi.Char> Function(double arg0, int arg1,
    ffi.Pointer<ffi.Int> arg2, ffi.Pointer<ffi.Int> arg3);
typedef NativeErand48 = ffi.Double Function(
    ffi.Pointer<ffi.UnsignedShort> arg0);
typedef DartErand48 = double Function(ffi.Pointer<ffi.UnsignedShort> arg0);
typedef NativeFcvt = ffi.Pointer<ffi.Char> Function(ffi.Double arg0,
    ffi.Int arg1, ffi.Pointer<ffi.Int> arg2, ffi.Pointer<ffi.Int> arg3);
typedef DartFcvt = ffi.Pointer<ffi.Char> Function(double arg0, int arg1,
    ffi.Pointer<ffi.Int> arg2, ffi.Pointer<ffi.Int> arg3);
typedef NativeGcvt = ffi.Pointer<ffi.Char> Function(
    ffi.Double arg0, ffi.Int arg1, ffi.Pointer<ffi.Char> arg2);
typedef DartGcvt = ffi.Pointer<ffi.Char> Function(
    double arg0, int arg1, ffi.Pointer<ffi.Char> arg2);
typedef NativeGetsubopt = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2);
typedef DartGetsubopt = int Function(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2);
typedef NativeGrantpt = ffi.Int Function(ffi.Int arg0);
typedef DartGrantpt = int Function(int arg0);
typedef NativeInitstate = ffi.Pointer<ffi.Char> Function(
    ffi.UnsignedInt arg0, ffi.Pointer<ffi.Char> arg1, ffi.Size arg2);
typedef DartInitstate = ffi.Pointer<ffi.Char> Function(
    int arg0, ffi.Pointer<ffi.Char> arg1, int arg2);
typedef NativeJrand48 = ffi.Long Function(ffi.Pointer<ffi.UnsignedShort> arg0);
typedef DartJrand48 = int Function(ffi.Pointer<ffi.UnsignedShort> arg0);
typedef NativeL64a = ffi.Pointer<ffi.Char> Function(ffi.Long arg0);
typedef DartL64a = ffi.Pointer<ffi.Char> Function(int arg0);
typedef NativeLcong48 = ffi.Void Function(ffi.Pointer<ffi.UnsignedShort> arg0);
typedef DartLcong48 = void Function(ffi.Pointer<ffi.UnsignedShort> arg0);
typedef NativeLrand48 = ffi.Long Function();
typedef DartLrand48 = int Function();
typedef NativeMktemp = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> arg0);
typedef DartMktemp = ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char> arg0);
typedef NativeMkstemp = ffi.Int Function(ffi.Pointer<ffi.Char> arg0);
typedef DartMkstemp = int Function(ffi.Pointer<ffi.Char> arg0);
typedef NativeMrand48 = ffi.Long Function();
typedef DartMrand48 = int Function();
typedef NativeNrand48 = ffi.Long Function(ffi.Pointer<ffi.UnsignedShort> arg0);
typedef DartNrand48 = int Function(ffi.Pointer<ffi.UnsignedShort> arg0);
typedef NativePosix_openpt = ffi.Int Function(ffi.Int arg0);
typedef DartPosix_openpt = int Function(int arg0);
typedef NativePtsname = ffi.Pointer<ffi.Char> Function(ffi.Int arg0);
typedef DartPtsname = ffi.Pointer<ffi.Char> Function(int arg0);
typedef NativePtsname_r = ffi.Int Function(
    ffi.Int fildes, ffi.Pointer<ffi.Char> buffer, ffi.Size buflen);
typedef DartPtsname_r = int Function(
    int fildes, ffi.Pointer<ffi.Char> buffer, int buflen);
typedef NativePutenv = ffi.Int Function(ffi.Pointer<ffi.Char> arg0);
typedef DartPutenv = int Function(ffi.Pointer<ffi.Char> arg0);
typedef NativeRandom = ffi.Long Function();
typedef DartRandom = int Function();
typedef NativeRand_r = ffi.Int Function(ffi.Pointer<ffi.UnsignedInt> arg0);
typedef DartRand_r = int Function(ffi.Pointer<ffi.UnsignedInt> arg0);
typedef NativeRealpath = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> arg0, ffi.Pointer<ffi.Char> arg1);
typedef DartRealpath = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> arg0, ffi.Pointer<ffi.Char> arg1);
typedef NativeSeed48 = ffi.Pointer<ffi.UnsignedShort> Function(
    ffi.Pointer<ffi.UnsignedShort> arg0);
typedef DartSeed48 = ffi.Pointer<ffi.UnsignedShort> Function(
    ffi.Pointer<ffi.UnsignedShort> arg0);
typedef NativeSetenv = ffi.Int Function(ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value, ffi.Int __overwrite);
typedef DartSetenv = int Function(ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value, int __overwrite);
typedef NativeSetkey = ffi.Void Function(ffi.Pointer<ffi.Char> arg0);
typedef DartSetkey = void Function(ffi.Pointer<ffi.Char> arg0);
typedef NativeSetstate = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> arg0);
typedef DartSetstate = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> arg0);
typedef NativeSrand48 = ffi.Void Function(ffi.Long arg0);
typedef DartSrand48 = void Function(int arg0);
typedef NativeSrandom = ffi.Void Function(ffi.UnsignedInt arg0);
typedef DartSrandom = void Function(int arg0);
typedef NativeUnlockpt = ffi.Int Function(ffi.Int arg0);
typedef DartUnlockpt = int Function(int arg0);
typedef NativeUnsetenv = ffi.Int Function(ffi.Pointer<ffi.Char> arg0);
typedef DartUnsetenv = int Function(ffi.Pointer<ffi.Char> arg0);
typedef NativeArc4random = ffi.Uint32 Function();
typedef DartArc4random = int Function();
typedef NativeArc4random_addrandom = ffi.Void Function(
    ffi.Pointer<ffi.UnsignedChar> arg0, ffi.Int arg1);
typedef DartArc4random_addrandom = void Function(
    ffi.Pointer<ffi.UnsignedChar> arg0, int arg1);
typedef NativeArc4random_buf = ffi.Void Function(
    ffi.Pointer<ffi.Void> __buf, ffi.Size __nbytes);
typedef DartArc4random_buf = void Function(
    ffi.Pointer<ffi.Void> __buf, int __nbytes);
typedef NativeArc4random_stir = ffi.Void Function();
typedef DartArc4random_stir = void Function();
typedef NativeArc4random_uniform = ffi.Uint32 Function(
    ffi.Uint32 __upper_bound);
typedef DartArc4random_uniform = int Function(int __upper_bound);
typedef NativeCgetcap = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> arg0, ffi.Pointer<ffi.Char> arg1, ffi.Int arg2);
typedef DartCgetcap = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> arg0, ffi.Pointer<ffi.Char> arg1, int arg2);
typedef NativeCgetclose = ffi.Int Function();
typedef DartCgetclose = int Function();
typedef NativeCgetent = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Char> arg2);
typedef DartCgetent = int Function(ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1, ffi.Pointer<ffi.Char> arg2);
typedef NativeCgetfirst = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1);
typedef DartCgetfirst = int Function(ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1);
typedef NativeCgetmatch = ffi.Int Function(
    ffi.Pointer<ffi.Char> arg0, ffi.Pointer<ffi.Char> arg1);
typedef DartCgetmatch = int Function(
    ffi.Pointer<ffi.Char> arg0, ffi.Pointer<ffi.Char> arg1);
typedef NativeCgetnext = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1);
typedef DartCgetnext = int Function(ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1);
typedef NativeCgetnum = ffi.Int Function(ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1, ffi.Pointer<ffi.Long> arg2);
typedef DartCgetnum = int Function(ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1, ffi.Pointer<ffi.Long> arg2);
typedef NativeCgetset = ffi.Int Function(ffi.Pointer<ffi.Char> arg0);
typedef DartCgetset = int Function(ffi.Pointer<ffi.Char> arg0);
typedef NativeCgetstr = ffi.Int Function(ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1, ffi.Pointer<ffi.Pointer<ffi.Char>> arg2);
typedef DartCgetstr = int Function(ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1, ffi.Pointer<ffi.Pointer<ffi.Char>> arg2);
typedef NativeCgetustr = ffi.Int Function(ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1, ffi.Pointer<ffi.Pointer<ffi.Char>> arg2);
typedef DartCgetustr = int Function(ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1, ffi.Pointer<ffi.Pointer<ffi.Char>> arg2);
typedef NativeDaemon = ffi.Int Function(ffi.Int arg0, ffi.Int arg1);
typedef DartDaemon = int Function(int arg0, int arg1);
typedef dev_t = __darwin_dev_t;
typedef __darwin_dev_t = __int32_t;
typedef mode_t = __darwin_mode_t;
typedef __darwin_mode_t = __uint16_t;
typedef NativeDevname = ffi.Pointer<ffi.Char> Function(dev_t arg0, mode_t arg1);
typedef DartDevname = ffi.Pointer<ffi.Char> Function(int arg0, int arg1);
typedef NativeDevname_r = ffi.Pointer<ffi.Char> Function(
    dev_t arg0, mode_t arg1, ffi.Pointer<ffi.Char> buf, ffi.Int len);
typedef DartDevname_r = ffi.Pointer<ffi.Char> Function(
    int arg0, int arg1, ffi.Pointer<ffi.Char> buf, int len);
typedef NativeGetbsize = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Int> arg0, ffi.Pointer<ffi.Long> arg1);
typedef DartGetbsize = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Int> arg0, ffi.Pointer<ffi.Long> arg1);
typedef NativeGetloadavg = ffi.Int Function(
    ffi.Pointer<ffi.Double> arg0, ffi.Int arg1);
typedef DartGetloadavg = int Function(ffi.Pointer<ffi.Double> arg0, int arg1);
typedef NativeGetprogname = ffi.Pointer<ffi.Char> Function();
typedef DartGetprogname = ffi.Pointer<ffi.Char> Function();
typedef NativeSetprogname = ffi.Void Function(ffi.Pointer<ffi.Char> arg0);
typedef DartSetprogname = void Function(ffi.Pointer<ffi.Char> arg0);
typedef NativeHeapsort = ffi.Int Function(
    ffi.Pointer<ffi.Void> __base,
    ffi.Size __nel,
    ffi.Size __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar);
typedef DartHeapsort = int Function(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar);
typedef NativeMergesort = ffi.Int Function(
    ffi.Pointer<ffi.Void> __base,
    ffi.Size __nel,
    ffi.Size __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar);
typedef DartMergesort = int Function(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar);
typedef NativePsort = ffi.Void Function(
    ffi.Pointer<ffi.Void> __base,
    ffi.Size __nel,
    ffi.Size __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar);
typedef DartPsort = void Function(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar);
typedef NativePsort_r = ffi.Void Function(
    ffi.Pointer<ffi.Void> __base,
    ffi.Size __nel,
    ffi.Size __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar);
typedef DartPsort_r = void Function(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar);
typedef NativeQsort_r = ffi.Void Function(
    ffi.Pointer<ffi.Void> __base,
    ffi.Size __nel,
    ffi.Size __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar);
typedef DartQsort_r = void Function(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar);
typedef NativeRadixsort = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    ffi.Int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    ffi.UnsignedInt __endbyte);
typedef DartRadixsort = int Function(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte);
typedef NativeRpmatch = ffi.Int Function(ffi.Pointer<ffi.Char> arg0);
typedef DartRpmatch = int Function(ffi.Pointer<ffi.Char> arg0);
typedef NativeSradixsort = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    ffi.Int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    ffi.UnsignedInt __endbyte);
typedef DartSradixsort = int Function(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte);
typedef NativeSranddev = ffi.Void Function();
typedef DartSranddev = void Function();
typedef NativeSrandomdev = ffi.Void Function();
typedef DartSrandomdev = void Function();
typedef NativeStrtonum = ffi.LongLong Function(
    ffi.Pointer<ffi.Char> __numstr,
    ffi.LongLong __minval,
    ffi.LongLong __maxval,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __errstrp);
typedef DartStrtonum = int Function(ffi.Pointer<ffi.Char> __numstr,
    int __minval, int __maxval, ffi.Pointer<ffi.Pointer<ffi.Char>> __errstrp);
typedef NativeStrtoq = ffi.LongLong Function(ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr, ffi.Int __base);
typedef DartStrtoq = int Function(ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr, int __base);
typedef NativeStrtouq = ffi.UnsignedLongLong Function(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    ffi.Int __base);
typedef DartStrtouq = int Function(ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr, int __base);

final class Option______c_char extends ffi.Opaque {}

final class TransactionType extends ffi.Opaque {}

final class TxResult extends ffi.Struct {
  external ffi.Pointer<ffi.Char> tx_ptr;

  external ffi.Pointer<ffi.Char> error_msg;
}

final class UtxoFFI extends ffi.Struct {
  external ffi.Pointer<ffi.Char> txid;

  @ffi.Uint32()
  external int vout;

  external ffi.Pointer<ffi.Char> script_pub_key;

  external ffi.Pointer<ffi.Char> asset_id;

  @ffi.Uint64()
  external int value;

  external ffi.Pointer<ffi.Char> asset_bf;

  external ffi.Pointer<ffi.Char> value_bf;

  external ffi.Pointer<ffi.Char> asset_commitment;

  external ffi.Pointer<ffi.Char> value_commitment;
}

typedef NativeValidate_submarine = ffi.Int32 Function(
    ffi.Pointer<ffi.Char> preimage_hash,
    ffi.Pointer<ffi.Char> claim_public_key,
    ffi.Pointer<ffi.Char> refund_public_key,
    ffi.Uint32 timeout_block_height,
    ffi.Pointer<ffi.Char> lockup_address,
    ffi.Pointer<ffi.Char> redeem_script,
    ffi.Pointer<ffi.Char> blinding_key);
typedef DartValidate_submarine = int Function(
    ffi.Pointer<ffi.Char> preimage_hash,
    ffi.Pointer<ffi.Char> claim_public_key,
    ffi.Pointer<ffi.Char> refund_public_key,
    int timeout_block_height,
    ffi.Pointer<ffi.Char> lockup_address,
    ffi.Pointer<ffi.Char> redeem_script,
    ffi.Pointer<ffi.Char> blinding_key);
typedef NativeExtract_claim_public_key = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> comparison_script);
typedef DartExtract_claim_public_key = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> comparison_script);
typedef NativeCreate_and_sign_claim_transaction
    = ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<ffi.Char> redeem_script,
        ffi.Pointer<ffi.Char> blinding_key,
        ffi.Pointer<ffi.Char> onchain_address,
        ffi.Pointer<ffi.Char> private_key,
        ffi.Pointer<ffi.Char> preimage,
        ffi.Pointer<ffi.Char> tx,
        ffi.Uint64 fees);
typedef DartCreate_and_sign_claim_transaction = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> redeem_script,
    ffi.Pointer<ffi.Char> blinding_key,
    ffi.Pointer<ffi.Char> onchain_address,
    ffi.Pointer<ffi.Char> private_key,
    ffi.Pointer<ffi.Char> preimage,
    ffi.Pointer<ffi.Char> tx,
    int fees);
typedef NativeCreate_and_sign_refund_transaction
    = ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<ffi.Char> redeem_script,
        ffi.Pointer<ffi.Char> blinding_key,
        ffi.Pointer<ffi.Char> onchain_address,
        ffi.Pointer<ffi.Char> private_key,
        ffi.Pointer<ffi.Char> tx,
        ffi.Uint64 fees);
typedef DartCreate_and_sign_refund_transaction = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> redeem_script,
    ffi.Pointer<ffi.Char> blinding_key,
    ffi.Pointer<ffi.Char> onchain_address,
    ffi.Pointer<ffi.Char> private_key,
    ffi.Pointer<ffi.Char> tx,
    int fees);
typedef NativeGet_key_pair = ffi.Pointer<ffi.Char> Function();
typedef DartGet_key_pair = ffi.Pointer<ffi.Char> Function();
typedef NativeSign_message_schnorr = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> message, ffi.Pointer<ffi.Char> private_key);
typedef DartSign_message_schnorr = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> message, ffi.Pointer<ffi.Char> private_key);
typedef NativeVerify_signature_schnorr = ffi.Int32 Function(
    ffi.Pointer<ffi.Char> signature,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Char> public_key);
typedef DartVerify_signature_schnorr = int Function(
    ffi.Pointer<ffi.Char> signature,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Char> public_key);
typedef NativeCreate_taxi_transaction = TxResult Function(
    ffi.Uint64 send_amount,
    ffi.Pointer<ffi.Char> send_address,
    ffi.Pointer<ffi.Char> change_address,
    ffi.Pointer<UtxoFFI> utxos,
    ffi.UintPtr utxos_len,
    ffi.Pointer<ffi.Char> user_agent,
    ffi.Pointer<ffi.Char> api_key,
    ffi.Bool subtract_fee_from_amount,
    ffi.Bool is_lowball,
    ffi.Bool is_testnet);
typedef DartCreate_taxi_transaction = TxResult Function(
    int send_amount,
    ffi.Pointer<ffi.Char> send_address,
    ffi.Pointer<ffi.Char> change_address,
    ffi.Pointer<UtxoFFI> utxos,
    int utxos_len,
    ffi.Pointer<ffi.Char> user_agent,
    ffi.Pointer<ffi.Char> api_key,
    bool subtract_fee_from_amount,
    bool is_lowball,
    bool is_testnet);
typedef NativeCreate_final_taxi_pset = TxResult Function(
    ffi.Pointer<ffi.Char> client_signed_pset,
    ffi.Pointer<ffi.Char> server_signed_pset);
typedef DartCreate_final_taxi_pset = TxResult Function(
    ffi.Pointer<ffi.Char> client_signed_pset,
    ffi.Pointer<ffi.Char> server_signed_pset);
typedef NativeRust_cstr_free = ffi.Void Function(ffi.Pointer<ffi.Char> s);
typedef DartRust_cstr_free = void Function(ffi.Pointer<ffi.Char> s);
typedef LogCallback = ffi.Pointer<ffi.NativeFunction<LogCallbackFunction>>;
typedef LogCallbackFunction = ffi.Void Function(ffi.Pointer<ffi.Char>);
typedef DartLogCallbackFunction = void Function(ffi.Pointer<ffi.Char>);
typedef NativeRegister_log_callback = ffi.Void Function(LogCallback callback);
typedef DartRegister_log_callback = void Function(LogCallback callback);
typedef NativeGet_last_error = ffi.Pointer<ffi.Char> Function();
typedef DartGet_last_error = ffi.Pointer<ffi.Char> Function();

const int __has_safe_buffers = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int BYTE_ORDER = 1234;

const int __API_TO_BE_DEPRECATED = 100000;

const int __API_TO_BE_DEPRECATED_MACOS = 100000;

const int __API_TO_BE_DEPRECATED_IOS = 100000;

const int __API_TO_BE_DEPRECATED_MACCATALYST = 100000;

const int __API_TO_BE_DEPRECATED_WATCHOS = 100000;

const int __API_TO_BE_DEPRECATED_TVOS = 100000;

const int __API_TO_BE_DEPRECATED_DRIVERKIT = 100000;

const int __API_TO_BE_DEPRECATED_VISIONOS = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_5 = 101405;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __MAC_12_4 = 120400;

const int __MAC_12_5 = 120500;

const int __MAC_12_6 = 120600;

const int __MAC_12_7 = 120700;

const int __MAC_13_0 = 130000;

const int __MAC_13_1 = 130100;

const int __MAC_13_2 = 130200;

const int __MAC_13_3 = 130300;

const int __MAC_13_4 = 130400;

const int __MAC_13_5 = 130500;

const int __MAC_13_6 = 130600;

const int __MAC_14_0 = 140000;

const int __MAC_14_1 = 140100;

const int __MAC_14_2 = 140200;

const int __MAC_14_3 = 140300;

const int __MAC_14_4 = 140400;

const int __MAC_14_5 = 140500;

const int __MAC_15_0 = 150000;

const int __MAC_15_1 = 150100;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_4 = 140400;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __IPHONE_15_5 = 150500;

const int __IPHONE_15_6 = 150600;

const int __IPHONE_15_7 = 150700;

const int __IPHONE_15_8 = 150800;

const int __IPHONE_16_0 = 160000;

const int __IPHONE_16_1 = 160100;

const int __IPHONE_16_2 = 160200;

const int __IPHONE_16_3 = 160300;

const int __IPHONE_16_4 = 160400;

const int __IPHONE_16_5 = 160500;

const int __IPHONE_16_6 = 160600;

const int __IPHONE_16_7 = 160700;

const int __IPHONE_17_0 = 170000;

const int __IPHONE_17_1 = 170100;

const int __IPHONE_17_2 = 170200;

const int __IPHONE_17_3 = 170300;

const int __IPHONE_17_4 = 170400;

const int __IPHONE_17_5 = 170500;

const int __IPHONE_18_0 = 180000;

const int __IPHONE_18_1 = 180100;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int __WATCHOS_8_6 = 80600;

const int __WATCHOS_8_7 = 80700;

const int __WATCHOS_8_8 = 80800;

const int __WATCHOS_9_0 = 90000;

const int __WATCHOS_9_1 = 90100;

const int __WATCHOS_9_2 = 90200;

const int __WATCHOS_9_3 = 90300;

const int __WATCHOS_9_4 = 90400;

const int __WATCHOS_9_5 = 90500;

const int __WATCHOS_9_6 = 90600;

const int __WATCHOS_10_0 = 100000;

const int __WATCHOS_10_1 = 100100;

const int __WATCHOS_10_2 = 100200;

const int __WATCHOS_10_3 = 100300;

const int __WATCHOS_10_4 = 100400;

const int __WATCHOS_10_5 = 100500;

const int __WATCHOS_11_0 = 110000;

const int __WATCHOS_11_1 = 110100;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __TVOS_15_5 = 150500;

const int __TVOS_15_6 = 150600;

const int __TVOS_16_0 = 160000;

const int __TVOS_16_1 = 160100;

const int __TVOS_16_2 = 160200;

const int __TVOS_16_3 = 160300;

const int __TVOS_16_4 = 160400;

const int __TVOS_16_5 = 160500;

const int __TVOS_16_6 = 160600;

const int __TVOS_17_0 = 170000;

const int __TVOS_17_1 = 170100;

const int __TVOS_17_2 = 170200;

const int __TVOS_17_3 = 170300;

const int __TVOS_17_4 = 170400;

const int __TVOS_17_5 = 170500;

const int __TVOS_18_0 = 180000;

const int __TVOS_18_1 = 180100;

const int __BRIDGEOS_2_0 = 20000;

const int __BRIDGEOS_3_0 = 30000;

const int __BRIDGEOS_3_1 = 30100;

const int __BRIDGEOS_3_4 = 30400;

const int __BRIDGEOS_4_0 = 40000;

const int __BRIDGEOS_4_1 = 40100;

const int __BRIDGEOS_5_0 = 50000;

const int __BRIDGEOS_5_1 = 50100;

const int __BRIDGEOS_5_3 = 50300;

const int __BRIDGEOS_6_0 = 60000;

const int __BRIDGEOS_6_2 = 60200;

const int __BRIDGEOS_6_4 = 60400;

const int __BRIDGEOS_6_5 = 60500;

const int __BRIDGEOS_6_6 = 60600;

const int __BRIDGEOS_7_0 = 70000;

const int __BRIDGEOS_7_1 = 70100;

const int __BRIDGEOS_7_2 = 70200;

const int __BRIDGEOS_7_3 = 70300;

const int __BRIDGEOS_7_4 = 70400;

const int __BRIDGEOS_7_6 = 70600;

const int __BRIDGEOS_8_0 = 80000;

const int __BRIDGEOS_8_1 = 80100;

const int __BRIDGEOS_8_2 = 80200;

const int __BRIDGEOS_8_3 = 80300;

const int __BRIDGEOS_8_4 = 80400;

const int __BRIDGEOS_8_5 = 80500;

const int __BRIDGEOS_9_0 = 90000;

const int __BRIDGEOS_9_1 = 90100;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __DRIVERKIT_22_0 = 220000;

const int __DRIVERKIT_22_4 = 220400;

const int __DRIVERKIT_22_5 = 220500;

const int __DRIVERKIT_22_6 = 220600;

const int __DRIVERKIT_23_0 = 230000;

const int __DRIVERKIT_23_1 = 230100;

const int __DRIVERKIT_23_2 = 230200;

const int __DRIVERKIT_23_3 = 230300;

const int __DRIVERKIT_23_4 = 230400;

const int __DRIVERKIT_23_5 = 230500;

const int __DRIVERKIT_24_0 = 240000;

const int __DRIVERKIT_24_1 = 240100;

const int __VISIONOS_1_0 = 10000;

const int __VISIONOS_1_1 = 10100;

const int __VISIONOS_1_2 = 10200;

const int __VISIONOS_2_0 = 20000;

const int __VISIONOS_2_1 = 20100;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_5 = 101405;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_15_4 = 101504;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_11_1 = 110100;

const int MAC_OS_VERSION_11_3 = 110300;

const int MAC_OS_VERSION_11_4 = 110400;

const int MAC_OS_VERSION_11_5 = 110500;

const int MAC_OS_VERSION_11_6 = 110600;

const int MAC_OS_VERSION_12_0 = 120000;

const int MAC_OS_VERSION_12_1 = 120100;

const int MAC_OS_VERSION_12_2 = 120200;

const int MAC_OS_VERSION_12_3 = 120300;

const int MAC_OS_VERSION_12_4 = 120400;

const int MAC_OS_VERSION_12_5 = 120500;

const int MAC_OS_VERSION_12_6 = 120600;

const int MAC_OS_VERSION_12_7 = 120700;

const int MAC_OS_VERSION_13_0 = 130000;

const int MAC_OS_VERSION_13_1 = 130100;

const int MAC_OS_VERSION_13_2 = 130200;

const int MAC_OS_VERSION_13_3 = 130300;

const int MAC_OS_VERSION_13_4 = 130400;

const int MAC_OS_VERSION_13_5 = 130500;

const int MAC_OS_VERSION_13_6 = 130600;

const int MAC_OS_VERSION_14_0 = 140000;

const int MAC_OS_VERSION_14_1 = 140100;

const int MAC_OS_VERSION_14_2 = 140200;

const int MAC_OS_VERSION_14_3 = 140300;

const int MAC_OS_VERSION_14_4 = 140400;

const int MAC_OS_VERSION_14_5 = 140500;

const int MAC_OS_VERSION_15_0 = 150000;

const int MAC_OS_VERSION_15_1 = 150100;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 150000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 150100;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_FD_SETSIZE = 1024;

const int __DARWIN_NBBY = 8;

const int __DARWIN_NFDBITS = 32;

const int NBBY = 8;

const int NFDBITS = 32;

const int FD_SETSIZE = 1024;

const int GA_OK = 0;

const int GA_ERROR = -1;

const int GA_RECONNECT = -2;

const int GA_SESSION_LOST = -3;

const int GA_TIMEOUT = -4;

const int GA_NOT_AUTHORIZED = -5;

const int GA_NONE = 0;

const int GA_INFO = 1;

const int GA_DEBUG = 2;

const int GA_TRUE = 1;

const int GA_FALSE = 0;

const int __bool_true_false_are_defined = 1;

const int true1 = 1;

const int false1 = 0;

const int __DARWIN_NSIG = 32;

const int NSIG = 32;

const int _I386_SIGNAL_H_ = 1;

const int SIGHUP = 1;

const int SIGINT = 2;

const int SIGQUIT = 3;

const int SIGILL = 4;

const int SIGTRAP = 5;

const int SIGABRT = 6;

const int SIGIOT = 6;

const int SIGEMT = 7;

const int SIGFPE = 8;

const int SIGKILL = 9;

const int SIGBUS = 10;

const int SIGSEGV = 11;

const int SIGSYS = 12;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGTERM = 15;

const int SIGURG = 16;

const int SIGSTOP = 17;

const int SIGTSTP = 18;

const int SIGCONT = 19;

const int SIGCHLD = 20;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGIO = 23;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGWINCH = 28;

const int SIGINFO = 29;

const int SIGUSR1 = 30;

const int SIGUSR2 = 31;

const int FP_PREC_24B = 0;

const int FP_PREC_53B = 2;

const int FP_PREC_64B = 3;

const int FP_RND_NEAR = 0;

const int FP_RND_DOWN = 1;

const int FP_RND_UP = 2;

const int FP_CHOP = 3;

const int FP_STATE_BYTES = 512;

const int _X86_INSTRUCTION_STATE_MAX_INSN_BYTES = 2380;

const int _X86_INSTRUCTION_STATE_CACHELINE_SIZE = 64;

const int __LASTBRANCH_MAX = 32;

const int SIGEV_NONE = 0;

const int SIGEV_SIGNAL = 1;

const int SIGEV_THREAD = 3;

const int ILL_NOOP = 0;

const int ILL_ILLOPC = 1;

const int ILL_ILLTRP = 2;

const int ILL_PRVOPC = 3;

const int ILL_ILLOPN = 4;

const int ILL_ILLADR = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int FPE_NOOP = 0;

const int FPE_FLTDIV = 1;

const int FPE_FLTOVF = 2;

const int FPE_FLTUND = 3;

const int FPE_FLTRES = 4;

const int FPE_FLTINV = 5;

const int FPE_FLTSUB = 6;

const int FPE_INTDIV = 7;

const int FPE_INTOVF = 8;

const int SEGV_NOOP = 0;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int BUS_NOOP = 0;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int TRAP_BRKPT = 1;

const int TRAP_TRACE = 2;

const int CLD_NOOP = 0;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SA_ONSTACK = 1;

const int SA_RESTART = 2;

const int SA_RESETHAND = 4;

const int SA_NOCLDSTOP = 8;

const int SA_NODEFER = 16;

const int SA_NOCLDWAIT = 32;

const int SA_SIGINFO = 64;

const int SA_USERTRAMP = 256;

const int SA_64REGSET = 512;

const int SA_USERSPACE_MASK = 127;

const int SIG_BLOCK = 1;

const int SIG_UNBLOCK = 2;

const int SIG_SETMASK = 3;

const int SI_USER = 65537;

const int SI_QUEUE = 65538;

const int SI_TIMER = 65539;

const int SI_ASYNCIO = 65540;

const int SI_MESGQ = 65541;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 4;

const int MINSIGSTKSZ = 32768;

const int SIGSTKSZ = 131072;

const int SV_ONSTACK = 1;

const int SV_INTERRUPT = 2;

const int SV_RESETHAND = 4;

const int SV_NODEFER = 16;

const int SV_NOCLDSTOP = 8;

const int SV_SIGINFO = 64;

const int PRIO_PROCESS = 0;

const int PRIO_PGRP = 1;

const int PRIO_USER = 2;

const int PRIO_DARWIN_THREAD = 3;

const int PRIO_DARWIN_PROCESS = 4;

const int PRIO_MIN = -20;

const int PRIO_MAX = 20;

const int PRIO_DARWIN_BG = 4096;

const int PRIO_DARWIN_NONUI = 4097;

const int RUSAGE_SELF = 0;

const int RUSAGE_CHILDREN = -1;

const int RUSAGE_INFO_V0 = 0;

const int RUSAGE_INFO_V1 = 1;

const int RUSAGE_INFO_V2 = 2;

const int RUSAGE_INFO_V3 = 3;

const int RUSAGE_INFO_V4 = 4;

const int RUSAGE_INFO_V5 = 5;

const int RUSAGE_INFO_V6 = 6;

const int RUSAGE_INFO_CURRENT = 6;

const int RU_PROC_RUNS_RESLIDE = 1;

const int RLIM_INFINITY = 9223372036854775807;

const int RLIM_SAVED_MAX = 9223372036854775807;

const int RLIM_SAVED_CUR = 9223372036854775807;

const int RLIMIT_CPU = 0;

const int RLIMIT_FSIZE = 1;

const int RLIMIT_DATA = 2;

const int RLIMIT_STACK = 3;

const int RLIMIT_CORE = 4;

const int RLIMIT_AS = 5;

const int RLIMIT_RSS = 5;

const int RLIMIT_MEMLOCK = 6;

const int RLIMIT_NPROC = 7;

const int RLIMIT_NOFILE = 8;

const int RLIM_NLIMITS = 9;

const int _RLIMIT_POSIX_FLAG = 4096;

const int RLIMIT_WAKEUPS_MONITOR = 1;

const int RLIMIT_CPU_USAGE_MONITOR = 2;

const int RLIMIT_THREAD_CPULIMITS = 3;

const int RLIMIT_FOOTPRINT_INTERVAL = 4;

const int WAKEMON_ENABLE = 1;

const int WAKEMON_DISABLE = 2;

const int WAKEMON_GET_PARAMS = 4;

const int WAKEMON_SET_DEFAULTS = 8;

const int WAKEMON_MAKE_FATAL = 16;

const int CPUMON_MAKE_FATAL = 4096;

const int FOOTPRINT_INTERVAL_RESET = 1;

const int IOPOL_TYPE_DISK = 0;

const int IOPOL_TYPE_VFS_ATIME_UPDATES = 2;

const int IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = 3;

const int IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = 4;

const int IOPOL_TYPE_VFS_TRIGGER_RESOLVE = 5;

const int IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION = 6;

const int IOPOL_TYPE_VFS_IGNORE_PERMISSIONS = 7;

const int IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE = 8;

const int IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES = 9;

const int IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY = 10;

const int IOPOL_SCOPE_PROCESS = 0;

const int IOPOL_SCOPE_THREAD = 1;

const int IOPOL_SCOPE_DARWIN_BG = 2;

const int IOPOL_DEFAULT = 0;

const int IOPOL_IMPORTANT = 1;

const int IOPOL_PASSIVE = 2;

const int IOPOL_THROTTLE = 3;

const int IOPOL_UTILITY = 4;

const int IOPOL_STANDARD = 5;

const int IOPOL_APPLICATION = 5;

const int IOPOL_NORMAL = 1;

const int IOPOL_ATIME_UPDATES_DEFAULT = 0;

const int IOPOL_ATIME_UPDATES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = 0;

const int IOPOL_MATERIALIZE_DATALESS_FILES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_ON = 2;

const int IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = 0;

const int IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = 1;

const int IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT = 0;

const int IOPOL_VFS_TRIGGER_RESOLVE_OFF = 1;

const int IOPOL_VFS_CONTENT_PROTECTION_DEFAULT = 0;

const int IOPOL_VFS_CONTENT_PROTECTION_IGNORE = 1;

const int IOPOL_VFS_IGNORE_PERMISSIONS_OFF = 0;

const int IOPOL_VFS_IGNORE_PERMISSIONS_ON = 1;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_OFF = 0;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_ON = 1;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF = 0;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON = 1;

const int IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT = 0;

const int IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON = 1;

const int IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT = 0;

const int IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WCOREFLAG = 128;

const int _WSTOPPED = 127;

const int WEXITED = 4;

const int WSTOPPED = 8;

const int WCONTINUED = 16;

const int WNOWAIT = 32;

const int WAIT_ANY = -1;

const int WAIT_MYPGRP = 0;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int RAND_MAX = 2147483647;

const int DEFAULT_ELECTRUM_TIMEOUT = 10;
