// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings created by ffigen
class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _selectPtr = _lookup<ffi.NativeFunction<NativeSelect>>('select');
  late final _select = _selectPtr.asFunction<DartSelect>();

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselectPtr =
      _lookup<ffi.NativeFunction<NativePselect>>('pselect');
  late final _pselect = _pselectPtr.asFunction<DartPselect>();

  /// Perform one-time initialization of the library. This call must be made once
  /// only before calling any other GDK functions, including any functions called
  /// from other threads.
  ///
  /// :param config: The :ref:`init-config-arg`.
  int GA_init(
    ffi.Pointer<GA_json> config,
  ) {
    return _GA_init(
      config,
    );
  }

  late final _GA_initPtr =
      _lookup<ffi.NativeFunction<NativeGA_init>>('GA_init');
  late final _GA_init = _GA_initPtr.asFunction<DartGA_init>();

  /// Get any error details associated with the last error on the current thread.
  ///
  /// :param output: Destination for the output :ref:`error-details` JSON.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  int GA_get_thread_error_details(
    ffi.Pointer<ffi.Pointer<GA_json>> output,
  ) {
    return _GA_get_thread_error_details(
      output,
    );
  }

  late final _GA_get_thread_error_detailsPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_thread_error_details>>(
          'GA_get_thread_error_details');
  late final _GA_get_thread_error_details = _GA_get_thread_error_detailsPtr
      .asFunction<DartGA_get_thread_error_details>();

  /// Create a new session.
  ///
  /// :param session: Destination for the resulting session.
  /// |     The returned session should be freed using `GA_destroy_session`.
  ///
  /// Once created, the caller should set a handler for notifications using
  /// `GA_set_notification_handler`, before calling `GA_connect` to connect the
  /// session to the network for use.
  int GA_create_session(
    ffi.Pointer<ffi.Pointer<GA_session>> session,
  ) {
    return _GA_create_session(
      session,
    );
  }

  late final _GA_create_sessionPtr =
      _lookup<ffi.NativeFunction<NativeGA_create_session>>('GA_create_session');
  late final _GA_create_session =
      _GA_create_sessionPtr.asFunction<DartGA_create_session>();

  /// Set a handler to be called when notifications arrive for a session.
  ///
  /// :param session: The session to receive notifications for.
  /// :param handler: The handler to receive notifications.
  /// :param context: A context pointer to be passed to the handler.
  ///
  /// This call must be initially made on a session before `GA_connect`.
  /// :ref:`ntf-notifications` may arrive on different threads, so the caller
  /// must ensure that shared data is correctly locked within the handler.
  /// The ``GA_json`` object passed to the caller must be destroyed by the
  /// caller using `GA_destroy_json`. Failing to do so will result in
  /// memory leaks.
  ///
  /// Once a session has been connected, this call can be made only with null
  /// values for ``handler`` and ``context``. Once this returns, no further
  /// notifications will be delivered for the lifetime of the session.
  ///
  /// The caller should not call session functions from within the callback
  /// handler as this may block the application.
  int GA_set_notification_handler(
    ffi.Pointer<GA_session> session,
    GA_notification_handler handler,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _GA_set_notification_handler(
      session,
      handler,
      context,
    );
  }

  late final _GA_set_notification_handlerPtr =
      _lookup<ffi.NativeFunction<NativeGA_set_notification_handler>>(
          'GA_set_notification_handler');
  late final _GA_set_notification_handler = _GA_set_notification_handlerPtr
      .asFunction<DartGA_set_notification_handler>();

  /// Free a session allocated by `GA_create_session`.
  ///
  /// :param session: The session to free.
  ///
  /// If the session was connected using `GA_connect` then this call will
  /// disconnect it it before destroying it.
  int GA_destroy_session(
    ffi.Pointer<GA_session> session,
  ) {
    return _GA_destroy_session(
      session,
    );
  }

  late final _GA_destroy_sessionPtr =
      _lookup<ffi.NativeFunction<NativeGA_destroy_session>>(
          'GA_destroy_session');
  late final _GA_destroy_session =
      _GA_destroy_sessionPtr.asFunction<DartGA_destroy_session>();

  /// Connect the session to the specified network.
  ///
  /// :param session: The session to connect.
  /// :param net_params: The :ref:`net-params` of the network to connect to.
  ///
  /// This call connects to the remote network services that the session
  /// requires, for example the Green servers or Electrum servers.
  /// `GA_connect` must be called only once per session lifetime, after
  /// `GA_create_session` and before `GA_destroy_session` respectively.
  /// Once connected, the underlying network connection of the
  /// session can be controlled using `GA_reconnect_hint`.
  ///
  /// Once the session is connected, use `GA_register_user` to create a new
  /// wallet for the session, or `GA_login_user` to open an existing wallet.
  int GA_connect(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> net_params,
  ) {
    return _GA_connect(
      session,
      net_params,
    );
  }

  late final _GA_connectPtr =
      _lookup<ffi.NativeFunction<NativeGA_connect>>('GA_connect');
  late final _GA_connect = _GA_connectPtr.asFunction<DartGA_connect>();

  /// Connect or disconnect a sessions underlying network connection.
  ///
  /// :param session: The session to use.
  /// :param hint: the :ref:`reconnect` describing the desired reconnection behaviour.
  int GA_reconnect_hint(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> hint,
  ) {
    return _GA_reconnect_hint(
      session,
      hint,
    );
  }

  late final _GA_reconnect_hintPtr =
      _lookup<ffi.NativeFunction<NativeGA_reconnect_hint>>('GA_reconnect_hint');
  late final _GA_reconnect_hint =
      _GA_reconnect_hintPtr.asFunction<DartGA_reconnect_hint>();

  /// Get the current proxy settings for the given session.
  ///
  /// :param session: The session to use.
  /// :param output: Destination for the output :ref:`proxy-info`.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  int GA_get_proxy_settings(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_json>> output,
  ) {
    return _GA_get_proxy_settings(
      session,
      output,
    );
  }

  late final _GA_get_proxy_settingsPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_proxy_settings>>(
          'GA_get_proxy_settings');
  late final _GA_get_proxy_settings =
      _GA_get_proxy_settingsPtr.asFunction<DartGA_get_proxy_settings>();

  /// Compute a hashed wallet identifier from a BIP32 xpub or mnemonic.
  ///
  /// The identifier returned is computed from the network combined with the
  /// master chain code and public key of the xpub/mnemonic. It can be used
  /// as a unique wallet identifier to mitigate privacy risks associated with
  /// storing the wallet's xpub.
  ///
  /// :param net_params: The :ref:`net-params` of the network to compute an identifier for.
  /// :param params: The :ref:`wallet-id-request` to compute an identifier for.
  /// :param output: Destination for the output JSON.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  int GA_get_wallet_identifier(
    ffi.Pointer<GA_json> net_params,
    ffi.Pointer<GA_json> params,
    ffi.Pointer<ffi.Pointer<GA_json>> output,
  ) {
    return _GA_get_wallet_identifier(
      net_params,
      params,
      output,
    );
  }

  late final _GA_get_wallet_identifierPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_wallet_identifier>>(
          'GA_get_wallet_identifier');
  late final _GA_get_wallet_identifier =
      _GA_get_wallet_identifierPtr.asFunction<DartGA_get_wallet_identifier>();

  /// Make a request to an http server.
  ///
  /// :param session: The session to use.
  /// :param params: the :ref:`http-params` of the server to connect to.
  /// :param output: Destination for the output JSON.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  int GA_http_request(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> params,
    ffi.Pointer<ffi.Pointer<GA_json>> output,
  ) {
    return _GA_http_request(
      session,
      params,
      output,
    );
  }

  late final _GA_http_requestPtr =
      _lookup<ffi.NativeFunction<NativeGA_http_request>>('GA_http_request');
  late final _GA_http_request =
      _GA_http_requestPtr.asFunction<DartGA_http_request>();

  /// Refresh the sessions internal cache of Liquid asset information.
  ///
  /// Each release of GDK comes with a partial list of Liquid assets built-in.
  /// This call is used to update it to include all the registered Liquid assets
  /// or any new assets that have been registered since the last update.
  ///
  /// :param session: The session to use.
  /// :param params: the :ref:`assets-params-data` of the server to connect to.
  int GA_refresh_assets(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> params,
  ) {
    return _GA_refresh_assets(
      session,
      params,
    );
  }

  late final _GA_refresh_assetsPtr =
      _lookup<ffi.NativeFunction<NativeGA_refresh_assets>>('GA_refresh_assets');
  late final _GA_refresh_assets =
      _GA_refresh_assetsPtr.asFunction<DartGA_refresh_assets>();

  /// Query the Liquid asset registry.
  ///
  /// This call is used to retrieve informations about a set of Liquid assets
  /// specified by their asset id.
  ///
  /// :param session: The session to use.
  /// :param params: the :ref:`get-assets-params` specifying the assets to query.
  /// :param output: Destination for the output :ref:`asset-details`.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  int GA_get_assets(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> params,
    ffi.Pointer<ffi.Pointer<GA_json>> output,
  ) {
    return _GA_get_assets(
      session,
      params,
      output,
    );
  }

  late final _GA_get_assetsPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_assets>>('GA_get_assets');
  late final _GA_get_assets = _GA_get_assetsPtr.asFunction<DartGA_get_assets>();

  /// Validate asset domain name.
  /// (This is a interface stub)
  int GA_validate_asset_domain_name(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> params,
    ffi.Pointer<ffi.Pointer<GA_json>> output,
  ) {
    return _GA_validate_asset_domain_name(
      session,
      params,
      output,
    );
  }

  late final _GA_validate_asset_domain_namePtr =
      _lookup<ffi.NativeFunction<NativeGA_validate_asset_domain_name>>(
          'GA_validate_asset_domain_name');
  late final _GA_validate_asset_domain_name = _GA_validate_asset_domain_namePtr
      .asFunction<DartGA_validate_asset_domain_name>();

  /// Validate a gdk format JSON document.
  ///
  /// :param session: The session to use.
  /// :param details: The :ref:`validate-details` to validate.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     The call handlers result is :ref:`validate-result`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call
  /// completes.
  int GA_validate(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_validate(
      session,
      details,
      call,
    );
  }

  late final _GA_validatePtr =
      _lookup<ffi.NativeFunction<NativeGA_validate>>('GA_validate');
  late final _GA_validate = _GA_validatePtr.asFunction<DartGA_validate>();

  /// Create a new user wallet.
  ///
  /// :param session: The session to use.
  /// :param hw_device: :ref:`hw-device` or empty JSON for software wallet registration.
  /// :param details: The :ref:`login-credentials` for software wallet registration.
  /// :param call: Destination for the resulting GA_auth_handler to perform the registration.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameters ``hw_device`` and ``details`` will be emptied when the call
  /// completes.
  int GA_register_user(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> hw_device,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_register_user(
      session,
      hw_device,
      details,
      call,
    );
  }

  late final _GA_register_userPtr =
      _lookup<ffi.NativeFunction<NativeGA_register_user>>('GA_register_user');
  late final _GA_register_user =
      _GA_register_userPtr.asFunction<DartGA_register_user>();

  /// Authenticate to a user's wallet.
  ///
  /// :param session: The session to use.
  /// :param hw_device: :ref:`hw-device` or empty JSON for software wallet login.
  /// :param details: The :ref:`login-credentials` for authenticating the user.
  /// :param call: Destination for the resulting GA_auth_handler to perform the login.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// If a sessions underlying network connection has disconnected and
  /// reconnected, the user will need to login again using this function. In
  /// this case, the caller can pass empty JSON for both ``hw_device`` and
  /// ``details`` to login using the previously passed credentials and device.
  ///
  /// .. note:: When calling from C/C++, the parameters ``hw_device`` and ``details`` will be emptied when the call
  /// completes.
  int GA_login_user(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> hw_device,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_login_user(
      session,
      hw_device,
      details,
      call,
    );
  }

  late final _GA_login_userPtr =
      _lookup<ffi.NativeFunction<NativeGA_login_user>>('GA_login_user');
  late final _GA_login_user = _GA_login_userPtr.asFunction<DartGA_login_user>();

  /// Set or disable a watch-only login for a logged-in user wallet.
  ///
  /// :param session: The session to use.
  /// :param username: The watch-only username to login with, or a blank string to disable.
  /// :param password: The watch-only password to login with, or a blank string to disable.
  int GA_set_watch_only(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> username,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _GA_set_watch_only(
      session,
      username,
      password,
    );
  }

  late final _GA_set_watch_onlyPtr =
      _lookup<ffi.NativeFunction<NativeGA_set_watch_only>>('GA_set_watch_only');
  late final _GA_set_watch_only =
      _GA_set_watch_onlyPtr.asFunction<DartGA_set_watch_only>();

  /// Get the current watch-only login for a logged-in user wallet, if any.
  ///
  /// :param session: The session to use.
  /// :param username: Destination for the watch-only username. Empty string if not set.
  /// |     Returned string should be freed using `GA_destroy_string`.
  int GA_get_watch_only_username(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<ffi.Char>> username,
  ) {
    return _GA_get_watch_only_username(
      session,
      username,
    );
  }

  late final _GA_get_watch_only_usernamePtr =
      _lookup<ffi.NativeFunction<NativeGA_get_watch_only_username>>(
          'GA_get_watch_only_username');
  late final _GA_get_watch_only_username = _GA_get_watch_only_usernamePtr
      .asFunction<DartGA_get_watch_only_username>();

  /// Remove and delete the server history of a wallet.
  ///
  /// :param session: The session to use.
  /// :param call: Destination for the resulting GA_auth_handler to perform the removal.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// For multisig Green sessions, removing a wallet removes all history and
  /// data associated with the wallet on the server. This operation cannot be
  /// undone, and re-registering the wallet will not bring back the wallet's
  /// history. For this reason, only empty wallets can be deleted.
  ///
  /// For singlesig sessions, removing a wallet removes the locally persisted cache.
  /// The actual removal will happen after `GA_destroy_session` is called.
  int GA_remove_account(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_remove_account(
      session,
      call,
    );
  }

  late final _GA_remove_accountPtr =
      _lookup<ffi.NativeFunction<NativeGA_remove_account>>('GA_remove_account');
  late final _GA_remove_account =
      _GA_remove_accountPtr.asFunction<DartGA_remove_account>();

  /// Create a subaccount.
  ///
  /// :param session: The session to use.
  /// :param details: The subaccount ``"name"`` (which must not be already used in
  /// |     the wallet) and ``"type"`` (either ``"2of2"``, ``"2of2_no_recovery"`` or ``"2of3"``) must be
  /// |     populated. Type ``"2of2_no_recovery"`` is available only for Liquid networks and
  /// |     always requires both keys for spending. For type ``"2of3"`` the caller may provide
  /// |     either ``"recovery_mnemonic"`` or ``"recovery_xpub"`` if they do not wish to have a
  /// |     mnemonic passphrase generated automatically.
  /// |     All other fields are ignored.
  /// :param call: Destination for the resulting GA_auth_handler to perform the creation.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  /// |     Details of the created subaccount are returned in the ``"result"`` element of
  /// |     the GA_auth_handler. For 2of3 subaccounts the field ``"recovery_xpub"`` will
  /// |     be populated, and ``"recovery_mnemonic"`` will contain the recovery mnemonic
  /// |     passphrase if one was generated. These values must be stored safely by the
  /// |     caller as they will not be returned again by any call such as `GA_get_subaccounts`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  int GA_create_subaccount(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_create_subaccount(
      session,
      details,
      call,
    );
  }

  late final _GA_create_subaccountPtr =
      _lookup<ffi.NativeFunction<NativeGA_create_subaccount>>(
          'GA_create_subaccount');
  late final _GA_create_subaccount =
      _GA_create_subaccountPtr.asFunction<DartGA_create_subaccount>();

  /// Get the user's subaccount details.
  ///
  /// :param session: The session to use.
  /// :param details: the :ref:`get-subaccounts-params-data` controlling the request.
  /// :param call: Destination for the resulting GA_auth_handler to perform the creation.
  /// |     The call handlers result is :ref:`subaccount-list`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  int GA_get_subaccounts(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_get_subaccounts(
      session,
      details,
      call,
    );
  }

  late final _GA_get_subaccountsPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_subaccounts>>(
          'GA_get_subaccounts');
  late final _GA_get_subaccounts =
      _GA_get_subaccountsPtr.asFunction<DartGA_get_subaccounts>();

  /// Get subaccount details.
  ///
  /// :param session: The session to use.
  /// :param subaccount: The value of ``"pointer"`` from :ref:`subaccount-list` for the subaccount.
  /// :param call: Destination for the resulting GA_auth_handler to perform the creation.
  /// |     The call handlers result is :ref:`subaccount-detail`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  int GA_get_subaccount(
    ffi.Pointer<GA_session> session,
    int subaccount,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_get_subaccount(
      session,
      subaccount,
      call,
    );
  }

  late final _GA_get_subaccountPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_subaccount>>('GA_get_subaccount');
  late final _GA_get_subaccount =
      _GA_get_subaccountPtr.asFunction<DartGA_get_subaccount>();

  /// Update subaccount information.
  ///
  /// :param session: The session to use.
  /// :param details: :ref:`subaccount-update` giving the details to update.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes
  int GA_update_subaccount(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_update_subaccount(
      session,
      details,
      call,
    );
  }

  late final _GA_update_subaccountPtr =
      _lookup<ffi.NativeFunction<NativeGA_update_subaccount>>(
          'GA_update_subaccount');
  late final _GA_update_subaccount =
      _GA_update_subaccountPtr.asFunction<DartGA_update_subaccount>();

  /// Get a page of the user's transaction history.
  ///
  /// :param session: The session to use.
  /// :param details: :ref:`transactions-details` giving the details to get the transactions for.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  ///
  /// .. note:: Transactions are returned as :ref:`tx-list` from newest to oldest with up to 30 transactions per page.
  int GA_get_transactions(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_get_transactions(
      session,
      details,
      call,
    );
  }

  late final _GA_get_transactionsPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_transactions>>(
          'GA_get_transactions');
  late final _GA_get_transactions =
      _GA_get_transactionsPtr.asFunction<DartGA_get_transactions>();

  /// Get a new address to receive coins to.
  ///
  /// :param session: The session to use.
  /// :param details: :ref:`receive-address-request`.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     The call handlers result is :ref:`receive-address-details`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  int GA_get_receive_address(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_get_receive_address(
      session,
      details,
      call,
    );
  }

  late final _GA_get_receive_addressPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_receive_address>>(
          'GA_get_receive_address');
  late final _GA_get_receive_address =
      _GA_get_receive_addressPtr.asFunction<DartGA_get_receive_address>();

  /// Get a page of addresses previously generated for a subaccount.
  ///
  /// :param session: The session to use.
  /// :param details: :ref:`previous-addresses-request` detailing the previous addresses to fetch.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     The call handlers result is :ref:`previous-addresses`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  ///
  /// .. note:: Iteration of all addresses is complete when 'last_pointer' is not
  /// |     present in the results.
  int GA_get_previous_addresses(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_get_previous_addresses(
      session,
      details,
      call,
    );
  }

  late final _GA_get_previous_addressesPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_previous_addresses>>(
          'GA_get_previous_addresses');
  late final _GA_get_previous_addresses =
      _GA_get_previous_addressesPtr.asFunction<DartGA_get_previous_addresses>();

  /// Get the user's unspent transaction outputs.
  ///
  /// :param session: The session to use.
  /// :param details: :ref:`unspent-outputs-request` detailing the unspent transaction outputs to fetch.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     The call handlers result is :ref:`unspent-outputs`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  int GA_get_unspent_outputs(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_get_unspent_outputs(
      session,
      details,
      call,
    );
  }

  late final _GA_get_unspent_outputsPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_unspent_outputs>>(
          'GA_get_unspent_outputs');
  late final _GA_get_unspent_outputs =
      _GA_get_unspent_outputsPtr.asFunction<DartGA_get_unspent_outputs>();

  /// Get the unspent transaction outputs associated with a non-wallet private key.
  ///
  /// :param session: The session to use.
  /// :param details: :ref:`unspent-outputs-private-request` detailing the private key to check.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     The call handlers result is :ref:`unspent-outputs`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: Neither the private key or its derived public key are sent to any third party for this call.
  int GA_get_unspent_outputs_for_private_key(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_get_unspent_outputs_for_private_key(
      session,
      details,
      call,
    );
  }

  late final _GA_get_unspent_outputs_for_private_keyPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_unspent_outputs_for_private_key>>(
          'GA_get_unspent_outputs_for_private_key');
  late final _GA_get_unspent_outputs_for_private_key =
      _GA_get_unspent_outputs_for_private_keyPtr.asFunction<
          DartGA_get_unspent_outputs_for_private_key>();

  /// Change the status of a user's unspent transaction outputs.
  ///
  /// :param session: The session to use.
  /// :param details: :ref:`unspent-outputs-status` detailing the unspent transaction outputs status to set.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  int GA_set_unspent_outputs_status(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_set_unspent_outputs_status(
      session,
      details,
      call,
    );
  }

  late final _GA_set_unspent_outputs_statusPtr =
      _lookup<ffi.NativeFunction<NativeGA_set_unspent_outputs_status>>(
          'GA_set_unspent_outputs_status');
  late final _GA_set_unspent_outputs_status = _GA_set_unspent_outputs_statusPtr
      .asFunction<DartGA_set_unspent_outputs_status>();

  /// Get a transaction's details.
  ///
  /// :param session: The session to use.
  /// :param txhash_hex: The transaction hash of the transaction to fetch.
  /// :param transaction: Destination for the :ref:`external-tx-detail`.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  int GA_get_transaction_details(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> txhash_hex,
    ffi.Pointer<ffi.Pointer<GA_json>> transaction,
  ) {
    return _GA_get_transaction_details(
      session,
      txhash_hex,
      transaction,
    );
  }

  late final _GA_get_transaction_detailsPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_transaction_details>>(
          'GA_get_transaction_details');
  late final _GA_get_transaction_details = _GA_get_transaction_detailsPtr
      .asFunction<DartGA_get_transaction_details>();

  /// Get the sum of unspent outputs paying to a subaccount.
  ///
  /// :param session: The session to use.
  /// :param details: :ref:`unspent-outputs-request` detailing the unspent transaction outputs to
  /// |    compute the balance from.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  int GA_get_balance(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_get_balance(
      session,
      details,
      call,
    );
  }

  late final _GA_get_balancePtr =
      _lookup<ffi.NativeFunction<NativeGA_get_balance>>('GA_get_balance');
  late final _GA_get_balance =
      _GA_get_balancePtr.asFunction<DartGA_get_balance>();

  /// Get the list of allowed currencies for all available pricing sources.
  ///
  /// :param session: The session to use.
  /// :param currencies: The returned list of :ref:`currencies`.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  int GA_get_available_currencies(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_json>> currencies,
  ) {
    return _GA_get_available_currencies(
      session,
      currencies,
    );
  }

  late final _GA_get_available_currenciesPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_available_currencies>>(
          'GA_get_available_currencies');
  late final _GA_get_available_currencies = _GA_get_available_currenciesPtr
      .asFunction<DartGA_get_available_currencies>();

  /// Convert Fiat to BTC and vice-versa.
  ///
  /// :param session: The session to use.
  /// :param value_details: :ref:`convert-amount` giving the value to convert.
  /// :param output: Destination for the converted values :ref:`amount-data`.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  int GA_convert_amount(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> value_details,
    ffi.Pointer<ffi.Pointer<GA_json>> output,
  ) {
    return _GA_convert_amount(
      session,
      value_details,
      output,
    );
  }

  late final _GA_convert_amountPtr =
      _lookup<ffi.NativeFunction<NativeGA_convert_amount>>('GA_convert_amount');
  late final _GA_convert_amount =
      _GA_convert_amountPtr.asFunction<DartGA_convert_amount>();

  /// Encrypt JSON with a server provided key protected by a PIN.
  ///
  /// :param session: The session to use.
  /// :param details: The :ref:`encrypt-with-pin-details` to encrypt.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     The call handlers result is :ref:`encrypt-with-pin-result` which the caller should persist.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  int GA_encrypt_with_pin(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_encrypt_with_pin(
      session,
      details,
      call,
    );
  }

  late final _GA_encrypt_with_pinPtr =
      _lookup<ffi.NativeFunction<NativeGA_encrypt_with_pin>>(
          'GA_encrypt_with_pin');
  late final _GA_encrypt_with_pin =
      _GA_encrypt_with_pinPtr.asFunction<DartGA_encrypt_with_pin>();

  /// Decrypt JSON with a server provided key protected by a PIN.
  ///
  /// :param session: The session to use.
  /// :param details: The :ref:`decrypt-with-pin-details` to decrypt.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     The call handlers result is the decrypted JSON.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  int GA_decrypt_with_pin(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_decrypt_with_pin(
      session,
      details,
      call,
    );
  }

  late final _GA_decrypt_with_pinPtr =
      _lookup<ffi.NativeFunction<NativeGA_decrypt_with_pin>>(
          'GA_decrypt_with_pin');
  late final _GA_decrypt_with_pin =
      _GA_decrypt_with_pinPtr.asFunction<DartGA_decrypt_with_pin>();

  /// Disable all PIN logins previously set.
  ///
  /// After calling this method, the user will not be able to login with PIN
  /// | from any device that was previously enabled using `GA_encrypt_with_pin`.
  ///
  /// :param session: The session to use.
  int GA_disable_all_pin_logins(
    ffi.Pointer<GA_session> session,
  ) {
    return _GA_disable_all_pin_logins(
      session,
    );
  }

  late final _GA_disable_all_pin_loginsPtr =
      _lookup<ffi.NativeFunction<NativeGA_disable_all_pin_logins>>(
          'GA_disable_all_pin_logins');
  late final _GA_disable_all_pin_logins =
      _GA_disable_all_pin_loginsPtr.asFunction<DartGA_disable_all_pin_logins>();

  /// Construct a transaction.
  ///
  /// :param session: The session to use.
  /// :param transaction_details: The :ref:`create-tx-details` for constructing.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``transaction_details`` will be emptied when the call completes.
  int GA_create_transaction(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_create_transaction(
      session,
      transaction_details,
      call,
    );
  }

  late final _GA_create_transactionPtr =
      _lookup<ffi.NativeFunction<NativeGA_create_transaction>>(
          'GA_create_transaction');
  late final _GA_create_transaction =
      _GA_create_transactionPtr.asFunction<DartGA_create_transaction>();

  /// Blind a transaction.
  ///
  /// :param session: The session to use.
  /// :param transaction_details: The :ref:`create-tx-details` for blinding.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``transaction_details`` will be emptied when the call completes.
  int GA_blind_transaction(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_blind_transaction(
      session,
      transaction_details,
      call,
    );
  }

  late final _GA_blind_transactionPtr =
      _lookup<ffi.NativeFunction<NativeGA_blind_transaction>>(
          'GA_blind_transaction');
  late final _GA_blind_transaction =
      _GA_blind_transactionPtr.asFunction<DartGA_blind_transaction>();

  /// Sign the user's inputs to a transaction.
  ///
  /// :param session: The session to use.
  /// :param transaction_details: The :ref:`sign-tx-details` for signing, as previously
  /// |     returned from `GA_create_transaction` or (for Liquid) `GA_blind_transaction`.
  /// :param call: Destination for the resulting GA_auth_handler to perform the signing.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``transaction_details`` will be emptied when the call completes.
  int GA_sign_transaction(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_sign_transaction(
      session,
      transaction_details,
      call,
    );
  }

  late final _GA_sign_transactionPtr =
      _lookup<ffi.NativeFunction<NativeGA_sign_transaction>>(
          'GA_sign_transaction');
  late final _GA_sign_transaction =
      _GA_sign_transactionPtr.asFunction<DartGA_sign_transaction>();

  /// Construct the initiators side of a swap transaction.
  ///
  /// :param session: The session to use.
  /// :param swap_details: The :ref:`create-swap-tx-details` for constructing.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     The call handlers result is :ref:`create-swap-tx-result`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  int GA_create_swap_transaction(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> swap_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_create_swap_transaction(
      session,
      swap_details,
      call,
    );
  }

  late final _GA_create_swap_transactionPtr =
      _lookup<ffi.NativeFunction<NativeGA_create_swap_transaction>>(
          'GA_create_swap_transaction');
  late final _GA_create_swap_transaction = _GA_create_swap_transactionPtr
      .asFunction<DartGA_create_swap_transaction>();

  /// Complete construction of the callers side of a swap transaction.
  ///
  /// :param session: The session to use.
  /// :param swap_details: The :ref:`complete-swap-tx-details` for completing.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     The call handlers result is :ref:`complete-swap-tx-result`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  int GA_complete_swap_transaction(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> swap_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_complete_swap_transaction(
      session,
      swap_details,
      call,
    );
  }

  late final _GA_complete_swap_transactionPtr =
      _lookup<ffi.NativeFunction<NativeGA_complete_swap_transaction>>(
          'GA_complete_swap_transaction');
  late final _GA_complete_swap_transaction = _GA_complete_swap_transactionPtr
      .asFunction<DartGA_complete_swap_transaction>();

  /// Sign one or more of a user's inputs in a PSBT or PSET.
  ///
  /// :param session: The session to use.
  /// :param details: The :ref:`sign-psbt-details` for signing.
  /// :param call: Destination for the resulting GA_auth_handler to perform the signing.
  /// |     The call handlers result is :ref:`sign-psbt-result`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  ///
  /// .. note:: EXPERIMENTAL warning: this call may be changed in future releases.
  int GA_psbt_sign(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_psbt_sign(
      session,
      details,
      call,
    );
  }

  late final _GA_psbt_signPtr =
      _lookup<ffi.NativeFunction<NativeGA_psbt_sign>>('GA_psbt_sign');
  late final _GA_psbt_sign = _GA_psbt_signPtr.asFunction<DartGA_psbt_sign>();

  /// Get wallet details of a PSBT or PSET.
  ///
  /// :param session: The session to use.
  /// :param details: The :ref:`psbt-wallet-details` for getting the wallet details.
  /// :param call: Destination for the resulting GA_auth_handler to get the wallet details.
  /// |     The call handlers result is :ref:`psbt-get-details-result`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  ///
  /// .. note:: EXPERIMENTAL warning: this call may be changed in future releases.
  int GA_psbt_get_details(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_psbt_get_details(
      session,
      details,
      call,
    );
  }

  late final _GA_psbt_get_detailsPtr =
      _lookup<ffi.NativeFunction<NativeGA_psbt_get_details>>(
          'GA_psbt_get_details');
  late final _GA_psbt_get_details =
      _GA_psbt_get_detailsPtr.asFunction<DartGA_psbt_get_details>();

  /// Broadcast a fully signed transaction to the P2P network.
  ///
  /// :param session: The session to use.
  /// :param transaction_hex: The signed transaction in hex to broadcast.
  /// :param tx_hash: Destination for the resulting transactions hash.
  /// |     Returned string should be freed using `GA_destroy_string`.
  int GA_broadcast_transaction(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> transaction_hex,
    ffi.Pointer<ffi.Pointer<ffi.Char>> tx_hash,
  ) {
    return _GA_broadcast_transaction(
      session,
      transaction_hex,
      tx_hash,
    );
  }

  late final _GA_broadcast_transactionPtr =
      _lookup<ffi.NativeFunction<NativeGA_broadcast_transaction>>(
          'GA_broadcast_transaction');
  late final _GA_broadcast_transaction =
      _GA_broadcast_transactionPtr.asFunction<DartGA_broadcast_transaction>();

  /// Send a transaction created by GA_create_transaction and signed by GA_sign_transaction.
  ///
  /// :param session: The session to use.
  /// :param transaction_details: The :ref:`send-tx-details` for sending.
  /// :param call: Destination for the resulting GA_auth_handler to perform the send.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``transaction_details`` will be emptied when the call completes.
  int GA_send_transaction(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_send_transaction(
      session,
      transaction_details,
      call,
    );
  }

  late final _GA_send_transactionPtr =
      _lookup<ffi.NativeFunction<NativeGA_send_transaction>>(
          'GA_send_transaction');
  late final _GA_send_transaction =
      _GA_send_transactionPtr.asFunction<DartGA_send_transaction>();

  /// Sign a message with the private key of an address.
  ///
  /// :param session: The session to use.
  /// :param details: The :ref:`sign-message-request` detailing the message to sign and how to sign it.
  /// :param call: Destination for the resulting GA_auth_handler to perform the signing.
  /// |     The call handlers result is :ref:`sign-message-result`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  int GA_sign_message(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_sign_message(
      session,
      details,
      call,
    );
  }

  late final _GA_sign_messagePtr =
      _lookup<ffi.NativeFunction<NativeGA_sign_message>>('GA_sign_message');
  late final _GA_sign_message =
      _GA_sign_messagePtr.asFunction<DartGA_sign_message>();

  /// Request an email containing the user's nLockTime transactions.
  ///
  /// :param session: The session to use.
  int GA_send_nlocktimes(
    ffi.Pointer<GA_session> session,
  ) {
    return _GA_send_nlocktimes(
      session,
    );
  }

  late final _GA_send_nlocktimesPtr =
      _lookup<ffi.NativeFunction<NativeGA_send_nlocktimes>>(
          'GA_send_nlocktimes');
  late final _GA_send_nlocktimes =
      _GA_send_nlocktimesPtr.asFunction<DartGA_send_nlocktimes>();

  /// Set the number of blocks after which CSV transactions become spendable without two factor authentication.
  ///
  /// :param session: The session to use.
  /// :param locktime_details: The :ref:`set-locktime-details` for setting the block value.
  /// :param call: Destination for the resulting GA_auth_handler to change the locktime.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``locktime_details`` will be emptied when the call completes.
  int GA_set_csvtime(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> locktime_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_set_csvtime(
      session,
      locktime_details,
      call,
    );
  }

  late final _GA_set_csvtimePtr =
      _lookup<ffi.NativeFunction<NativeGA_set_csvtime>>('GA_set_csvtime');
  late final _GA_set_csvtime =
      _GA_set_csvtimePtr.asFunction<DartGA_set_csvtime>();

  /// Set the number of blocks after which nLockTime transactions become
  /// |    spendable without two factor authentication. When this call
  /// |    succeeds, if the user has an email address associated with the
  /// |    wallet, an updated nlocktimes.zip file will be sent via email.
  ///
  /// :param session: The session to use.
  /// :param locktime_details: The :ref:`set-locktime-details` for setting the block value.
  /// :param call: Destination for the resulting GA_auth_handler to change the locktime.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  int GA_set_nlocktime(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> locktime_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_set_nlocktime(
      session,
      locktime_details,
      call,
    );
  }

  late final _GA_set_nlocktimePtr =
      _lookup<ffi.NativeFunction<NativeGA_set_nlocktime>>('GA_set_nlocktime');
  late final _GA_set_nlocktime =
      _GA_set_nlocktimePtr.asFunction<DartGA_set_nlocktime>();

  /// Add a transaction memo to a user's GreenAddress transaction.
  ///
  /// :param session: The session to use.
  /// :param txhash_hex: The transaction hash to associate the memo with.
  /// :param memo: The memo to set.
  /// :param memo_type: Unused, pass 0.
  int GA_set_transaction_memo(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> txhash_hex,
    ffi.Pointer<ffi.Char> memo,
    int memo_type,
  ) {
    return _GA_set_transaction_memo(
      session,
      txhash_hex,
      memo,
      memo_type,
    );
  }

  late final _GA_set_transaction_memoPtr =
      _lookup<ffi.NativeFunction<NativeGA_set_transaction_memo>>(
          'GA_set_transaction_memo');
  late final _GA_set_transaction_memo =
      _GA_set_transaction_memoPtr.asFunction<DartGA_set_transaction_memo>();

  /// Get the current network's fee estimates.
  ///
  /// :param session: The session to use.
  /// :param estimates: Destination for the returned :ref:`estimates`.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  ///
  /// The estimates are returned as an array of 25 elements. Each element is
  /// an integer representing the fee estimate expressed as satoshi per 1000
  /// bytes. The first element is the minimum relay fee as returned by the
  /// network, while the remaining elements are the current estimates to use
  /// for a transaction to confirm from 1 to 24 blocks.
  int GA_get_fee_estimates(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_json>> estimates,
  ) {
    return _GA_get_fee_estimates(
      session,
      estimates,
    );
  }

  late final _GA_get_fee_estimatesPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_fee_estimates>>(
          'GA_get_fee_estimates');
  late final _GA_get_fee_estimates =
      _GA_get_fee_estimatesPtr.asFunction<DartGA_get_fee_estimates>();

  /// Get the user's credentials.
  ///
  /// :param session: The session to use.
  /// :param details: The :ref:`get-credentials-details` to get the credentials.
  /// :param call: Destination for the resulting GA_auth_handler to get the user's credentials.
  /// |     The call handlers result is :ref:`login-credentials`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  int GA_get_credentials(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_get_credentials(
      session,
      details,
      call,
    );
  }

  late final _GA_get_credentialsPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_credentials>>(
          'GA_get_credentials');
  late final _GA_get_credentials =
      _GA_get_credentialsPtr.asFunction<DartGA_get_credentials>();

  /// Get the latest un-acknowledged system message.
  ///
  /// :param session: The session to use.
  /// :param message_text: The returned UTF-8 encoded message text.
  /// |     Returned string should be freed using `GA_destroy_string`.
  ///
  /// .. note:: If all current messages are acknowledged, an empty string is returned.
  int GA_get_system_message(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<ffi.Char>> message_text,
  ) {
    return _GA_get_system_message(
      session,
      message_text,
    );
  }

  late final _GA_get_system_messagePtr =
      _lookup<ffi.NativeFunction<NativeGA_get_system_message>>(
          'GA_get_system_message');
  late final _GA_get_system_message =
      _GA_get_system_messagePtr.asFunction<DartGA_get_system_message>();

  /// Sign and acknowledge a system message.
  ///
  /// The message text will be signed with a key derived from the wallet master key and the signature
  /// sent to the server.
  ///
  /// :param session: The session to use.
  /// :param message_text: UTF-8 encoded message text being acknowledged.
  /// :param call: Destination for the resulting GA_auth_handler to acknowledge the message.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  int GA_ack_system_message(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> message_text,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_ack_system_message(
      session,
      message_text,
      call,
    );
  }

  late final _GA_ack_system_messagePtr =
      _lookup<ffi.NativeFunction<NativeGA_ack_system_message>>(
          'GA_ack_system_message');
  late final _GA_ack_system_message =
      _GA_ack_system_messagePtr.asFunction<DartGA_ack_system_message>();

  /// Get the two factor configuration for the current user.
  ///
  /// :param session: The session to use.
  /// :param config: Destination for the returned :ref:`twofactor_configuration`.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  int GA_get_twofactor_config(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_json>> config,
  ) {
    return _GA_get_twofactor_config(
      session,
      config,
    );
  }

  late final _GA_get_twofactor_configPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_twofactor_config>>(
          'GA_get_twofactor_config');
  late final _GA_get_twofactor_config =
      _GA_get_twofactor_configPtr.asFunction<DartGA_get_twofactor_config>();

  /// Change wallet settings.
  ///
  /// :param session: The session to use.
  /// :param settings: The new :ref:`settings` values.
  /// :param call: Destination for the resulting GA_auth_handler.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``settings`` will be emptied when the call completes.
  int GA_change_settings(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> settings,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_change_settings(
      session,
      settings,
      call,
    );
  }

  late final _GA_change_settingsPtr =
      _lookup<ffi.NativeFunction<NativeGA_change_settings>>(
          'GA_change_settings');
  late final _GA_change_settings =
      _GA_change_settingsPtr.asFunction<DartGA_change_settings>();

  /// Get current wallet settings.
  ///
  /// :param session: The session to use.
  /// :param settings: Destination for the current :ref:`settings`.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  int GA_get_settings(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_json>> settings,
  ) {
    return _GA_get_settings(
      session,
      settings,
    );
  }

  late final _GA_get_settingsPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_settings>>('GA_get_settings');
  late final _GA_get_settings =
      _GA_get_settingsPtr.asFunction<DartGA_get_settings>();

  int GA_convert_json_to_string(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Pointer<ffi.Char>> output,
  ) {
    return _GA_convert_json_to_string(
      json,
      output,
    );
  }

  late final _GA_convert_json_to_stringPtr =
      _lookup<ffi.NativeFunction<NativeGA_convert_json_to_string>>(
          'GA_convert_json_to_string');
  late final _GA_convert_json_to_string =
      _GA_convert_json_to_stringPtr.asFunction<DartGA_convert_json_to_string>();

  int GA_convert_string_to_json(
    ffi.Pointer<ffi.Char> input,
    ffi.Pointer<ffi.Pointer<GA_json>> output,
  ) {
    return _GA_convert_string_to_json(
      input,
      output,
    );
  }

  late final _GA_convert_string_to_jsonPtr =
      _lookup<ffi.NativeFunction<NativeGA_convert_string_to_json>>(
          'GA_convert_string_to_json');
  late final _GA_convert_string_to_json =
      _GA_convert_string_to_jsonPtr.asFunction<DartGA_convert_string_to_json>();

  int GA_convert_json_value_to_string(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> output,
  ) {
    return _GA_convert_json_value_to_string(
      json,
      path,
      output,
    );
  }

  late final _GA_convert_json_value_to_stringPtr =
      _lookup<ffi.NativeFunction<NativeGA_convert_json_value_to_string>>(
          'GA_convert_json_value_to_string');
  late final _GA_convert_json_value_to_string =
      _GA_convert_json_value_to_stringPtr.asFunction<
          DartGA_convert_json_value_to_string>();

  int GA_convert_json_value_to_uint32(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Uint32> output,
  ) {
    return _GA_convert_json_value_to_uint32(
      json,
      path,
      output,
    );
  }

  late final _GA_convert_json_value_to_uint32Ptr =
      _lookup<ffi.NativeFunction<NativeGA_convert_json_value_to_uint32>>(
          'GA_convert_json_value_to_uint32');
  late final _GA_convert_json_value_to_uint32 =
      _GA_convert_json_value_to_uint32Ptr.asFunction<
          DartGA_convert_json_value_to_uint32>();

  int GA_convert_json_value_to_uint64(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Uint64> output,
  ) {
    return _GA_convert_json_value_to_uint64(
      json,
      path,
      output,
    );
  }

  late final _GA_convert_json_value_to_uint64Ptr =
      _lookup<ffi.NativeFunction<NativeGA_convert_json_value_to_uint64>>(
          'GA_convert_json_value_to_uint64');
  late final _GA_convert_json_value_to_uint64 =
      _GA_convert_json_value_to_uint64Ptr.asFunction<
          DartGA_convert_json_value_to_uint64>();

  int GA_convert_json_value_to_bool(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Uint32> output,
  ) {
    return _GA_convert_json_value_to_bool(
      json,
      path,
      output,
    );
  }

  late final _GA_convert_json_value_to_boolPtr =
      _lookup<ffi.NativeFunction<NativeGA_convert_json_value_to_bool>>(
          'GA_convert_json_value_to_bool');
  late final _GA_convert_json_value_to_bool = _GA_convert_json_value_to_boolPtr
      .asFunction<DartGA_convert_json_value_to_bool>();

  int GA_convert_json_value_to_json(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Pointer<GA_json>> output,
  ) {
    return _GA_convert_json_value_to_json(
      json,
      path,
      output,
    );
  }

  late final _GA_convert_json_value_to_jsonPtr =
      _lookup<ffi.NativeFunction<NativeGA_convert_json_value_to_json>>(
          'GA_convert_json_value_to_json');
  late final _GA_convert_json_value_to_json = _GA_convert_json_value_to_jsonPtr
      .asFunction<DartGA_convert_json_value_to_json>();

  /// Free a GA_json object.
  ///
  /// :param json: GA_json object to free.
  int GA_destroy_json(
    ffi.Pointer<GA_json> json,
  ) {
    return _GA_destroy_json(
      json,
    );
  }

  late final _GA_destroy_jsonPtr =
      _lookup<ffi.NativeFunction<NativeGA_destroy_json>>('GA_destroy_json');
  late final _GA_destroy_json =
      _GA_destroy_jsonPtr.asFunction<DartGA_destroy_json>();

  /// Get the status/result of an action requiring authorization.
  ///
  /// :param call: The auth_handler whose status is to be queried.
  /// :param output: Destination for the resulting :ref:`auth-handler-status`.
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  ///
  /// Methods in the api that may require two factor or hardware authentication
  /// to complete return a GA_auth_handler object. This object encapsulates the
  /// process of determining whether authentication is required and handling
  /// conditions such as re-prompting and re-trying after an incorrect two
  /// factor code is entered.
  ///
  /// The object acts as a state machine which is stepped through by the caller
  /// until the desired action is completed. At each step, the current state can
  /// be determined and used to perform the next action required.
  ///
  /// Some actions require a sequence of codes and decisions; these are hidden
  /// behind the state machine interface so that callers do not need to handle
  /// special cases or program their own logic to handle any lower level API
  /// differences.
  ///
  /// The state machine has the following states, which are returned in the
  /// ``"status"`` element from `GA_auth_handler_get_status`:
  ///
  /// * ``"done"``: The action has been completed successfully. Any data returned
  /// |  from the action is present in the ``"result"`` element of the status JSON.
  /// | The auth_handler object should be destroyed using `GA_destroy_auth_handler`
  /// | after receiving this status.
  ///
  /// * ``"error"``: A non-recoverable error occurred performing the action. The
  /// | associated error message is given in the status element ``"error"``. The
  /// | auth_handler object should be destroyed using `GA_destroy_auth_handler` and
  /// | the action restarted from scratch if this state is returned.
  ///
  /// * ``"request_code"``: Two factor authorization is required. The caller should
  /// | prompt the user to choose a two factor method from the ``"methods"`` element
  /// | and call `GA_auth_handler_request_code` with the selected method.
  ///
  /// * ``"resolve_code"``: A twofactor code from the ``"request_code"`` step, or
  /// | data from a hardware device is required. If the status JSON contains
  /// | :ref:`hw-required-data`, then see :ref:`hw-resolve-overview` for details.
  /// | Otherwise, to resolve a twofactor code, the caller should prompt the user
  /// | to enter the code from the twofactor method chosen in the ``"request_code"``
  /// | step, and pass this code to `GA_auth_handler_resolve_code`.
  ///
  /// * ``"call"``: Twofactor or hardware authorization is complete and the caller
  /// | should call `GA_auth_handler_call` to perform the action.
  int GA_auth_handler_get_status(
    ffi.Pointer<GA_auth_handler> call,
    ffi.Pointer<ffi.Pointer<GA_json>> output,
  ) {
    return _GA_auth_handler_get_status(
      call,
      output,
    );
  }

  late final _GA_auth_handler_get_statusPtr =
      _lookup<ffi.NativeFunction<NativeGA_auth_handler_get_status>>(
          'GA_auth_handler_get_status');
  late final _GA_auth_handler_get_status = _GA_auth_handler_get_statusPtr
      .asFunction<DartGA_auth_handler_get_status>();

  /// Request a two factor authentication code to authorize an action.
  ///
  /// :param call: The auth_handler representing the action to perform.
  /// :param method: The selected two factor method to use
  int GA_auth_handler_request_code(
    ffi.Pointer<GA_auth_handler> call,
    ffi.Pointer<ffi.Char> method,
  ) {
    return _GA_auth_handler_request_code(
      call,
      method,
    );
  }

  late final _GA_auth_handler_request_codePtr =
      _lookup<ffi.NativeFunction<NativeGA_auth_handler_request_code>>(
          'GA_auth_handler_request_code');
  late final _GA_auth_handler_request_code = _GA_auth_handler_request_codePtr
      .asFunction<DartGA_auth_handler_request_code>();

  /// Authorize an action by providing its previously requested two factor authentication code.
  ///
  /// :param call: The auth_handler representing the action to perform.
  /// :param code: The two factor authentication code received by the user, or
  /// |    the serialised JSON response for hardware interaction (see :ref:`hw-resolve-overview`).
  int GA_auth_handler_resolve_code(
    ffi.Pointer<GA_auth_handler> call,
    ffi.Pointer<ffi.Char> code,
  ) {
    return _GA_auth_handler_resolve_code(
      call,
      code,
    );
  }

  late final _GA_auth_handler_resolve_codePtr =
      _lookup<ffi.NativeFunction<NativeGA_auth_handler_resolve_code>>(
          'GA_auth_handler_resolve_code');
  late final _GA_auth_handler_resolve_code = _GA_auth_handler_resolve_codePtr
      .asFunction<DartGA_auth_handler_resolve_code>();

  /// Perform an action following the completion of authorization.
  ///
  /// :param call: The auth_handler representing the action to perform.
  int GA_auth_handler_call(
    ffi.Pointer<GA_auth_handler> call,
  ) {
    return _GA_auth_handler_call(
      call,
    );
  }

  late final _GA_auth_handler_callPtr =
      _lookup<ffi.NativeFunction<NativeGA_auth_handler_call>>(
          'GA_auth_handler_call');
  late final _GA_auth_handler_call =
      _GA_auth_handler_callPtr.asFunction<DartGA_auth_handler_call>();

  /// Free an auth_handler after use.
  ///
  /// :param call: The auth_handler to free.
  int GA_destroy_auth_handler(
    ffi.Pointer<GA_auth_handler> call,
  ) {
    return _GA_destroy_auth_handler(
      call,
    );
  }

  late final _GA_destroy_auth_handlerPtr =
      _lookup<ffi.NativeFunction<NativeGA_destroy_auth_handler>>(
          'GA_destroy_auth_handler');
  late final _GA_destroy_auth_handler =
      _GA_destroy_auth_handlerPtr.asFunction<DartGA_destroy_auth_handler>();

  /// Enable or disable a two factor authentication method.
  ///
  /// :param session: The session to use
  /// :param method: The two factor method to enable/disable, i.e. ``"email"``, ``"sms"``, ``"phone"``, ``"gauth"``
  /// :param twofactor_details: The two factor method and associated data such as an email address. :ref:`twofactor-detail`
  /// :param call: Destination for the resulting GA_auth_handler to perform the action
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``twofactor_details`` will be emptied when the call completes.
  int GA_change_settings_twofactor(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> method,
    ffi.Pointer<GA_json> twofactor_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_change_settings_twofactor(
      session,
      method,
      twofactor_details,
      call,
    );
  }

  late final _GA_change_settings_twofactorPtr =
      _lookup<ffi.NativeFunction<NativeGA_change_settings_twofactor>>(
          'GA_change_settings_twofactor');
  late final _GA_change_settings_twofactor = _GA_change_settings_twofactorPtr
      .asFunction<DartGA_change_settings_twofactor>();

  /// Request to begin the two factor authentication reset process.
  ///
  /// Returns the ``"twofactor_reset"`` portion of :ref:`twofactor_configuration` in
  /// the GA_auth_handler result.
  ///
  /// :param session: The session to use.
  /// :param email: The new email address to enable once the reset waiting period expires.
  /// :param is_dispute: GA_TRUE if the reset request is disputed, GA_FALSE otherwise.
  /// :param call: Destination for the resulting GA_auth_handler to request the reset.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  int GA_twofactor_reset(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> email,
    int is_dispute,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_twofactor_reset(
      session,
      email,
      is_dispute,
      call,
    );
  }

  late final _GA_twofactor_resetPtr =
      _lookup<ffi.NativeFunction<NativeGA_twofactor_reset>>(
          'GA_twofactor_reset');
  late final _GA_twofactor_reset =
      _GA_twofactor_resetPtr.asFunction<DartGA_twofactor_reset>();

  /// Undo a request to begin the two factor authentication reset process.
  ///
  /// Returns the ``"twofactor_reset"`` portion of :ref:`twofactor_configuration` in
  /// the GA_auth_handler result.
  ///
  /// :param session: The session to use.
  /// :param email: The email address to cancel the reset request for. Must be
  /// |     the email previously passed to `GA_twofactor_reset`.
  /// :param call: Destination for the resulting GA_auth_handler to request the reset.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: Unlike `GA_twofactor_cancel_reset`, this call only removes the reset
  /// |     request associated with the given email. If other emails have requested
  /// |     a reset, the wallet will still remain locked following this call.
  int GA_twofactor_undo_reset(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> email,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_twofactor_undo_reset(
      session,
      email,
      call,
    );
  }

  late final _GA_twofactor_undo_resetPtr =
      _lookup<ffi.NativeFunction<NativeGA_twofactor_undo_reset>>(
          'GA_twofactor_undo_reset');
  late final _GA_twofactor_undo_reset =
      _GA_twofactor_undo_resetPtr.asFunction<DartGA_twofactor_undo_reset>();

  /// Cancel all two factor reset requests and unlock the wallet for normal operation.
  ///
  /// This call requires authentication using an existing wallet twofactor method.
  ///
  /// Returns the ``"twofactor_reset"`` portion of :ref:`twofactor_configuration` in
  /// the GA_auth_handler result.
  ///
  /// :param session: The session to use.
  /// :param call: Destination for the resulting GA_auth_handler to cancel the reset.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  int GA_twofactor_cancel_reset(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_twofactor_cancel_reset(
      session,
      call,
    );
  }

  late final _GA_twofactor_cancel_resetPtr =
      _lookup<ffi.NativeFunction<NativeGA_twofactor_cancel_reset>>(
          'GA_twofactor_cancel_reset');
  late final _GA_twofactor_cancel_reset =
      _GA_twofactor_cancel_resetPtr.asFunction<DartGA_twofactor_cancel_reset>();

  /// Change twofactor limits settings.
  ///
  /// :param session: The session to use.
  /// :param limit_details: Details of the new :ref:`transaction-limits`
  /// :param call: Destination for the resulting GA_auth_handler to perform the change.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``limit_details`` will be emptied when the call completes.
  int GA_twofactor_change_limits(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> limit_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_twofactor_change_limits(
      session,
      limit_details,
      call,
    );
  }

  late final _GA_twofactor_change_limitsPtr =
      _lookup<ffi.NativeFunction<NativeGA_twofactor_change_limits>>(
          'GA_twofactor_change_limits');
  late final _GA_twofactor_change_limits = _GA_twofactor_change_limitsPtr
      .asFunction<DartGA_twofactor_change_limits>();

  /// Encode CBOR into (potentially multi-part) UR-encoding.
  ///
  /// :param session: The session to use.
  /// :param details: :ref:`bcur-encode` containing the CBOR data to encode.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     The call handlers result is :ref:`bcur-encoded`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  int GA_bcur_encode(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_bcur_encode(
      session,
      details,
      call,
    );
  }

  late final _GA_bcur_encodePtr =
      _lookup<ffi.NativeFunction<NativeGA_bcur_encode>>('GA_bcur_encode');
  late final _GA_bcur_encode =
      _GA_bcur_encodePtr.asFunction<DartGA_bcur_encode>();

  /// Decode (potentially multi-part) UR-encoded data to CBOR.
  ///
  /// :param session: The session to use.
  /// :param details: :ref:`bcur-decode` containing the the first URI to decode.
  /// :param call: Destination for the resulting GA_auth_handler to complete the action.
  /// |     The call handlers result is :ref:`bcur-decoded`.
  /// |     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`.
  ///
  /// For multi-part data, the call hander will request further parts using
  /// ``"request_code"`` with a method of ``"data"``. see: `auth-handler-status`.
  ///
  /// .. note:: When calling from C/C++, the parameter ``details`` will be emptied when the call completes.
  int GA_bcur_decode(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call,
  ) {
    return _GA_bcur_decode(
      session,
      details,
      call,
    );
  }

  late final _GA_bcur_decodePtr =
      _lookup<ffi.NativeFunction<NativeGA_bcur_decode>>('GA_bcur_decode');
  late final _GA_bcur_decode =
      _GA_bcur_decodePtr.asFunction<DartGA_bcur_decode>();

  /// Free a string returned by the api.
  ///
  /// :param str: The string to free.
  void GA_destroy_string(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _GA_destroy_string(
      str,
    );
  }

  late final _GA_destroy_stringPtr =
      _lookup<ffi.NativeFunction<NativeGA_destroy_string>>('GA_destroy_string');
  late final _GA_destroy_string =
      _GA_destroy_stringPtr.asFunction<DartGA_destroy_string>();

  /// Get up to 32 random bytes.
  ///
  /// Generate up to 32 random bytes using the same strategy as Bitcoin Core code.
  ///
  /// :param output_bytes: bytes output buffer
  /// :param siz: Number of bytes to return (max. 32)
  int GA_get_random_bytes(
    int num_bytes,
    ffi.Pointer<ffi.UnsignedChar> output_bytes,
    int len,
  ) {
    return _GA_get_random_bytes(
      num_bytes,
      output_bytes,
      len,
    );
  }

  late final _GA_get_random_bytesPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_random_bytes>>(
          'GA_get_random_bytes');
  late final _GA_get_random_bytes =
      _GA_get_random_bytesPtr.asFunction<DartGA_get_random_bytes>();

  /// Generate a new random BIP 39 mnemonic.
  ///
  /// :param output: The generated mnemonic phrase.
  /// |     Returned string should be freed using `GA_destroy_string`.
  int GA_generate_mnemonic(
    ffi.Pointer<ffi.Pointer<ffi.Char>> output,
  ) {
    return _GA_generate_mnemonic(
      output,
    );
  }

  late final _GA_generate_mnemonicPtr =
      _lookup<ffi.NativeFunction<NativeGA_generate_mnemonic>>(
          'GA_generate_mnemonic');
  late final _GA_generate_mnemonic =
      _GA_generate_mnemonicPtr.asFunction<DartGA_generate_mnemonic>();

  /// Generate a new random 12 word BIP 39 mnemonic.
  ///
  /// :param output: The generated mnemonic phrase.
  /// |     Returned string should be freed using `GA_destroy_string`.
  int GA_generate_mnemonic_12(
    ffi.Pointer<ffi.Pointer<ffi.Char>> output,
  ) {
    return _GA_generate_mnemonic_12(
      output,
    );
  }

  late final _GA_generate_mnemonic_12Ptr =
      _lookup<ffi.NativeFunction<NativeGA_generate_mnemonic_12>>(
          'GA_generate_mnemonic_12');
  late final _GA_generate_mnemonic_12 =
      _GA_generate_mnemonic_12Ptr.asFunction<DartGA_generate_mnemonic_12>();

  /// Validate a BIP 39 mnemonic.
  ///
  /// :param mnemonic: The mnemonic phrase
  /// :param valid: Destination for the result: GA_TRUE if the mnemonic is valid else GA_FALSE
  int GA_validate_mnemonic(
    ffi.Pointer<ffi.Char> mnemonic,
    ffi.Pointer<ffi.Uint32> valid,
  ) {
    return _GA_validate_mnemonic(
      mnemonic,
      valid,
    );
  }

  late final _GA_validate_mnemonicPtr =
      _lookup<ffi.NativeFunction<NativeGA_validate_mnemonic>>(
          'GA_validate_mnemonic');
  late final _GA_validate_mnemonic =
      _GA_validate_mnemonicPtr.asFunction<DartGA_validate_mnemonic>();

  /// Register a network configuration
  ///
  /// :param name: The name of the network to register
  /// :param network_details: The :ref:`network` configuration to register
  ///
  /// Any existing configuration with the same name is overwritten.
  /// If the provided JSON is empty, any existing configuration for
  /// the network is removed.
  int GA_register_network(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<GA_json> network_details,
  ) {
    return _GA_register_network(
      name,
      network_details,
    );
  }

  late final _GA_register_networkPtr =
      _lookup<ffi.NativeFunction<NativeGA_register_network>>(
          'GA_register_network');
  late final _GA_register_network =
      _GA_register_networkPtr.asFunction<DartGA_register_network>();

  /// Get the available network configurations
  ///
  /// :param output: Destination for the :ref:`networks-list`
  /// |     Returned GA_json should be freed using `GA_destroy_json`.
  int GA_get_networks(
    ffi.Pointer<ffi.Pointer<GA_json>> output,
  ) {
    return _GA_get_networks(
      output,
    );
  }

  late final _GA_get_networksPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_networks>>('GA_get_networks');
  late final _GA_get_networks =
      _GA_get_networksPtr.asFunction<DartGA_get_networks>();

  /// Get a uint32_t in the range 0 to (upper_bound - 1) without bias
  ///
  /// :param output: Destination for the generated uint32_t.
  int GA_get_uniform_uint32_t(
    int upper_bound,
    ffi.Pointer<ffi.Uint32> output,
  ) {
    return _GA_get_uniform_uint32_t(
      upper_bound,
      output,
    );
  }

  late final _GA_get_uniform_uint32_tPtr =
      _lookup<ffi.NativeFunction<NativeGA_get_uniform_uint32_t>>(
          'GA_get_uniform_uint32_t');
  late final _GA_get_uniform_uint32_t =
      _GA_get_uniform_uint32_tPtr.asFunction<DartGA_get_uniform_uint32_t>();

  int __ctype_get_mb_cur_max() {
    return ___ctype_get_mb_cur_max();
  }

  late final ___ctype_get_mb_cur_maxPtr =
      _lookup<ffi.NativeFunction<Native__ctype_get_mb_cur_max>>(
          '__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max =
      ___ctype_get_mb_cur_maxPtr.asFunction<Dart__ctype_get_mb_cur_max>();

  double atof(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof(
      __nptr,
    );
  }

  late final _atofPtr = _lookup<ffi.NativeFunction<NativeAtof>>('atof');
  late final _atof = _atofPtr.asFunction<DartAtof>();

  int atoi(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi(
      __nptr,
    );
  }

  late final _atoiPtr = _lookup<ffi.NativeFunction<NativeAtoi>>('atoi');
  late final _atoi = _atoiPtr.asFunction<DartAtoi>();

  int atol(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol(
      __nptr,
    );
  }

  late final _atolPtr = _lookup<ffi.NativeFunction<NativeAtol>>('atol');
  late final _atol = _atolPtr.asFunction<DartAtol>();

  int atoll(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll(
      __nptr,
    );
  }

  late final _atollPtr = _lookup<ffi.NativeFunction<NativeAtoll>>('atoll');
  late final _atoll = _atollPtr.asFunction<DartAtoll>();

  double strtod(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod(
      __nptr,
      __endptr,
    );
  }

  late final _strtodPtr = _lookup<ffi.NativeFunction<NativeStrtod>>('strtod');
  late final _strtod = _strtodPtr.asFunction<DartStrtod>();

  double strtof(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof(
      __nptr,
      __endptr,
    );
  }

  late final _strtofPtr = _lookup<ffi.NativeFunction<NativeStrtof>>('strtof');
  late final _strtof = _strtofPtr.asFunction<DartStrtof>();

  int strtol(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<ffi.NativeFunction<NativeStrtol>>('strtol');
  late final _strtol = _strtolPtr.asFunction<DartStrtol>();

  int strtoul(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr =
      _lookup<ffi.NativeFunction<NativeStrtoul>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<DartStrtoul>();

  int strtoq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<ffi.NativeFunction<NativeStrtoq>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<DartStrtoq>();

  int strtouq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr =
      _lookup<ffi.NativeFunction<NativeStrtouq>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<DartStrtouq>();

  int strtoll(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr =
      _lookup<ffi.NativeFunction<NativeStrtoll>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<DartStrtoll>();

  int strtoull(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr =
      _lookup<ffi.NativeFunction<NativeStrtoull>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<DartStrtoull>();

  ffi.Pointer<ffi.Char> l64a(
    int __n,
  ) {
    return _l64a(
      __n,
    );
  }

  late final _l64aPtr = _lookup<ffi.NativeFunction<NativeL64a>>('l64a');
  late final _l64a = _l64aPtr.asFunction<DartL64a>();

  int a64l(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l(
      __s,
    );
  }

  late final _a64lPtr = _lookup<ffi.NativeFunction<NativeA64l>>('a64l');
  late final _a64l = _a64lPtr.asFunction<DartA64l>();

  int random() {
    return _random();
  }

  late final _randomPtr = _lookup<ffi.NativeFunction<NativeRandom>>('random');
  late final _random = _randomPtr.asFunction<DartRandom>();

  void srandom(
    int __seed,
  ) {
    return _srandom(
      __seed,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<NativeSrandom>>('srandom');
  late final _srandom = _srandomPtr.asFunction<DartSrandom>();

  ffi.Pointer<ffi.Char> initstate(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstatePtr =
      _lookup<ffi.NativeFunction<NativeInitstate>>('initstate');
  late final _initstate = _initstatePtr.asFunction<DartInitstate>();

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate(
      __statebuf,
    );
  }

  late final _setstatePtr =
      _lookup<ffi.NativeFunction<NativeSetstate>>('setstate');
  late final _setstate = _setstatePtr.asFunction<DartSetstate>();

  int random_r(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r(
      __buf,
      __result,
    );
  }

  late final _random_rPtr =
      _lookup<ffi.NativeFunction<NativeRandom_r>>('random_r');
  late final _random_r = _random_rPtr.asFunction<DartRandom_r>();

  int srandom_r(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r(
      __seed,
      __buf,
    );
  }

  late final _srandom_rPtr =
      _lookup<ffi.NativeFunction<NativeSrandom_r>>('srandom_r');
  late final _srandom_r = _srandom_rPtr.asFunction<DartSrandom_r>();

  int initstate_r(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_rPtr =
      _lookup<ffi.NativeFunction<NativeInitstate_r>>('initstate_r');
  late final _initstate_r = _initstate_rPtr.asFunction<DartInitstate_r>();

  int setstate_r(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_rPtr =
      _lookup<ffi.NativeFunction<NativeSetstate_r>>('setstate_r');
  late final _setstate_r = _setstate_rPtr.asFunction<DartSetstate_r>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<NativeRand>>('rand');
  late final _rand = _randPtr.asFunction<DartRand>();

  void srand(
    int __seed,
  ) {
    return _srand(
      __seed,
    );
  }

  late final _srandPtr = _lookup<ffi.NativeFunction<NativeSrand>>('srand');
  late final _srand = _srandPtr.asFunction<DartSrand>();

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r(
      __seed,
    );
  }

  late final _rand_rPtr = _lookup<ffi.NativeFunction<NativeRand_r>>('rand_r');
  late final _rand_r = _rand_rPtr.asFunction<DartRand_r>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<NativeDrand48>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<DartDrand48>();

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand48(
      __xsubi,
    );
  }

  late final _erand48Ptr =
      _lookup<ffi.NativeFunction<NativeErand48>>('erand48');
  late final _erand48 = _erand48Ptr.asFunction<DartErand48>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<NativeLrand48>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<DartLrand48>();

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand48(
      __xsubi,
    );
  }

  late final _nrand48Ptr =
      _lookup<ffi.NativeFunction<NativeNrand48>>('nrand48');
  late final _nrand48 = _nrand48Ptr.asFunction<DartNrand48>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<NativeMrand48>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<DartMrand48>();

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand48(
      __xsubi,
    );
  }

  late final _jrand48Ptr =
      _lookup<ffi.NativeFunction<NativeJrand48>>('jrand48');
  late final _jrand48 = _jrand48Ptr.asFunction<DartJrand48>();

  void srand48(
    int __seedval,
  ) {
    return _srand48(
      __seedval,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<NativeSrand48>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<DartSrand48>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed48(
      __seed16v,
    );
  }

  late final _seed48Ptr = _lookup<ffi.NativeFunction<NativeSeed48>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<DartSeed48>();

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong48(
      __param,
    );
  }

  late final _lcong48Ptr =
      _lookup<ffi.NativeFunction<NativeLcong48>>('lcong48');
  late final _lcong48 = _lcong48Ptr.asFunction<DartLcong48>();

  int drand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r(
      __buffer,
      __result,
    );
  }

  late final _drand48_rPtr =
      _lookup<ffi.NativeFunction<NativeDrand48_r>>('drand48_r');
  late final _drand48_r = _drand48_rPtr.asFunction<DartDrand48_r>();

  int erand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_rPtr =
      _lookup<ffi.NativeFunction<NativeErand48_r>>('erand48_r');
  late final _erand48_r = _erand48_rPtr.asFunction<DartErand48_r>();

  int lrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r(
      __buffer,
      __result,
    );
  }

  late final _lrand48_rPtr =
      _lookup<ffi.NativeFunction<NativeLrand48_r>>('lrand48_r');
  late final _lrand48_r = _lrand48_rPtr.asFunction<DartLrand48_r>();

  int nrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_rPtr =
      _lookup<ffi.NativeFunction<NativeNrand48_r>>('nrand48_r');
  late final _nrand48_r = _nrand48_rPtr.asFunction<DartNrand48_r>();

  int mrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r(
      __buffer,
      __result,
    );
  }

  late final _mrand48_rPtr =
      _lookup<ffi.NativeFunction<NativeMrand48_r>>('mrand48_r');
  late final _mrand48_r = _mrand48_rPtr.asFunction<DartMrand48_r>();

  int jrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_rPtr =
      _lookup<ffi.NativeFunction<NativeJrand48_r>>('jrand48_r');
  late final _jrand48_r = _jrand48_rPtr.asFunction<DartJrand48_r>();

  int srand48_r(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_rPtr =
      _lookup<ffi.NativeFunction<NativeSrand48_r>>('srand48_r');
  late final _srand48_r = _srand48_rPtr.asFunction<DartSrand48_r>();

  int seed48_r(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_rPtr =
      _lookup<ffi.NativeFunction<NativeSeed48_r>>('seed48_r');
  late final _seed48_r = _seed48_rPtr.asFunction<DartSeed48_r>();

  int lcong48_r(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r(
      __param,
      __buffer,
    );
  }

  late final _lcong48_rPtr =
      _lookup<ffi.NativeFunction<NativeLcong48_r>>('lcong48_r');
  late final _lcong48_r = _lcong48_rPtr.asFunction<DartLcong48_r>();

  int arc4random() {
    return _arc4random();
  }

  late final _arc4randomPtr =
      _lookup<ffi.NativeFunction<NativeArc4random>>('arc4random');
  late final _arc4random = _arc4randomPtr.asFunction<DartArc4random>();

  void arc4random_buf(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf(
      __buf,
      __size,
    );
  }

  late final _arc4random_bufPtr =
      _lookup<ffi.NativeFunction<NativeArc4random_buf>>('arc4random_buf');
  late final _arc4random_buf =
      _arc4random_bufPtr.asFunction<DartArc4random_buf>();

  int arc4random_uniform(
    int __upper_bound,
  ) {
    return _arc4random_uniform(
      __upper_bound,
    );
  }

  late final _arc4random_uniformPtr =
      _lookup<ffi.NativeFunction<NativeArc4random_uniform>>(
          'arc4random_uniform');
  late final _arc4random_uniform =
      _arc4random_uniformPtr.asFunction<DartArc4random_uniform>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr = _lookup<ffi.NativeFunction<NativeMalloc>>('malloc');
  late final _malloc = _mallocPtr.asFunction<DartMalloc>();

  ffi.Pointer<ffi.Void> calloc(
    int __nmemb,
    int __size,
  ) {
    return _calloc(
      __nmemb,
      __size,
    );
  }

  late final _callocPtr = _lookup<ffi.NativeFunction<NativeCalloc>>('calloc');
  late final _calloc = _callocPtr.asFunction<DartCalloc>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr =
      _lookup<ffi.NativeFunction<NativeRealloc>>('realloc');
  late final _realloc = _reallocPtr.asFunction<DartRealloc>();

  void free(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free(
      __ptr,
    );
  }

  late final _freePtr = _lookup<ffi.NativeFunction<NativeFree>>('free');
  late final _free = _freePtr.asFunction<DartFree>();

  ffi.Pointer<ffi.Void> reallocarray(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarrayPtr =
      _lookup<ffi.NativeFunction<NativeReallocarray>>('reallocarray');
  late final _reallocarray = _reallocarrayPtr.asFunction<DartReallocarray>();

  ffi.Pointer<ffi.Void> alloca(
    int __size,
  ) {
    return _alloca(
      __size,
    );
  }

  late final _allocaPtr = _lookup<ffi.NativeFunction<NativeAlloca>>('alloca');
  late final _alloca = _allocaPtr.asFunction<DartAlloca>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _vallocPtr = _lookup<ffi.NativeFunction<NativeValloc>>('valloc');
  late final _valloc = _vallocPtr.asFunction<DartValloc>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr =
      _lookup<ffi.NativeFunction<NativePosix_memalign>>('posix_memalign');
  late final _posix_memalign =
      _posix_memalignPtr.asFunction<DartPosix_memalign>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr =
      _lookup<ffi.NativeFunction<NativeAligned_alloc>>('aligned_alloc');
  late final _aligned_alloc = _aligned_allocPtr.asFunction<DartAligned_alloc>();

  void abort() {
    return _abort();
  }

  late final _abortPtr = _lookup<ffi.NativeFunction<NativeAbort>>('abort');
  late final _abort = _abortPtr.asFunction<DartAbort>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit(
      __func,
    );
  }

  late final _atexitPtr = _lookup<ffi.NativeFunction<NativeAtexit>>('atexit');
  late final _atexit = _atexitPtr.asFunction<DartAtexit>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit(
      __func,
    );
  }

  late final _at_quick_exitPtr =
      _lookup<ffi.NativeFunction<NativeAt_quick_exit>>('at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<DartAt_quick_exit>();

  int on_exit(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit(
      __func,
      __arg,
    );
  }

  late final _on_exitPtr =
      _lookup<ffi.NativeFunction<NativeOn_exit>>('on_exit');
  late final _on_exit = _on_exitPtr.asFunction<DartOn_exit>();

  void exit(
    int __status,
  ) {
    return _exit(
      __status,
    );
  }

  late final _exitPtr = _lookup<ffi.NativeFunction<NativeExit>>('exit');
  late final _exit = _exitPtr.asFunction<DartExit>();

  void quick_exit(
    int __status,
  ) {
    return _quick_exit(
      __status,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<NativeQuick_exit>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<DartQuick_exit>();

  void _Exit(
    int __status,
  ) {
    return __Exit(
      __status,
    );
  }

  late final __ExitPtr = _lookup<ffi.NativeFunction<Native_Exit>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<Dart_Exit>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv(
      __name,
    );
  }

  late final _getenvPtr = _lookup<ffi.NativeFunction<NativeGetenv>>('getenv');
  late final _getenv = _getenvPtr.asFunction<DartGetenv>();

  int putenv(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv(
      __string,
    );
  }

  late final _putenvPtr = _lookup<ffi.NativeFunction<NativePutenv>>('putenv');
  late final _putenv = _putenvPtr.asFunction<DartPutenv>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenvPtr = _lookup<ffi.NativeFunction<NativeSetenv>>('setenv');
  late final _setenv = _setenvPtr.asFunction<DartSetenv>();

  int unsetenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv(
      __name,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<NativeUnsetenv>>('unsetenv');
  late final _unsetenv = _unsetenvPtr.asFunction<DartUnsetenv>();

  int clearenv() {
    return _clearenv();
  }

  late final _clearenvPtr =
      _lookup<ffi.NativeFunction<NativeClearenv>>('clearenv');
  late final _clearenv = _clearenvPtr.asFunction<DartClearenv>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp(
      __template,
    );
  }

  late final _mktempPtr = _lookup<ffi.NativeFunction<NativeMktemp>>('mktemp');
  late final _mktemp = _mktempPtr.asFunction<DartMktemp>();

  int mkstemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp(
      __template,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<NativeMkstemp>>('mkstemp');
  late final _mkstemp = _mkstempPtr.asFunction<DartMkstemp>();

  int mkstemps(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps(
      __template,
      __suffixlen,
    );
  }

  late final _mkstempsPtr =
      _lookup<ffi.NativeFunction<NativeMkstemps>>('mkstemps');
  late final _mkstemps = _mkstempsPtr.asFunction<DartMkstemps>();

  ffi.Pointer<ffi.Char> mkdtemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp(
      __template,
    );
  }

  late final _mkdtempPtr =
      _lookup<ffi.NativeFunction<NativeMkdtemp>>('mkdtemp');
  late final _mkdtemp = _mkdtempPtr.asFunction<DartMkdtemp>();

  int system(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system(
      __command,
    );
  }

  late final _systemPtr = _lookup<ffi.NativeFunction<NativeSystem>>('system');
  late final _system = _systemPtr.asFunction<DartSystem>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath(
      __name,
      __resolved,
    );
  }

  late final _realpathPtr =
      _lookup<ffi.NativeFunction<NativeRealpath>>('realpath');
  late final _realpath = _realpathPtr.asFunction<DartRealpath>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearchPtr =
      _lookup<ffi.NativeFunction<NativeBsearch>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<DartBsearch>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<ffi.NativeFunction<NativeQsort>>('qsort');
  late final _qsort = _qsortPtr.asFunction<DartQsort>();

  int abs(
    int __x,
  ) {
    return _abs(
      __x,
    );
  }

  late final _absPtr = _lookup<ffi.NativeFunction<NativeAbs>>('abs');
  late final _abs = _absPtr.asFunction<DartAbs>();

  int labs(
    int __x,
  ) {
    return _labs(
      __x,
    );
  }

  late final _labsPtr = _lookup<ffi.NativeFunction<NativeLabs>>('labs');
  late final _labs = _labsPtr.asFunction<DartLabs>();

  int llabs(
    int __x,
  ) {
    return _llabs(
      __x,
    );
  }

  late final _llabsPtr = _lookup<ffi.NativeFunction<NativeLlabs>>('llabs');
  late final _llabs = _llabsPtr.asFunction<DartLlabs>();

  div_t div(
    int __numer,
    int __denom,
  ) {
    return _div(
      __numer,
      __denom,
    );
  }

  late final _divPtr = _lookup<ffi.NativeFunction<NativeDiv>>('div');
  late final _div = _divPtr.asFunction<DartDiv>();

  ldiv_t ldiv(
    int __numer,
    int __denom,
  ) {
    return _ldiv(
      __numer,
      __denom,
    );
  }

  late final _ldivPtr = _lookup<ffi.NativeFunction<NativeLdiv>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<DartLdiv>();

  lldiv_t lldiv(
    int __numer,
    int __denom,
  ) {
    return _lldiv(
      __numer,
      __denom,
    );
  }

  late final _lldivPtr = _lookup<ffi.NativeFunction<NativeLldiv>>('lldiv');
  late final _lldiv = _lldivPtr.asFunction<DartLldiv>();

  ffi.Pointer<ffi.Char> ecvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvtPtr = _lookup<ffi.NativeFunction<NativeEcvt>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<DartEcvt>();

  ffi.Pointer<ffi.Char> fcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvtPtr = _lookup<ffi.NativeFunction<NativeFcvt>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<DartFcvt>();

  ffi.Pointer<ffi.Char> gcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvtPtr = _lookup<ffi.NativeFunction<NativeGcvt>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<DartGcvt>();

  int ecvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_rPtr = _lookup<ffi.NativeFunction<NativeEcvt_r>>('ecvt_r');
  late final _ecvt_r = _ecvt_rPtr.asFunction<DartEcvt_r>();

  int fcvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_rPtr = _lookup<ffi.NativeFunction<NativeFcvt_r>>('fcvt_r');
  late final _fcvt_r = _fcvt_rPtr.asFunction<DartFcvt_r>();

  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<ffi.NativeFunction<NativeMblen>>('mblen');
  late final _mblen = _mblenPtr.asFunction<DartMblen>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowcPtr = _lookup<ffi.NativeFunction<NativeMbtowc>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<DartMbtowc>();

  int wctomb(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb(
      __s,
      __wchar,
    );
  }

  late final _wctombPtr = _lookup<ffi.NativeFunction<NativeWctomb>>('wctomb');
  late final _wctomb = _wctombPtr.asFunction<DartWctomb>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcsPtr =
      _lookup<ffi.NativeFunction<NativeMbstowcs>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<DartMbstowcs>();

  int wcstombs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.WChar> __pwcs,
    int __n,
  ) {
    return _wcstombs(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombsPtr =
      _lookup<ffi.NativeFunction<NativeWcstombs>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<DartWcstombs>();

  int rpmatch(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch(
      __response,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<NativeRpmatch>>('rpmatch');
  late final _rpmatch = _rpmatchPtr.asFunction<DartRpmatch>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsuboptPtr =
      _lookup<ffi.NativeFunction<NativeGetsubopt>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<DartGetsubopt>();

  int getloadavg(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavgPtr =
      _lookup<ffi.NativeFunction<NativeGetloadavg>>('getloadavg');
  late final _getloadavg = _getloadavgPtr.asFunction<DartGetloadavg>();

  int validate_submarine(
    ffi.Pointer<ffi.Char> preimage_hash,
    ffi.Pointer<ffi.Char> claim_public_key,
    ffi.Pointer<ffi.Char> refund_public_key,
    int timeout_block_height,
    ffi.Pointer<ffi.Char> lockup_address,
    ffi.Pointer<ffi.Char> redeem_script,
    ffi.Pointer<ffi.Char> blinding_key,
  ) {
    return _validate_submarine(
      preimage_hash,
      claim_public_key,
      refund_public_key,
      timeout_block_height,
      lockup_address,
      redeem_script,
      blinding_key,
    );
  }

  late final _validate_submarinePtr =
      _lookup<ffi.NativeFunction<NativeValidate_submarine>>(
          'validate_submarine');
  late final _validate_submarine =
      _validate_submarinePtr.asFunction<DartValidate_submarine>();

  ffi.Pointer<ffi.Char> extract_claim_public_key(
    ffi.Pointer<ffi.Char> comparison_script,
  ) {
    return _extract_claim_public_key(
      comparison_script,
    );
  }

  late final _extract_claim_public_keyPtr =
      _lookup<ffi.NativeFunction<NativeExtract_claim_public_key>>(
          'extract_claim_public_key');
  late final _extract_claim_public_key =
      _extract_claim_public_keyPtr.asFunction<DartExtract_claim_public_key>();

  ffi.Pointer<ffi.Char> create_and_sign_claim_transaction(
    ffi.Pointer<ffi.Char> redeem_script,
    ffi.Pointer<ffi.Char> blinding_key,
    ffi.Pointer<ffi.Char> onchain_address,
    ffi.Pointer<ffi.Char> private_key,
    ffi.Pointer<ffi.Char> preimage,
    ffi.Pointer<ffi.Char> tx,
    int fees,
  ) {
    return _create_and_sign_claim_transaction(
      redeem_script,
      blinding_key,
      onchain_address,
      private_key,
      preimage,
      tx,
      fees,
    );
  }

  late final _create_and_sign_claim_transactionPtr =
      _lookup<ffi.NativeFunction<NativeCreate_and_sign_claim_transaction>>(
          'create_and_sign_claim_transaction');
  late final _create_and_sign_claim_transaction =
      _create_and_sign_claim_transactionPtr
          .asFunction<DartCreate_and_sign_claim_transaction>();

  ffi.Pointer<ffi.Char> create_and_sign_refund_transaction(
    ffi.Pointer<ffi.Char> redeem_script,
    ffi.Pointer<ffi.Char> blinding_key,
    ffi.Pointer<ffi.Char> onchain_address,
    ffi.Pointer<ffi.Char> private_key,
    ffi.Pointer<ffi.Char> tx,
    int fees,
  ) {
    return _create_and_sign_refund_transaction(
      redeem_script,
      blinding_key,
      onchain_address,
      private_key,
      tx,
      fees,
    );
  }

  late final _create_and_sign_refund_transactionPtr =
      _lookup<ffi.NativeFunction<NativeCreate_and_sign_refund_transaction>>(
          'create_and_sign_refund_transaction');
  late final _create_and_sign_refund_transaction =
      _create_and_sign_refund_transactionPtr
          .asFunction<DartCreate_and_sign_refund_transaction>();

  ffi.Pointer<ffi.Char> get_key_pair() {
    return _get_key_pair();
  }

  late final _get_key_pairPtr =
      _lookup<ffi.NativeFunction<NativeGet_key_pair>>('get_key_pair');
  late final _get_key_pair = _get_key_pairPtr.asFunction<DartGet_key_pair>();

  ffi.Pointer<ffi.Char> sign_message_schnorr(
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Char> private_key,
  ) {
    return _sign_message_schnorr(
      message,
      private_key,
    );
  }

  late final _sign_message_schnorrPtr =
      _lookup<ffi.NativeFunction<NativeSign_message_schnorr>>(
          'sign_message_schnorr');
  late final _sign_message_schnorr =
      _sign_message_schnorrPtr.asFunction<DartSign_message_schnorr>();

  int verify_signature_schnorr(
    ffi.Pointer<ffi.Char> signature,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Char> public_key,
  ) {
    return _verify_signature_schnorr(
      signature,
      message,
      public_key,
    );
  }

  late final _verify_signature_schnorrPtr =
      _lookup<ffi.NativeFunction<NativeVerify_signature_schnorr>>(
          'verify_signature_schnorr');
  late final _verify_signature_schnorr =
      _verify_signature_schnorrPtr.asFunction<DartVerify_signature_schnorr>();

  TxResult create_taxi_transaction(
    int send_amount,
    ffi.Pointer<ffi.Char> send_address,
    ffi.Pointer<ffi.Char> change_address,
    ffi.Pointer<UtxoFFI> utxos,
    int utxos_len,
    ffi.Pointer<ffi.Char> user_agent,
    ffi.Pointer<ffi.Char> api_key,
    bool subtract_fee_from_amount,
    bool is_lowball,
    bool is_testnet,
  ) {
    return _create_taxi_transaction(
      send_amount,
      send_address,
      change_address,
      utxos,
      utxos_len,
      user_agent,
      api_key,
      subtract_fee_from_amount,
      is_lowball,
      is_testnet,
    );
  }

  late final _create_taxi_transactionPtr =
      _lookup<ffi.NativeFunction<NativeCreate_taxi_transaction>>(
          'create_taxi_transaction');
  late final _create_taxi_transaction =
      _create_taxi_transactionPtr.asFunction<DartCreate_taxi_transaction>();

  TxResult create_final_taxi_pset(
    ffi.Pointer<ffi.Char> client_signed_pset,
    ffi.Pointer<ffi.Char> server_signed_pset,
  ) {
    return _create_final_taxi_pset(
      client_signed_pset,
      server_signed_pset,
    );
  }

  late final _create_final_taxi_psetPtr =
      _lookup<ffi.NativeFunction<NativeCreate_final_taxi_pset>>(
          'create_final_taxi_pset');
  late final _create_final_taxi_pset =
      _create_final_taxi_psetPtr.asFunction<DartCreate_final_taxi_pset>();

  void rust_cstr_free(
    ffi.Pointer<ffi.Char> s,
  ) {
    return _rust_cstr_free(
      s,
    );
  }

  late final _rust_cstr_freePtr =
      _lookup<ffi.NativeFunction<NativeRust_cstr_free>>('rust_cstr_free');
  late final _rust_cstr_free =
      _rust_cstr_freePtr.asFunction<DartRust_cstr_free>();

  void register_log_callback(
    LogCallback callback,
  ) {
    return _register_log_callback(
      callback,
    );
  }

  late final _register_log_callbackPtr =
      _lookup<ffi.NativeFunction<NativeRegister_log_callback>>(
          'register_log_callback');
  late final _register_log_callback =
      _register_log_callbackPtr.asFunction<DartRegister_log_callback>();

  /// Retrieves the last error message, if any.
  ffi.Pointer<ffi.Char> get_last_error() {
    return _get_last_error();
  }

  late final _get_last_errorPtr =
      _lookup<ffi.NativeFunction<NativeGet_last_error>>('get_last_error');
  late final _get_last_error =
      _get_last_errorPtr.asFunction<DartGet_last_error>();
}

final class max_align_t extends ffi.Opaque {}

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

final class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> __val;
}

final class timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

typedef __time_t = ffi.Long;
typedef Dart__time_t = int;
typedef __suseconds_t = ffi.Long;
typedef Dart__suseconds_t = int;

final class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __syscall_slong_t = ffi.Long;
typedef Dart__syscall_slong_t = int;

final class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef __fd_mask = ffi.Long;
typedef Dart__fd_mask = int;
typedef NativeSelect = ffi.Int Function(
    ffi.Int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout);
typedef DartSelect = int Function(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout);
typedef NativePselect = ffi.Int Function(
    ffi.Int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask);
typedef DartPselect = int Function(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask);

final class __atomic_wide_counter extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int __value64;

  external UnnamedStruct1 __value32;
}

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __low;

  @ffi.UnsignedInt()
  external int __high;
}

final class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

final class __pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_slist> __next;
}

final class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Short()
  external int __spins;

  @ffi.Short()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = __pthread_internal_list;

final class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __readers;

  @ffi.UnsignedInt()
  external int __writers;

  @ffi.UnsignedInt()
  external int __wrphase_futex;

  @ffi.UnsignedInt()
  external int __writers_futex;

  @ffi.UnsignedInt()
  external int __pad3;

  @ffi.UnsignedInt()
  external int __pad4;

  @ffi.Int()
  external int __cur_writer;

  @ffi.Int()
  external int __shared;

  @ffi.SignedChar()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedChar> __pad1;

  @ffi.UnsignedLong()
  external int __pad2;

  @ffi.UnsignedInt()
  external int __flags;
}

final class __pthread_cond_s extends ffi.Struct {
  external __atomic_wide_counter __wseq;

  external __atomic_wide_counter __g1_start;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_size;

  @ffi.UnsignedInt()
  external int __g1_orig_size;

  @ffi.UnsignedInt()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_signals;
}

final class __once_flag extends ffi.Struct {
  @ffi.Int()
  external int __data;
}

final class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> __size;

  @ffi.LongLong()
  external int __align;
}

final class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

/// A server session
final class GA_session extends ffi.Opaque {}

final class GA_json extends ffi.Opaque {}

/// An api method call that potentially requires two factor authentication to complete
final class GA_auth_handler extends ffi.Opaque {}

typedef NativeGA_init = ffi.Int Function(ffi.Pointer<GA_json> config);
typedef DartGA_init = int Function(ffi.Pointer<GA_json> config);
typedef NativeGA_get_thread_error_details = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef DartGA_get_thread_error_details = int Function(
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef NativeGA_create_session = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<GA_session>> session);
typedef DartGA_create_session = int Function(
    ffi.Pointer<ffi.Pointer<GA_session>> session);

/// A notification handler
typedef GA_notification_handler
    = ffi.Pointer<ffi.NativeFunction<GA_notification_handlerFunction>>;
typedef GA_notification_handlerFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> context, ffi.Pointer<GA_json> details);
typedef DartGA_notification_handlerFunction = void Function(
    ffi.Pointer<ffi.Void> context, ffi.Pointer<GA_json> details);
typedef NativeGA_set_notification_handler = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    GA_notification_handler handler,
    ffi.Pointer<ffi.Void> context);
typedef DartGA_set_notification_handler = int Function(
    ffi.Pointer<GA_session> session,
    GA_notification_handler handler,
    ffi.Pointer<ffi.Void> context);
typedef NativeGA_destroy_session = ffi.Int Function(
    ffi.Pointer<GA_session> session);
typedef DartGA_destroy_session = int Function(ffi.Pointer<GA_session> session);
typedef NativeGA_connect = ffi.Int Function(
    ffi.Pointer<GA_session> session, ffi.Pointer<GA_json> net_params);
typedef DartGA_connect = int Function(
    ffi.Pointer<GA_session> session, ffi.Pointer<GA_json> net_params);
typedef NativeGA_reconnect_hint = ffi.Int Function(
    ffi.Pointer<GA_session> session, ffi.Pointer<GA_json> hint);
typedef DartGA_reconnect_hint = int Function(
    ffi.Pointer<GA_session> session, ffi.Pointer<GA_json> hint);
typedef NativeGA_get_proxy_settings = ffi.Int Function(
    ffi.Pointer<GA_session> session, ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef DartGA_get_proxy_settings = int Function(
    ffi.Pointer<GA_session> session, ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef NativeGA_get_wallet_identifier = ffi.Int Function(
    ffi.Pointer<GA_json> net_params,
    ffi.Pointer<GA_json> params,
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef DartGA_get_wallet_identifier = int Function(
    ffi.Pointer<GA_json> net_params,
    ffi.Pointer<GA_json> params,
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef NativeGA_http_request = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> params,
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef DartGA_http_request = int Function(ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> params, ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef NativeGA_refresh_assets = ffi.Int Function(
    ffi.Pointer<GA_session> session, ffi.Pointer<GA_json> params);
typedef DartGA_refresh_assets = int Function(
    ffi.Pointer<GA_session> session, ffi.Pointer<GA_json> params);
typedef NativeGA_get_assets = ffi.Int Function(ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> params, ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef DartGA_get_assets = int Function(ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> params, ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef NativeGA_validate_asset_domain_name = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> params,
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef DartGA_validate_asset_domain_name = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> params,
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef NativeGA_validate = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_validate = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_register_user = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> hw_device,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_register_user = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> hw_device,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_login_user = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> hw_device,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_login_user = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> hw_device,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_set_watch_only = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> username,
    ffi.Pointer<ffi.Char> password);
typedef DartGA_set_watch_only = int Function(ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> username, ffi.Pointer<ffi.Char> password);
typedef NativeGA_get_watch_only_username = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<ffi.Char>> username);
typedef DartGA_get_watch_only_username = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<ffi.Char>> username);
typedef NativeGA_remove_account = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_remove_account = int Function(ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_create_subaccount = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_create_subaccount = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_subaccounts = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_get_subaccounts = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_subaccount = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Uint32 subaccount,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_get_subaccount = int Function(ffi.Pointer<GA_session> session,
    int subaccount, ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_update_subaccount = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_update_subaccount = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_transactions = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_get_transactions = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_receive_address = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_get_receive_address = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_previous_addresses = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_get_previous_addresses = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_unspent_outputs = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_get_unspent_outputs = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_unspent_outputs_for_private_key = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_get_unspent_outputs_for_private_key = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_set_unspent_outputs_status = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_set_unspent_outputs_status = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_transaction_details = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> txhash_hex,
    ffi.Pointer<ffi.Pointer<GA_json>> transaction);
typedef DartGA_get_transaction_details = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> txhash_hex,
    ffi.Pointer<ffi.Pointer<GA_json>> transaction);
typedef NativeGA_get_balance = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_get_balance = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_available_currencies = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_json>> currencies);
typedef DartGA_get_available_currencies = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_json>> currencies);
typedef NativeGA_convert_amount = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> value_details,
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef DartGA_convert_amount = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> value_details,
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef NativeGA_encrypt_with_pin = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_encrypt_with_pin = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_decrypt_with_pin = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_decrypt_with_pin = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_disable_all_pin_logins = ffi.Int Function(
    ffi.Pointer<GA_session> session);
typedef DartGA_disable_all_pin_logins = int Function(
    ffi.Pointer<GA_session> session);
typedef NativeGA_create_transaction = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_create_transaction = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_blind_transaction = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_blind_transaction = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_sign_transaction = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_sign_transaction = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_create_swap_transaction = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> swap_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_create_swap_transaction = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> swap_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_complete_swap_transaction = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> swap_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_complete_swap_transaction = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> swap_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_psbt_sign = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_psbt_sign = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_psbt_get_details = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_psbt_get_details = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_broadcast_transaction = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> transaction_hex,
    ffi.Pointer<ffi.Pointer<ffi.Char>> tx_hash);
typedef DartGA_broadcast_transaction = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> transaction_hex,
    ffi.Pointer<ffi.Pointer<ffi.Char>> tx_hash);
typedef NativeGA_send_transaction = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_send_transaction = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> transaction_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_sign_message = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_sign_message = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_send_nlocktimes = ffi.Int Function(
    ffi.Pointer<GA_session> session);
typedef DartGA_send_nlocktimes = int Function(ffi.Pointer<GA_session> session);
typedef NativeGA_set_csvtime = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> locktime_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_set_csvtime = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> locktime_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_set_nlocktime = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> locktime_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_set_nlocktime = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> locktime_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_set_transaction_memo = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> txhash_hex,
    ffi.Pointer<ffi.Char> memo,
    ffi.Uint32 memo_type);
typedef DartGA_set_transaction_memo = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> txhash_hex,
    ffi.Pointer<ffi.Char> memo,
    int memo_type);
typedef NativeGA_get_fee_estimates = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_json>> estimates);
typedef DartGA_get_fee_estimates = int Function(ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_json>> estimates);
typedef NativeGA_get_credentials = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_get_credentials = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_system_message = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<ffi.Char>> message_text);
typedef DartGA_get_system_message = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<ffi.Char>> message_text);
typedef NativeGA_ack_system_message = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> message_text,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_ack_system_message = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> message_text,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_twofactor_config = ffi.Int Function(
    ffi.Pointer<GA_session> session, ffi.Pointer<ffi.Pointer<GA_json>> config);
typedef DartGA_get_twofactor_config = int Function(
    ffi.Pointer<GA_session> session, ffi.Pointer<ffi.Pointer<GA_json>> config);
typedef NativeGA_change_settings = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> settings,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_change_settings = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> settings,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_get_settings = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_json>> settings);
typedef DartGA_get_settings = int Function(ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_json>> settings);
typedef NativeGA_convert_json_to_string = ffi.Int Function(
    ffi.Pointer<GA_json> json, ffi.Pointer<ffi.Pointer<ffi.Char>> output);
typedef DartGA_convert_json_to_string = int Function(
    ffi.Pointer<GA_json> json, ffi.Pointer<ffi.Pointer<ffi.Char>> output);
typedef NativeGA_convert_string_to_json = ffi.Int Function(
    ffi.Pointer<ffi.Char> input, ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef DartGA_convert_string_to_json = int Function(
    ffi.Pointer<ffi.Char> input, ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef NativeGA_convert_json_value_to_string = ffi.Int Function(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> output);
typedef DartGA_convert_json_value_to_string = int Function(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> output);
typedef NativeGA_convert_json_value_to_uint32 = ffi.Int Function(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Uint32> output);
typedef DartGA_convert_json_value_to_uint32 = int Function(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Uint32> output);
typedef NativeGA_convert_json_value_to_uint64 = ffi.Int Function(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Uint64> output);
typedef DartGA_convert_json_value_to_uint64 = int Function(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Uint64> output);
typedef NativeGA_convert_json_value_to_bool = ffi.Int Function(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Uint32> output);
typedef DartGA_convert_json_value_to_bool = int Function(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Uint32> output);
typedef NativeGA_convert_json_value_to_json = ffi.Int Function(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef DartGA_convert_json_value_to_json = int Function(
    ffi.Pointer<GA_json> json,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef NativeGA_destroy_json = ffi.Int Function(ffi.Pointer<GA_json> json);
typedef DartGA_destroy_json = int Function(ffi.Pointer<GA_json> json);
typedef NativeGA_auth_handler_get_status = ffi.Int Function(
    ffi.Pointer<GA_auth_handler> call,
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef DartGA_auth_handler_get_status = int Function(
    ffi.Pointer<GA_auth_handler> call,
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef NativeGA_auth_handler_request_code = ffi.Int Function(
    ffi.Pointer<GA_auth_handler> call, ffi.Pointer<ffi.Char> method);
typedef DartGA_auth_handler_request_code = int Function(
    ffi.Pointer<GA_auth_handler> call, ffi.Pointer<ffi.Char> method);
typedef NativeGA_auth_handler_resolve_code = ffi.Int Function(
    ffi.Pointer<GA_auth_handler> call, ffi.Pointer<ffi.Char> code);
typedef DartGA_auth_handler_resolve_code = int Function(
    ffi.Pointer<GA_auth_handler> call, ffi.Pointer<ffi.Char> code);
typedef NativeGA_auth_handler_call = ffi.Int Function(
    ffi.Pointer<GA_auth_handler> call);
typedef DartGA_auth_handler_call = int Function(
    ffi.Pointer<GA_auth_handler> call);
typedef NativeGA_destroy_auth_handler = ffi.Int Function(
    ffi.Pointer<GA_auth_handler> call);
typedef DartGA_destroy_auth_handler = int Function(
    ffi.Pointer<GA_auth_handler> call);
typedef NativeGA_change_settings_twofactor = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> method,
    ffi.Pointer<GA_json> twofactor_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_change_settings_twofactor = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> method,
    ffi.Pointer<GA_json> twofactor_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_twofactor_reset = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> email,
    ffi.Uint32 is_dispute,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_twofactor_reset = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> email,
    int is_dispute,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_twofactor_undo_reset = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> email,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_twofactor_undo_reset = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Char> email,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_twofactor_cancel_reset = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_twofactor_cancel_reset = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_twofactor_change_limits = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> limit_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_twofactor_change_limits = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> limit_details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_bcur_encode = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_bcur_encode = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_bcur_decode = ffi.Int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef DartGA_bcur_decode = int Function(
    ffi.Pointer<GA_session> session,
    ffi.Pointer<GA_json> details,
    ffi.Pointer<ffi.Pointer<GA_auth_handler>> call);
typedef NativeGA_destroy_string = ffi.Void Function(ffi.Pointer<ffi.Char> str);
typedef DartGA_destroy_string = void Function(ffi.Pointer<ffi.Char> str);
typedef NativeGA_get_random_bytes = ffi.Int Function(ffi.Size num_bytes,
    ffi.Pointer<ffi.UnsignedChar> output_bytes, ffi.Size len);
typedef DartGA_get_random_bytes = int Function(
    int num_bytes, ffi.Pointer<ffi.UnsignedChar> output_bytes, int len);
typedef NativeGA_generate_mnemonic = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ffi.Char>> output);
typedef DartGA_generate_mnemonic = int Function(
    ffi.Pointer<ffi.Pointer<ffi.Char>> output);
typedef NativeGA_generate_mnemonic_12 = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ffi.Char>> output);
typedef DartGA_generate_mnemonic_12 = int Function(
    ffi.Pointer<ffi.Pointer<ffi.Char>> output);
typedef NativeGA_validate_mnemonic = ffi.Int Function(
    ffi.Pointer<ffi.Char> mnemonic, ffi.Pointer<ffi.Uint32> valid);
typedef DartGA_validate_mnemonic = int Function(
    ffi.Pointer<ffi.Char> mnemonic, ffi.Pointer<ffi.Uint32> valid);
typedef NativeGA_register_network = ffi.Int Function(
    ffi.Pointer<ffi.Char> name, ffi.Pointer<GA_json> network_details);
typedef DartGA_register_network = int Function(
    ffi.Pointer<ffi.Char> name, ffi.Pointer<GA_json> network_details);
typedef NativeGA_get_networks = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef DartGA_get_networks = int Function(
    ffi.Pointer<ffi.Pointer<GA_json>> output);
typedef NativeGA_get_uniform_uint32_t = ffi.Int Function(
    ffi.Uint32 upper_bound, ffi.Pointer<ffi.Uint32> output);
typedef DartGA_get_uniform_uint32_t = int Function(
    int upper_bound, ffi.Pointer<ffi.Uint32> output);

final class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

final class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

final class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

typedef Native__ctype_get_mb_cur_max = ffi.Size Function();
typedef Dart__ctype_get_mb_cur_max = int Function();
typedef NativeAtof = ffi.Double Function(ffi.Pointer<ffi.Char> __nptr);
typedef DartAtof = double Function(ffi.Pointer<ffi.Char> __nptr);
typedef NativeAtoi = ffi.Int Function(ffi.Pointer<ffi.Char> __nptr);
typedef DartAtoi = int Function(ffi.Pointer<ffi.Char> __nptr);
typedef NativeAtol = ffi.Long Function(ffi.Pointer<ffi.Char> __nptr);
typedef DartAtol = int Function(ffi.Pointer<ffi.Char> __nptr);
typedef NativeAtoll = ffi.LongLong Function(ffi.Pointer<ffi.Char> __nptr);
typedef DartAtoll = int Function(ffi.Pointer<ffi.Char> __nptr);
typedef NativeStrtod = ffi.Double Function(
    ffi.Pointer<ffi.Char> __nptr, ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr);
typedef DartStrtod = double Function(
    ffi.Pointer<ffi.Char> __nptr, ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr);
typedef NativeStrtof = ffi.Float Function(
    ffi.Pointer<ffi.Char> __nptr, ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr);
typedef DartStrtof = double Function(
    ffi.Pointer<ffi.Char> __nptr, ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr);
typedef NativeStrtol = ffi.Long Function(ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr, ffi.Int __base);
typedef DartStrtol = int Function(ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr, int __base);
typedef NativeStrtoul = ffi.UnsignedLong Function(ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr, ffi.Int __base);
typedef DartStrtoul = int Function(ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr, int __base);
typedef NativeStrtoq = ffi.LongLong Function(ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr, ffi.Int __base);
typedef DartStrtoq = int Function(ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr, int __base);
typedef NativeStrtouq = ffi.UnsignedLongLong Function(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    ffi.Int __base);
typedef DartStrtouq = int Function(ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr, int __base);
typedef NativeStrtoll = ffi.LongLong Function(ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr, ffi.Int __base);
typedef DartStrtoll = int Function(ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr, int __base);
typedef NativeStrtoull = ffi.UnsignedLongLong Function(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    ffi.Int __base);
typedef DartStrtoull = int Function(ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr, int __base);
typedef NativeL64a = ffi.Pointer<ffi.Char> Function(ffi.Long __n);
typedef DartL64a = ffi.Pointer<ffi.Char> Function(int __n);
typedef NativeA64l = ffi.Long Function(ffi.Pointer<ffi.Char> __s);
typedef DartA64l = int Function(ffi.Pointer<ffi.Char> __s);
typedef NativeRandom = ffi.Long Function();
typedef DartRandom = int Function();
typedef NativeSrandom = ffi.Void Function(ffi.UnsignedInt __seed);
typedef DartSrandom = void Function(int __seed);
typedef NativeInitstate = ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt __seed,
    ffi.Pointer<ffi.Char> __statebuf, ffi.Size __statelen);
typedef DartInitstate = ffi.Pointer<ffi.Char> Function(
    int __seed, ffi.Pointer<ffi.Char> __statebuf, int __statelen);
typedef NativeSetstate = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> __statebuf);
typedef DartSetstate = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> __statebuf);

final class random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int()
  external int rand_type;

  @ffi.Int()
  external int rand_deg;

  @ffi.Int()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

typedef NativeRandom_r = ffi.Int Function(
    ffi.Pointer<random_data> __buf, ffi.Pointer<ffi.Int32> __result);
typedef DartRandom_r = int Function(
    ffi.Pointer<random_data> __buf, ffi.Pointer<ffi.Int32> __result);
typedef NativeSrandom_r = ffi.Int Function(
    ffi.UnsignedInt __seed, ffi.Pointer<random_data> __buf);
typedef DartSrandom_r = int Function(
    int __seed, ffi.Pointer<random_data> __buf);
typedef NativeInitstate_r = ffi.Int Function(
    ffi.UnsignedInt __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Size __statelen,
    ffi.Pointer<random_data> __buf);
typedef DartInitstate_r = int Function(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf);
typedef NativeSetstate_r = ffi.Int Function(
    ffi.Pointer<ffi.Char> __statebuf, ffi.Pointer<random_data> __buf);
typedef DartSetstate_r = int Function(
    ffi.Pointer<ffi.Char> __statebuf, ffi.Pointer<random_data> __buf);
typedef NativeRand = ffi.Int Function();
typedef DartRand = int Function();
typedef NativeSrand = ffi.Void Function(ffi.UnsignedInt __seed);
typedef DartSrand = void Function(int __seed);
typedef NativeRand_r = ffi.Int Function(ffi.Pointer<ffi.UnsignedInt> __seed);
typedef DartRand_r = int Function(ffi.Pointer<ffi.UnsignedInt> __seed);
typedef NativeDrand48 = ffi.Double Function();
typedef DartDrand48 = double Function();
typedef NativeErand48 = ffi.Double Function(
    ffi.Pointer<ffi.UnsignedShort> __xsubi);
typedef DartErand48 = double Function(ffi.Pointer<ffi.UnsignedShort> __xsubi);
typedef NativeLrand48 = ffi.Long Function();
typedef DartLrand48 = int Function();
typedef NativeNrand48 = ffi.Long Function(
    ffi.Pointer<ffi.UnsignedShort> __xsubi);
typedef DartNrand48 = int Function(ffi.Pointer<ffi.UnsignedShort> __xsubi);
typedef NativeMrand48 = ffi.Long Function();
typedef DartMrand48 = int Function();
typedef NativeJrand48 = ffi.Long Function(
    ffi.Pointer<ffi.UnsignedShort> __xsubi);
typedef DartJrand48 = int Function(ffi.Pointer<ffi.UnsignedShort> __xsubi);
typedef NativeSrand48 = ffi.Void Function(ffi.Long __seedval);
typedef DartSrand48 = void Function(int __seedval);
typedef NativeSeed48 = ffi.Pointer<ffi.UnsignedShort> Function(
    ffi.Pointer<ffi.UnsignedShort> __seed16v);
typedef DartSeed48 = ffi.Pointer<ffi.UnsignedShort> Function(
    ffi.Pointer<ffi.UnsignedShort> __seed16v);
typedef NativeLcong48 = ffi.Void Function(
    ffi.Pointer<ffi.UnsignedShort> __param);
typedef DartLcong48 = void Function(ffi.Pointer<ffi.UnsignedShort> __param);

final class drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __x;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __old_x;

  @ffi.UnsignedShort()
  external int __c;

  @ffi.UnsignedShort()
  external int __init;

  @ffi.UnsignedLongLong()
  external int __a;
}

typedef NativeDrand48_r = ffi.Int Function(
    ffi.Pointer<drand48_data> __buffer, ffi.Pointer<ffi.Double> __result);
typedef DartDrand48_r = int Function(
    ffi.Pointer<drand48_data> __buffer, ffi.Pointer<ffi.Double> __result);
typedef NativeErand48_r = ffi.Int Function(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result);
typedef DartErand48_r = int Function(ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer, ffi.Pointer<ffi.Double> __result);
typedef NativeLrand48_r = ffi.Int Function(
    ffi.Pointer<drand48_data> __buffer, ffi.Pointer<ffi.Long> __result);
typedef DartLrand48_r = int Function(
    ffi.Pointer<drand48_data> __buffer, ffi.Pointer<ffi.Long> __result);
typedef NativeNrand48_r = ffi.Int Function(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result);
typedef DartNrand48_r = int Function(ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer, ffi.Pointer<ffi.Long> __result);
typedef NativeMrand48_r = ffi.Int Function(
    ffi.Pointer<drand48_data> __buffer, ffi.Pointer<ffi.Long> __result);
typedef DartMrand48_r = int Function(
    ffi.Pointer<drand48_data> __buffer, ffi.Pointer<ffi.Long> __result);
typedef NativeJrand48_r = ffi.Int Function(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result);
typedef DartJrand48_r = int Function(ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer, ffi.Pointer<ffi.Long> __result);
typedef NativeSrand48_r = ffi.Int Function(
    ffi.Long __seedval, ffi.Pointer<drand48_data> __buffer);
typedef DartSrand48_r = int Function(
    int __seedval, ffi.Pointer<drand48_data> __buffer);
typedef NativeSeed48_r = ffi.Int Function(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer);
typedef DartSeed48_r = int Function(ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer);
typedef NativeLcong48_r = ffi.Int Function(
    ffi.Pointer<ffi.UnsignedShort> __param, ffi.Pointer<drand48_data> __buffer);
typedef DartLcong48_r = int Function(
    ffi.Pointer<ffi.UnsignedShort> __param, ffi.Pointer<drand48_data> __buffer);
typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;
typedef NativeArc4random = __uint32_t Function();
typedef DartArc4random = int Function();
typedef NativeArc4random_buf = ffi.Void Function(
    ffi.Pointer<ffi.Void> __buf, ffi.Size __size);
typedef DartArc4random_buf = void Function(
    ffi.Pointer<ffi.Void> __buf, int __size);
typedef NativeArc4random_uniform = __uint32_t Function(
    __uint32_t __upper_bound);
typedef DartArc4random_uniform = int Function(int __upper_bound);
typedef NativeMalloc = ffi.Pointer<ffi.Void> Function(ffi.Size __size);
typedef DartMalloc = ffi.Pointer<ffi.Void> Function(int __size);
typedef NativeCalloc = ffi.Pointer<ffi.Void> Function(
    ffi.Size __nmemb, ffi.Size __size);
typedef DartCalloc = ffi.Pointer<ffi.Void> Function(int __nmemb, int __size);
typedef NativeRealloc = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> __ptr, ffi.Size __size);
typedef DartRealloc = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> __ptr, int __size);
typedef NativeFree = ffi.Void Function(ffi.Pointer<ffi.Void> __ptr);
typedef DartFree = void Function(ffi.Pointer<ffi.Void> __ptr);
typedef NativeReallocarray = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> __ptr, ffi.Size __nmemb, ffi.Size __size);
typedef DartReallocarray = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> __ptr, int __nmemb, int __size);
typedef NativeAlloca = ffi.Pointer<ffi.Void> Function(ffi.Size __size);
typedef DartAlloca = ffi.Pointer<ffi.Void> Function(int __size);
typedef NativeValloc = ffi.Pointer<ffi.Void> Function(ffi.Size __size);
typedef DartValloc = ffi.Pointer<ffi.Void> Function(int __size);
typedef NativePosix_memalign = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    ffi.Size __alignment,
    ffi.Size __size);
typedef DartPosix_memalign = int Function(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr, int __alignment, int __size);
typedef NativeAligned_alloc = ffi.Pointer<ffi.Void> Function(
    ffi.Size __alignment, ffi.Size __size);
typedef DartAligned_alloc = ffi.Pointer<ffi.Void> Function(
    int __alignment, int __size);
typedef NativeAbort = ffi.Void Function();
typedef DartAbort = void Function();
typedef NativeAtexit = ffi.Int Function(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func);
typedef DartAtexit = int Function(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func);
typedef NativeAt_quick_exit = ffi.Int Function(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func);
typedef DartAt_quick_exit = int Function(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func);
typedef NativeOn_exit = ffi.Int Function(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>
        __func,
    ffi.Pointer<ffi.Void> __arg);
typedef DartOn_exit = int Function(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>
        __func,
    ffi.Pointer<ffi.Void> __arg);
typedef NativeExit = ffi.Void Function(ffi.Int __status);
typedef DartExit = void Function(int __status);
typedef NativeQuick_exit = ffi.Void Function(ffi.Int __status);
typedef DartQuick_exit = void Function(int __status);
typedef Native_Exit = ffi.Void Function(ffi.Int __status);
typedef Dart_Exit = void Function(int __status);
typedef NativeGetenv = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> __name);
typedef DartGetenv = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> __name);
typedef NativePutenv = ffi.Int Function(ffi.Pointer<ffi.Char> __string);
typedef DartPutenv = int Function(ffi.Pointer<ffi.Char> __string);
typedef NativeSetenv = ffi.Int Function(ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value, ffi.Int __replace);
typedef DartSetenv = int Function(
    ffi.Pointer<ffi.Char> __name, ffi.Pointer<ffi.Char> __value, int __replace);
typedef NativeUnsetenv = ffi.Int Function(ffi.Pointer<ffi.Char> __name);
typedef DartUnsetenv = int Function(ffi.Pointer<ffi.Char> __name);
typedef NativeClearenv = ffi.Int Function();
typedef DartClearenv = int Function();
typedef NativeMktemp = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> __template);
typedef DartMktemp = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> __template);
typedef NativeMkstemp = ffi.Int Function(ffi.Pointer<ffi.Char> __template);
typedef DartMkstemp = int Function(ffi.Pointer<ffi.Char> __template);
typedef NativeMkstemps = ffi.Int Function(
    ffi.Pointer<ffi.Char> __template, ffi.Int __suffixlen);
typedef DartMkstemps = int Function(
    ffi.Pointer<ffi.Char> __template, int __suffixlen);
typedef NativeMkdtemp = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> __template);
typedef DartMkdtemp = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> __template);
typedef NativeSystem = ffi.Int Function(ffi.Pointer<ffi.Char> __command);
typedef DartSystem = int Function(ffi.Pointer<ffi.Char> __command);
typedef NativeRealpath = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> __name, ffi.Pointer<ffi.Char> __resolved);
typedef DartRealpath = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> __name, ffi.Pointer<ffi.Char> __resolved);
typedef __compar_fn_t = ffi.Pointer<ffi.NativeFunction<__compar_fn_tFunction>>;
typedef __compar_fn_tFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>);
typedef Dart__compar_fn_tFunction = int Function(
    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>);
typedef NativeBsearch = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    ffi.Size __nmemb,
    ffi.Size __size,
    __compar_fn_t __compar);
typedef DartBsearch = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar);
typedef NativeQsort = ffi.Void Function(ffi.Pointer<ffi.Void> __base,
    ffi.Size __nmemb, ffi.Size __size, __compar_fn_t __compar);
typedef DartQsort = void Function(ffi.Pointer<ffi.Void> __base, int __nmemb,
    int __size, __compar_fn_t __compar);
typedef NativeAbs = ffi.Int Function(ffi.Int __x);
typedef DartAbs = int Function(int __x);
typedef NativeLabs = ffi.Long Function(ffi.Long __x);
typedef DartLabs = int Function(int __x);
typedef NativeLlabs = ffi.LongLong Function(ffi.LongLong __x);
typedef DartLlabs = int Function(int __x);
typedef NativeDiv = div_t Function(ffi.Int __numer, ffi.Int __denom);
typedef DartDiv = div_t Function(int __numer, int __denom);
typedef NativeLdiv = ldiv_t Function(ffi.Long __numer, ffi.Long __denom);
typedef DartLdiv = ldiv_t Function(int __numer, int __denom);
typedef NativeLldiv = lldiv_t Function(
    ffi.LongLong __numer, ffi.LongLong __denom);
typedef DartLldiv = lldiv_t Function(int __numer, int __denom);
typedef NativeEcvt = ffi.Pointer<ffi.Char> Function(
    ffi.Double __value,
    ffi.Int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign);
typedef DartEcvt = ffi.Pointer<ffi.Char> Function(double __value, int __ndigit,
    ffi.Pointer<ffi.Int> __decpt, ffi.Pointer<ffi.Int> __sign);
typedef NativeFcvt = ffi.Pointer<ffi.Char> Function(
    ffi.Double __value,
    ffi.Int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign);
typedef DartFcvt = ffi.Pointer<ffi.Char> Function(double __value, int __ndigit,
    ffi.Pointer<ffi.Int> __decpt, ffi.Pointer<ffi.Int> __sign);
typedef NativeGcvt = ffi.Pointer<ffi.Char> Function(
    ffi.Double __value, ffi.Int __ndigit, ffi.Pointer<ffi.Char> __buf);
typedef DartGcvt = ffi.Pointer<ffi.Char> Function(
    double __value, int __ndigit, ffi.Pointer<ffi.Char> __buf);
typedef NativeEcvt_r = ffi.Int Function(
    ffi.Double __value,
    ffi.Int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    ffi.Size __len);
typedef DartEcvt_r = int Function(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len);
typedef NativeFcvt_r = ffi.Int Function(
    ffi.Double __value,
    ffi.Int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    ffi.Size __len);
typedef DartFcvt_r = int Function(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len);
typedef NativeMblen = ffi.Int Function(ffi.Pointer<ffi.Char> __s, ffi.Size __n);
typedef DartMblen = int Function(ffi.Pointer<ffi.Char> __s, int __n);
typedef NativeMbtowc = ffi.Int Function(
    ffi.Pointer<ffi.WChar> __pwc, ffi.Pointer<ffi.Char> __s, ffi.Size __n);
typedef DartMbtowc = int Function(
    ffi.Pointer<ffi.WChar> __pwc, ffi.Pointer<ffi.Char> __s, int __n);
typedef NativeWctomb = ffi.Int Function(
    ffi.Pointer<ffi.Char> __s, ffi.WChar __wchar);
typedef DartWctomb = int Function(ffi.Pointer<ffi.Char> __s, int __wchar);
typedef NativeMbstowcs = ffi.Size Function(
    ffi.Pointer<ffi.WChar> __pwcs, ffi.Pointer<ffi.Char> __s, ffi.Size __n);
typedef DartMbstowcs = int Function(
    ffi.Pointer<ffi.WChar> __pwcs, ffi.Pointer<ffi.Char> __s, int __n);
typedef NativeWcstombs = ffi.Size Function(
    ffi.Pointer<ffi.Char> __s, ffi.Pointer<ffi.WChar> __pwcs, ffi.Size __n);
typedef DartWcstombs = int Function(
    ffi.Pointer<ffi.Char> __s, ffi.Pointer<ffi.WChar> __pwcs, int __n);
typedef NativeRpmatch = ffi.Int Function(ffi.Pointer<ffi.Char> __response);
typedef DartRpmatch = int Function(ffi.Pointer<ffi.Char> __response);
typedef NativeGetsubopt = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep);
typedef DartGetsubopt = int Function(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep);
typedef NativeGetloadavg = ffi.Int Function(
    ffi.Pointer<ffi.Double> __loadavg, ffi.Int __nelem);
typedef DartGetloadavg = int Function(
    ffi.Pointer<ffi.Double> __loadavg, int __nelem);

final class Option______c_char extends ffi.Opaque {}

final class TransactionType extends ffi.Opaque {}

final class TxResult extends ffi.Struct {
  external ffi.Pointer<ffi.Char> tx_ptr;

  external ffi.Pointer<ffi.Char> error_msg;
}

final class UtxoFFI extends ffi.Struct {
  external ffi.Pointer<ffi.Char> txid;

  @ffi.Uint32()
  external int vout;

  external ffi.Pointer<ffi.Char> script_pub_key;

  external ffi.Pointer<ffi.Char> asset_id;

  @ffi.Uint64()
  external int value;

  external ffi.Pointer<ffi.Char> asset_bf;

  external ffi.Pointer<ffi.Char> value_bf;

  external ffi.Pointer<ffi.Char> asset_commitment;

  external ffi.Pointer<ffi.Char> value_commitment;
}

typedef NativeValidate_submarine = ffi.Int32 Function(
    ffi.Pointer<ffi.Char> preimage_hash,
    ffi.Pointer<ffi.Char> claim_public_key,
    ffi.Pointer<ffi.Char> refund_public_key,
    ffi.Uint32 timeout_block_height,
    ffi.Pointer<ffi.Char> lockup_address,
    ffi.Pointer<ffi.Char> redeem_script,
    ffi.Pointer<ffi.Char> blinding_key);
typedef DartValidate_submarine = int Function(
    ffi.Pointer<ffi.Char> preimage_hash,
    ffi.Pointer<ffi.Char> claim_public_key,
    ffi.Pointer<ffi.Char> refund_public_key,
    int timeout_block_height,
    ffi.Pointer<ffi.Char> lockup_address,
    ffi.Pointer<ffi.Char> redeem_script,
    ffi.Pointer<ffi.Char> blinding_key);
typedef NativeExtract_claim_public_key = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> comparison_script);
typedef DartExtract_claim_public_key = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> comparison_script);
typedef NativeCreate_and_sign_claim_transaction
    = ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<ffi.Char> redeem_script,
        ffi.Pointer<ffi.Char> blinding_key,
        ffi.Pointer<ffi.Char> onchain_address,
        ffi.Pointer<ffi.Char> private_key,
        ffi.Pointer<ffi.Char> preimage,
        ffi.Pointer<ffi.Char> tx,
        ffi.Uint64 fees);
typedef DartCreate_and_sign_claim_transaction = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> redeem_script,
    ffi.Pointer<ffi.Char> blinding_key,
    ffi.Pointer<ffi.Char> onchain_address,
    ffi.Pointer<ffi.Char> private_key,
    ffi.Pointer<ffi.Char> preimage,
    ffi.Pointer<ffi.Char> tx,
    int fees);
typedef NativeCreate_and_sign_refund_transaction
    = ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<ffi.Char> redeem_script,
        ffi.Pointer<ffi.Char> blinding_key,
        ffi.Pointer<ffi.Char> onchain_address,
        ffi.Pointer<ffi.Char> private_key,
        ffi.Pointer<ffi.Char> tx,
        ffi.Uint64 fees);
typedef DartCreate_and_sign_refund_transaction = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> redeem_script,
    ffi.Pointer<ffi.Char> blinding_key,
    ffi.Pointer<ffi.Char> onchain_address,
    ffi.Pointer<ffi.Char> private_key,
    ffi.Pointer<ffi.Char> tx,
    int fees);
typedef NativeGet_key_pair = ffi.Pointer<ffi.Char> Function();
typedef DartGet_key_pair = ffi.Pointer<ffi.Char> Function();
typedef NativeSign_message_schnorr = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> message, ffi.Pointer<ffi.Char> private_key);
typedef DartSign_message_schnorr = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> message, ffi.Pointer<ffi.Char> private_key);
typedef NativeVerify_signature_schnorr = ffi.Int32 Function(
    ffi.Pointer<ffi.Char> signature,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Char> public_key);
typedef DartVerify_signature_schnorr = int Function(
    ffi.Pointer<ffi.Char> signature,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Char> public_key);
typedef NativeCreate_taxi_transaction = TxResult Function(
    ffi.Uint64 send_amount,
    ffi.Pointer<ffi.Char> send_address,
    ffi.Pointer<ffi.Char> change_address,
    ffi.Pointer<UtxoFFI> utxos,
    ffi.UintPtr utxos_len,
    ffi.Pointer<ffi.Char> user_agent,
    ffi.Pointer<ffi.Char> api_key,
    ffi.Bool subtract_fee_from_amount,
    ffi.Bool is_lowball,
    ffi.Bool is_testnet);
typedef DartCreate_taxi_transaction = TxResult Function(
    int send_amount,
    ffi.Pointer<ffi.Char> send_address,
    ffi.Pointer<ffi.Char> change_address,
    ffi.Pointer<UtxoFFI> utxos,
    int utxos_len,
    ffi.Pointer<ffi.Char> user_agent,
    ffi.Pointer<ffi.Char> api_key,
    bool subtract_fee_from_amount,
    bool is_lowball,
    bool is_testnet);
typedef NativeCreate_final_taxi_pset = TxResult Function(
    ffi.Pointer<ffi.Char> client_signed_pset,
    ffi.Pointer<ffi.Char> server_signed_pset);
typedef DartCreate_final_taxi_pset = TxResult Function(
    ffi.Pointer<ffi.Char> client_signed_pset,
    ffi.Pointer<ffi.Char> server_signed_pset);
typedef NativeRust_cstr_free = ffi.Void Function(ffi.Pointer<ffi.Char> s);
typedef DartRust_cstr_free = void Function(ffi.Pointer<ffi.Char> s);
typedef LogCallback = ffi.Pointer<ffi.NativeFunction<LogCallbackFunction>>;
typedef LogCallbackFunction = ffi.Void Function(ffi.Pointer<ffi.Char>);
typedef DartLogCallbackFunction = void Function(ffi.Pointer<ffi.Char>);
typedef NativeRegister_log_callback = ffi.Void Function(LogCallback callback);
typedef DartRegister_log_callback = void Function(LogCallback callback);
typedef NativeGet_last_error = ffi.Pointer<ffi.Char> Function();
typedef DartGet_last_error = ffi.Pointer<ffi.Char> Function();

const int NULL = 0;

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int __GLIBC_USE_C2X_STRTOL = 1;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 39;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int _BITS_STDINT_LEAST_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int GA_OK = 0;

const int GA_ERROR = -1;

const int GA_RECONNECT = -2;

const int GA_SESSION_LOST = -3;

const int GA_TIMEOUT = -4;

const int GA_NOT_AUTHORIZED = -5;

const int GA_NONE = 0;

const int GA_INFO = 1;

const int GA_DEBUG = 2;

const int GA_TRUE = 1;

const int GA_FALSE = 0;

const int __bool_true_false_are_defined = 1;

const int true1 = 1;

const int false1 = 0;

const int _STDLIB_H = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int _ALLOCA_H = 1;

const int DEFAULT_ELECTRUM_TIMEOUT = 10;
